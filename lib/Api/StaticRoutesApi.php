<?php
/**
 * StaticRoutesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * StaticRoutesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StaticRoutesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDeviceSwitchRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch
     *
     * @param  string $serial serial (required)
     * @param  \Swagger\Client\Model\CreateDeviceSwitchRoutingStaticRoute $create_device_switch_routing_static_route create_device_switch_routing_static_route (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createDeviceSwitchRoutingStaticRoute($serial, $create_device_switch_routing_static_route)
    {
        list($response) = $this->createDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $create_device_switch_routing_static_route);
        return $response;
    }

    /**
     * Operation createDeviceSwitchRoutingStaticRouteWithHttpInfo
     *
     * Create a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  \Swagger\Client\Model\CreateDeviceSwitchRoutingStaticRoute $create_device_switch_routing_static_route (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $create_device_switch_routing_static_route)
    {
        $returnType = 'object';
        $request = $this->createDeviceSwitchRoutingStaticRouteRequest($serial, $create_device_switch_routing_static_route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceSwitchRoutingStaticRouteAsync
     *
     * Create a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  \Swagger\Client\Model\CreateDeviceSwitchRoutingStaticRoute $create_device_switch_routing_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceSwitchRoutingStaticRouteAsync($serial, $create_device_switch_routing_static_route)
    {
        return $this->createDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $create_device_switch_routing_static_route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo
     *
     * Create a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  \Swagger\Client\Model\CreateDeviceSwitchRoutingStaticRoute $create_device_switch_routing_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $create_device_switch_routing_static_route)
    {
        $returnType = 'object';
        $request = $this->createDeviceSwitchRoutingStaticRouteRequest($serial, $create_device_switch_routing_static_route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceSwitchRoutingStaticRoute'
     *
     * @param  string $serial (required)
     * @param  \Swagger\Client\Model\CreateDeviceSwitchRoutingStaticRoute $create_device_switch_routing_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDeviceSwitchRoutingStaticRouteRequest($serial, $create_device_switch_routing_static_route)
    {
        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceSwitchRoutingStaticRoute'
            );
        }
        // verify the required parameter 'create_device_switch_routing_static_route' is set
        if ($create_device_switch_routing_static_route === null || (is_array($create_device_switch_routing_static_route) && count($create_device_switch_routing_static_route) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_switch_routing_static_route when calling createDeviceSwitchRoutingStaticRoute'
            );
        }

        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_device_switch_routing_static_route)) {
            $_tempBody = $create_device_switch_routing_static_route;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkApplianceStaticRoute
     *
     * Add a static route for an MX or teleworker network
     *
     * @param  string $network_id network_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkApplianceStaticRoute $create_network_appliance_static_route create_network_appliance_static_route (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createNetworkApplianceStaticRoute($network_id, $create_network_appliance_static_route)
    {
        list($response) = $this->createNetworkApplianceStaticRouteWithHttpInfo($network_id, $create_network_appliance_static_route);
        return $response;
    }

    /**
     * Operation createNetworkApplianceStaticRouteWithHttpInfo
     *
     * Add a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkApplianceStaticRoute $create_network_appliance_static_route (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkApplianceStaticRouteWithHttpInfo($network_id, $create_network_appliance_static_route)
    {
        $returnType = 'object';
        $request = $this->createNetworkApplianceStaticRouteRequest($network_id, $create_network_appliance_static_route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkApplianceStaticRouteAsync
     *
     * Add a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkApplianceStaticRoute $create_network_appliance_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkApplianceStaticRouteAsync($network_id, $create_network_appliance_static_route)
    {
        return $this->createNetworkApplianceStaticRouteAsyncWithHttpInfo($network_id, $create_network_appliance_static_route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkApplianceStaticRouteAsyncWithHttpInfo
     *
     * Add a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkApplianceStaticRoute $create_network_appliance_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkApplianceStaticRouteAsyncWithHttpInfo($network_id, $create_network_appliance_static_route)
    {
        $returnType = 'object';
        $request = $this->createNetworkApplianceStaticRouteRequest($network_id, $create_network_appliance_static_route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkApplianceStaticRoute'
     *
     * @param  string $network_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkApplianceStaticRoute $create_network_appliance_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNetworkApplianceStaticRouteRequest($network_id, $create_network_appliance_static_route)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkApplianceStaticRoute'
            );
        }
        // verify the required parameter 'create_network_appliance_static_route' is set
        if ($create_network_appliance_static_route === null || (is_array($create_network_appliance_static_route) && count($create_network_appliance_static_route) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_appliance_static_route when calling createNetworkApplianceStaticRoute'
            );
        }

        $resourcePath = '/networks/{networkId}/appliance/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_network_appliance_static_route)) {
            $_tempBody = $create_network_appliance_static_route;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id network_id (required)
     * @param  string $switch_stack_id switch_stack_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkSwitchStackRoutingStaticRoute $create_network_switch_stack_routing_static_route create_network_switch_stack_routing_static_route (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route)
    {
        list($response) = $this->createNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route);
        return $response;
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkSwitchStackRoutingStaticRoute $create_network_switch_stack_routing_static_route (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route)
    {
        $returnType = 'object';
        $request = $this->createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkSwitchStackRoutingStaticRoute $create_network_switch_stack_routing_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route)
    {
        return $this->createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkSwitchStackRoutingStaticRoute $create_network_switch_stack_routing_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route)
    {
        $returnType = 'object';
        $request = $this->createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  \Swagger\Client\Model\CreateNetworkSwitchStackRoutingStaticRoute $create_network_switch_stack_routing_static_route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_network_switch_stack_routing_static_route)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }
        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }
        // verify the required parameter 'create_network_switch_stack_routing_static_route' is set
        if ($create_network_switch_stack_routing_static_route === null || (is_array($create_network_switch_stack_routing_static_route) && count($create_network_switch_stack_routing_static_route) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_switch_stack_routing_static_route when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }

        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_network_switch_stack_routing_static_route)) {
            $_tempBody = $create_network_switch_stack_routing_static_route;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDeviceSwitchRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch
     *
     * @param  string $serial serial (required)
     * @param  string $static_route_id static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDeviceSwitchRoutingStaticRoute($serial, $static_route_id)
    {
        $this->deleteDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id);
    }

    /**
     * Operation deleteDeviceSwitchRoutingStaticRouteWithHttpInfo
     *
     * Delete a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id)
    {
        $returnType = '';
        $request = $this->deleteDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDeviceSwitchRoutingStaticRouteAsync
     *
     * Delete a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeviceSwitchRoutingStaticRouteAsync($serial, $static_route_id)
    {
        return $this->deleteDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo
     *
     * Delete a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id)
    {
        $returnType = '';
        $request = $this->deleteDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDeviceSwitchRoutingStaticRoute'
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id)
    {
        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling deleteDeviceSwitchRoutingStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling deleteDeviceSwitchRoutingStaticRoute'
            );
        }

        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkApplianceStaticRoute
     *
     * Delete a static route from an MX or teleworker network
     *
     * @param  string $network_id network_id (required)
     * @param  string $static_route_id static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkApplianceStaticRoute($network_id, $static_route_id)
    {
        $this->deleteNetworkApplianceStaticRouteWithHttpInfo($network_id, $static_route_id);
    }

    /**
     * Operation deleteNetworkApplianceStaticRouteWithHttpInfo
     *
     * Delete a static route from an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkApplianceStaticRouteWithHttpInfo($network_id, $static_route_id)
    {
        $returnType = '';
        $request = $this->deleteNetworkApplianceStaticRouteRequest($network_id, $static_route_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkApplianceStaticRouteAsync
     *
     * Delete a static route from an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkApplianceStaticRouteAsync($network_id, $static_route_id)
    {
        return $this->deleteNetworkApplianceStaticRouteAsyncWithHttpInfo($network_id, $static_route_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkApplianceStaticRouteAsyncWithHttpInfo
     *
     * Delete a static route from an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkApplianceStaticRouteAsyncWithHttpInfo($network_id, $static_route_id)
    {
        $returnType = '';
        $request = $this->deleteNetworkApplianceStaticRouteRequest($network_id, $static_route_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkApplianceStaticRoute'
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNetworkApplianceStaticRouteRequest($network_id, $static_route_id)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkApplianceStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling deleteNetworkApplianceStaticRoute'
            );
        }

        $resourcePath = '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id network_id (required)
     * @param  string $switch_stack_id switch_stack_id (required)
     * @param  string $static_route_id static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id)
    {
        $this->deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id);
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id)
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id)
    {
        return $this->deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id)
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }
        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }

        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch
     *
     * @param  string $serial serial (required)
     * @param  string $static_route_id static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getDeviceSwitchRoutingStaticRoute($serial, $static_route_id)
    {
        list($response) = $this->getDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id);
        return $response;
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRouteWithHttpInfo
     *
     * Return a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id)
    {
        $returnType = 'object';
        $request = $this->getDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRouteAsync
     *
     * Return a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingStaticRouteAsync($serial, $static_route_id)
    {
        return $this->getDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo
     *
     * Return a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id)
    {
        $returnType = 'object';
        $request = $this->getDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceSwitchRoutingStaticRoute'
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id)
    {
        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceSwitchRoutingStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling getDeviceSwitchRoutingStaticRoute'
            );
        }

        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch
     *
     * @param  string $serial serial (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getDeviceSwitchRoutingStaticRoutes($serial)
    {
        list($response) = $this->getDeviceSwitchRoutingStaticRoutesWithHttpInfo($serial);
        return $response;
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoutesWithHttpInfo
     *
     * List layer 3 static routes for a switch
     *
     * @param  string $serial (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceSwitchRoutingStaticRoutesWithHttpInfo($serial)
    {
        $returnType = 'object';
        $request = $this->getDeviceSwitchRoutingStaticRoutesRequest($serial);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoutesAsync
     *
     * List layer 3 static routes for a switch
     *
     * @param  string $serial (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingStaticRoutesAsync($serial)
    {
        return $this->getDeviceSwitchRoutingStaticRoutesAsyncWithHttpInfo($serial)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoutesAsyncWithHttpInfo
     *
     * List layer 3 static routes for a switch
     *
     * @param  string $serial (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingStaticRoutesAsyncWithHttpInfo($serial)
    {
        $returnType = 'object';
        $request = $this->getDeviceSwitchRoutingStaticRoutesRequest($serial);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceSwitchRoutingStaticRoutes'
     *
     * @param  string $serial (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeviceSwitchRoutingStaticRoutesRequest($serial)
    {
        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceSwitchRoutingStaticRoutes'
            );
        }

        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkApplianceStaticRoute
     *
     * Return a static route for an MX or teleworker network
     *
     * @param  string $network_id network_id (required)
     * @param  string $static_route_id static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getNetworkApplianceStaticRoute($network_id, $static_route_id)
    {
        list($response) = $this->getNetworkApplianceStaticRouteWithHttpInfo($network_id, $static_route_id);
        return $response;
    }

    /**
     * Operation getNetworkApplianceStaticRouteWithHttpInfo
     *
     * Return a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkApplianceStaticRouteWithHttpInfo($network_id, $static_route_id)
    {
        $returnType = 'object';
        $request = $this->getNetworkApplianceStaticRouteRequest($network_id, $static_route_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkApplianceStaticRouteAsync
     *
     * Return a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkApplianceStaticRouteAsync($network_id, $static_route_id)
    {
        return $this->getNetworkApplianceStaticRouteAsyncWithHttpInfo($network_id, $static_route_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkApplianceStaticRouteAsyncWithHttpInfo
     *
     * Return a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkApplianceStaticRouteAsyncWithHttpInfo($network_id, $static_route_id)
    {
        $returnType = 'object';
        $request = $this->getNetworkApplianceStaticRouteRequest($network_id, $static_route_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkApplianceStaticRoute'
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkApplianceStaticRouteRequest($network_id, $static_route_id)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkApplianceStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling getNetworkApplianceStaticRoute'
            );
        }

        $resourcePath = '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkApplianceStaticRoutes
     *
     * List the static routes for an MX or teleworker network
     *
     * @param  string $network_id network_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getNetworkApplianceStaticRoutes($network_id)
    {
        list($response) = $this->getNetworkApplianceStaticRoutesWithHttpInfo($network_id);
        return $response;
    }

    /**
     * Operation getNetworkApplianceStaticRoutesWithHttpInfo
     *
     * List the static routes for an MX or teleworker network
     *
     * @param  string $network_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkApplianceStaticRoutesWithHttpInfo($network_id)
    {
        $returnType = 'object';
        $request = $this->getNetworkApplianceStaticRoutesRequest($network_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkApplianceStaticRoutesAsync
     *
     * List the static routes for an MX or teleworker network
     *
     * @param  string $network_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkApplianceStaticRoutesAsync($network_id)
    {
        return $this->getNetworkApplianceStaticRoutesAsyncWithHttpInfo($network_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkApplianceStaticRoutesAsyncWithHttpInfo
     *
     * List the static routes for an MX or teleworker network
     *
     * @param  string $network_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkApplianceStaticRoutesAsyncWithHttpInfo($network_id)
    {
        $returnType = 'object';
        $request = $this->getNetworkApplianceStaticRoutesRequest($network_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkApplianceStaticRoutes'
     *
     * @param  string $network_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkApplianceStaticRoutesRequest($network_id)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkApplianceStaticRoutes'
            );
        }

        $resourcePath = '/networks/{networkId}/appliance/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id network_id (required)
     * @param  string $switch_stack_id switch_stack_id (required)
     * @param  string $static_route_id static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id)
    {
        list($response) = $this->getNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id)
    {
        $returnType = 'object';
        $request = $this->getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id)
    {
        return $this->getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id)
    {
        $returnType = 'object';
        $request = $this->getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }
        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }

        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id network_id (required)
     * @param  string $switch_stack_id switch_stack_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getNetworkSwitchStackRoutingStaticRoutes($network_id, $switch_stack_id)
    {
        list($response) = $this->getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo($network_id, $switch_stack_id);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo($network_id, $switch_stack_id)
    {
        $returnType = 'object';
        $request = $this->getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesAsync
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRoutesAsync($network_id, $switch_stack_id)
    {
        return $this->getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo($network_id, $switch_stack_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo($network_id, $switch_stack_id)
    {
        $returnType = 'object';
        $request = $this->getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingStaticRoutes'
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingStaticRoutes'
            );
        }
        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingStaticRoutes'
            );
        }

        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeviceSwitchRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch
     *
     * @param  string $serial serial (required)
     * @param  string $static_route_id static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateDeviceSwitchRoutingStaticRoute $update_device_switch_routing_static_route update_device_switch_routing_static_route (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateDeviceSwitchRoutingStaticRoute($serial, $static_route_id, $update_device_switch_routing_static_route = null)
    {
        list($response) = $this->updateDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id, $update_device_switch_routing_static_route);
        return $response;
    }

    /**
     * Operation updateDeviceSwitchRoutingStaticRouteWithHttpInfo
     *
     * Update a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateDeviceSwitchRoutingStaticRoute $update_device_switch_routing_static_route (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id, $update_device_switch_routing_static_route = null)
    {
        $returnType = 'object';
        $request = $this->updateDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $update_device_switch_routing_static_route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeviceSwitchRoutingStaticRouteAsync
     *
     * Update a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateDeviceSwitchRoutingStaticRoute $update_device_switch_routing_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceSwitchRoutingStaticRouteAsync($serial, $static_route_id, $update_device_switch_routing_static_route = null)
    {
        return $this->updateDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id, $update_device_switch_routing_static_route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo
     *
     * Update a layer 3 static route for a switch
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateDeviceSwitchRoutingStaticRoute $update_device_switch_routing_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id, $update_device_switch_routing_static_route = null)
    {
        $returnType = 'object';
        $request = $this->updateDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $update_device_switch_routing_static_route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeviceSwitchRoutingStaticRoute'
     *
     * @param  string $serial (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateDeviceSwitchRoutingStaticRoute $update_device_switch_routing_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $update_device_switch_routing_static_route = null)
    {
        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling updateDeviceSwitchRoutingStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling updateDeviceSwitchRoutingStaticRoute'
            );
        }

        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_device_switch_routing_static_route)) {
            $_tempBody = $update_device_switch_routing_static_route;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkApplianceStaticRoute
     *
     * Update a static route for an MX or teleworker network
     *
     * @param  string $network_id network_id (required)
     * @param  string $static_route_id static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkApplianceStaticRoute $update_network_appliance_static_route update_network_appliance_static_route (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateNetworkApplianceStaticRoute($network_id, $static_route_id, $update_network_appliance_static_route = null)
    {
        list($response) = $this->updateNetworkApplianceStaticRouteWithHttpInfo($network_id, $static_route_id, $update_network_appliance_static_route);
        return $response;
    }

    /**
     * Operation updateNetworkApplianceStaticRouteWithHttpInfo
     *
     * Update a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkApplianceStaticRoute $update_network_appliance_static_route (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkApplianceStaticRouteWithHttpInfo($network_id, $static_route_id, $update_network_appliance_static_route = null)
    {
        $returnType = 'object';
        $request = $this->updateNetworkApplianceStaticRouteRequest($network_id, $static_route_id, $update_network_appliance_static_route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkApplianceStaticRouteAsync
     *
     * Update a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkApplianceStaticRoute $update_network_appliance_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkApplianceStaticRouteAsync($network_id, $static_route_id, $update_network_appliance_static_route = null)
    {
        return $this->updateNetworkApplianceStaticRouteAsyncWithHttpInfo($network_id, $static_route_id, $update_network_appliance_static_route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkApplianceStaticRouteAsyncWithHttpInfo
     *
     * Update a static route for an MX or teleworker network
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkApplianceStaticRoute $update_network_appliance_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkApplianceStaticRouteAsyncWithHttpInfo($network_id, $static_route_id, $update_network_appliance_static_route = null)
    {
        $returnType = 'object';
        $request = $this->updateNetworkApplianceStaticRouteRequest($network_id, $static_route_id, $update_network_appliance_static_route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkApplianceStaticRoute'
     *
     * @param  string $network_id (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkApplianceStaticRoute $update_network_appliance_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNetworkApplianceStaticRouteRequest($network_id, $static_route_id, $update_network_appliance_static_route = null)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkApplianceStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling updateNetworkApplianceStaticRoute'
            );
        }

        $resourcePath = '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_network_appliance_static_route)) {
            $_tempBody = $update_network_appliance_static_route;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id network_id (required)
     * @param  string $switch_stack_id switch_stack_id (required)
     * @param  string $static_route_id static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkSwitchStackRoutingStaticRoute $update_network_switch_stack_routing_static_route update_network_switch_stack_routing_static_route (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route = null)
    {
        list($response) = $this->updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkSwitchStackRoutingStaticRoute $update_network_switch_stack_routing_static_route (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route = null)
    {
        $returnType = 'object';
        $request = $this->updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkSwitchStackRoutingStaticRoute $update_network_switch_stack_routing_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route = null)
    {
        return $this->updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkSwitchStackRoutingStaticRoute $update_network_switch_stack_routing_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route = null)
    {
        $returnType = 'object';
        $request = $this->updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id (required)
     * @param  string $switch_stack_id (required)
     * @param  string $static_route_id (required)
     * @param  \Swagger\Client\Model\UpdateNetworkSwitchStackRoutingStaticRoute $update_network_switch_stack_routing_static_route (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_network_switch_stack_routing_static_route = null)
    {
        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }
        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }
        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }

        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_network_switch_stack_routing_static_route)) {
            $_tempBody = $update_network_switch_stack_routing_static_route;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
