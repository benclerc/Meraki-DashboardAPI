<?php
/**
 * NetworksnetworkIdwirelessrfProfilesrfProfileIdApBandSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdwirelessrfProfilesrfProfileIdApBandSettings Class Doc Comment
 *
 * @category Class
 * @description Settings that will be enabled if selectionType is set to &#39;ap&#39;.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdwirelessrfProfilesrfProfileIdApBandSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdwirelessrfProfilesrfProfileId_apBandSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'band_operation_mode' => 'string',
        'band_steering_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'band_operation_mode' => null,
        'band_steering_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'band_operation_mode' => 'bandOperationMode',
        'band_steering_enabled' => 'bandSteeringEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'band_operation_mode' => 'setBandOperationMode',
        'band_steering_enabled' => 'setBandSteeringEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'band_operation_mode' => 'getBandOperationMode',
        'band_steering_enabled' => 'getBandSteeringEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BAND_OPERATION_MODE_DUAL = 'dual';
    const BAND_OPERATION_MODE__24GHZ = '2.4ghz';
    const BAND_OPERATION_MODE__5GHZ = '5ghz';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBandOperationModeAllowableValues()
    {
        return [
            self::BAND_OPERATION_MODE_DUAL,
            self::BAND_OPERATION_MODE__24GHZ,
            self::BAND_OPERATION_MODE__5GHZ,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['band_operation_mode'] = isset($data['band_operation_mode']) ? $data['band_operation_mode'] : null;
        $this->container['band_steering_enabled'] = isset($data['band_steering_enabled']) ? $data['band_steering_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBandOperationModeAllowableValues();
        if (!is_null($this->container['band_operation_mode']) && !in_array($this->container['band_operation_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'band_operation_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets band_operation_mode
     *
     * @return string
     */
    public function getBandOperationMode()
    {
        return $this->container['band_operation_mode'];
    }

    /**
     * Sets band_operation_mode
     *
     * @param string $band_operation_mode Choice between 'dual', '2.4ghz' or '5ghz'.
     *
     * @return $this
     */
    public function setBandOperationMode($band_operation_mode)
    {
        $allowedValues = $this->getBandOperationModeAllowableValues();
        if (!is_null($band_operation_mode) && !in_array($band_operation_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'band_operation_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['band_operation_mode'] = $band_operation_mode;

        return $this;
    }

    /**
     * Gets band_steering_enabled
     *
     * @return bool
     */
    public function getBandSteeringEnabled()
    {
        return $this->container['band_steering_enabled'];
    }

    /**
     * Sets band_steering_enabled
     *
     * @param bool $band_steering_enabled Steers client to most open band. Can be either true or false.
     *
     * @return $this
     */
    public function setBandSteeringEnabled($band_steering_enabled)
    {
        $this->container['band_steering_enabled'] = $band_steering_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


