<?php
/**
 * UpdateNetworkApplianceWarmSpare
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateNetworkApplianceWarmSpare Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateNetworkApplianceWarmSpare implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateNetworkApplianceWarmSpare';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'spare_serial' => 'string',
        'uplink_mode' => 'string',
        'virtual_ip1' => 'string',
        'virtual_ip2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'spare_serial' => null,
        'uplink_mode' => null,
        'virtual_ip1' => null,
        'virtual_ip2' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'spare_serial' => 'spareSerial',
        'uplink_mode' => 'uplinkMode',
        'virtual_ip1' => 'virtualIp1',
        'virtual_ip2' => 'virtualIp2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'spare_serial' => 'setSpareSerial',
        'uplink_mode' => 'setUplinkMode',
        'virtual_ip1' => 'setVirtualIp1',
        'virtual_ip2' => 'setVirtualIp2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'spare_serial' => 'getSpareSerial',
        'uplink_mode' => 'getUplinkMode',
        'virtual_ip1' => 'getVirtualIp1',
        'virtual_ip2' => 'getVirtualIp2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['spare_serial'] = isset($data['spare_serial']) ? $data['spare_serial'] : null;
        $this->container['uplink_mode'] = isset($data['uplink_mode']) ? $data['uplink_mode'] : null;
        $this->container['virtual_ip1'] = isset($data['virtual_ip1']) ? $data['virtual_ip1'] : null;
        $this->container['virtual_ip2'] = isset($data['virtual_ip2']) ? $data['virtual_ip2'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Enable warm spare
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets spare_serial
     *
     * @return string
     */
    public function getSpareSerial()
    {
        return $this->container['spare_serial'];
    }

    /**
     * Sets spare_serial
     *
     * @param string $spare_serial Serial number of the warm spare appliance
     *
     * @return $this
     */
    public function setSpareSerial($spare_serial)
    {
        $this->container['spare_serial'] = $spare_serial;

        return $this;
    }

    /**
     * Gets uplink_mode
     *
     * @return string
     */
    public function getUplinkMode()
    {
        return $this->container['uplink_mode'];
    }

    /**
     * Sets uplink_mode
     *
     * @param string $uplink_mode Uplink mode, either virtual or public
     *
     * @return $this
     */
    public function setUplinkMode($uplink_mode)
    {
        $this->container['uplink_mode'] = $uplink_mode;

        return $this;
    }

    /**
     * Gets virtual_ip1
     *
     * @return string
     */
    public function getVirtualIp1()
    {
        return $this->container['virtual_ip1'];
    }

    /**
     * Sets virtual_ip1
     *
     * @param string $virtual_ip1 The WAN 1 shared IP
     *
     * @return $this
     */
    public function setVirtualIp1($virtual_ip1)
    {
        $this->container['virtual_ip1'] = $virtual_ip1;

        return $this;
    }

    /**
     * Gets virtual_ip2
     *
     * @return string
     */
    public function getVirtualIp2()
    {
        return $this->container['virtual_ip2'];
    }

    /**
     * Sets virtual_ip2
     *
     * @param string $virtual_ip2 The WAN 2 shared IP
     *
     * @return $this
     */
    public function setVirtualIp2($virtual_ip2)
    {
        $this->container['virtual_ip2'] = $virtual_ip2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


