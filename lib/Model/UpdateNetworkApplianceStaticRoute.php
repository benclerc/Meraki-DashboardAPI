<?php
/**
 * UpdateNetworkApplianceStaticRoute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateNetworkApplianceStaticRoute Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateNetworkApplianceStaticRoute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateNetworkApplianceStaticRoute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'subnet' => 'string',
        'gateway_ip' => 'string',
        'enabled' => 'bool',
        'fixed_ip_assignments' => 'object',
        'reserved_ip_ranges' => '\Swagger\Client\Model\NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'subnet' => null,
        'gateway_ip' => null,
        'enabled' => null,
        'fixed_ip_assignments' => null,
        'reserved_ip_ranges' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'subnet' => 'subnet',
        'gateway_ip' => 'gatewayIp',
        'enabled' => 'enabled',
        'fixed_ip_assignments' => 'fixedIpAssignments',
        'reserved_ip_ranges' => 'reservedIpRanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'subnet' => 'setSubnet',
        'gateway_ip' => 'setGatewayIp',
        'enabled' => 'setEnabled',
        'fixed_ip_assignments' => 'setFixedIpAssignments',
        'reserved_ip_ranges' => 'setReservedIpRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'subnet' => 'getSubnet',
        'gateway_ip' => 'getGatewayIp',
        'enabled' => 'getEnabled',
        'fixed_ip_assignments' => 'getFixedIpAssignments',
        'reserved_ip_ranges' => 'getReservedIpRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['subnet'] = isset($data['subnet']) ? $data['subnet'] : null;
        $this->container['gateway_ip'] = isset($data['gateway_ip']) ? $data['gateway_ip'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['fixed_ip_assignments'] = isset($data['fixed_ip_assignments']) ? $data['fixed_ip_assignments'] : null;
        $this->container['reserved_ip_ranges'] = isset($data['reserved_ip_ranges']) ? $data['reserved_ip_ranges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the static route
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string $subnet The subnet of the static route
     *
     * @return $this
     */
    public function setSubnet($subnet)
    {
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets gateway_ip
     *
     * @return string
     */
    public function getGatewayIp()
    {
        return $this->container['gateway_ip'];
    }

    /**
     * Sets gateway_ip
     *
     * @param string $gateway_ip The gateway IP (next hop) of the static route
     *
     * @return $this
     */
    public function setGatewayIp($gateway_ip)
    {
        $this->container['gateway_ip'] = $gateway_ip;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled The enabled state of the static route
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets fixed_ip_assignments
     *
     * @return object
     */
    public function getFixedIpAssignments()
    {
        return $this->container['fixed_ip_assignments'];
    }

    /**
     * Sets fixed_ip_assignments
     *
     * @param object $fixed_ip_assignments The DHCP fixed IP assignments on the static route. This should be an object that contains mappings from MAC addresses to objects that themselves each contain \"ip\" and \"name\" string fields. See the sample request/response for more details.
     *
     * @return $this
     */
    public function setFixedIpAssignments($fixed_ip_assignments)
    {
        $this->container['fixed_ip_assignments'] = $fixed_ip_assignments;

        return $this;
    }

    /**
     * Gets reserved_ip_ranges
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges[]
     */
    public function getReservedIpRanges()
    {
        return $this->container['reserved_ip_ranges'];
    }

    /**
     * Sets reserved_ip_ranges
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges[] $reserved_ip_ranges The DHCP reserved IP ranges on the static route
     *
     * @return $this
     */
    public function setReservedIpRanges($reserved_ip_ranges)
    {
        $this->container['reserved_ip_ranges'] = $reserved_ip_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


