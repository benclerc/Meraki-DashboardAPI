<?php
/**
 * OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'organizationsorganizationIdappliancevpnthirdPartyVPNPeers_peers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'public_ip' => 'string',
        'remote_id' => 'string',
        'private_subnets' => 'string[]',
        'ipsec_policies' => '\Swagger\Client\Model\OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies',
        'ipsec_policies_preset' => 'string',
        'secret' => 'string',
        'ike_version' => 'string',
        'network_tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'public_ip' => null,
        'remote_id' => null,
        'private_subnets' => null,
        'ipsec_policies' => null,
        'ipsec_policies_preset' => null,
        'secret' => null,
        'ike_version' => null,
        'network_tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'public_ip' => 'publicIp',
        'remote_id' => 'remoteId',
        'private_subnets' => 'privateSubnets',
        'ipsec_policies' => 'ipsecPolicies',
        'ipsec_policies_preset' => 'ipsecPoliciesPreset',
        'secret' => 'secret',
        'ike_version' => 'ikeVersion',
        'network_tags' => 'networkTags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'public_ip' => 'setPublicIp',
        'remote_id' => 'setRemoteId',
        'private_subnets' => 'setPrivateSubnets',
        'ipsec_policies' => 'setIpsecPolicies',
        'ipsec_policies_preset' => 'setIpsecPoliciesPreset',
        'secret' => 'setSecret',
        'ike_version' => 'setIkeVersion',
        'network_tags' => 'setNetworkTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'public_ip' => 'getPublicIp',
        'remote_id' => 'getRemoteId',
        'private_subnets' => 'getPrivateSubnets',
        'ipsec_policies' => 'getIpsecPolicies',
        'ipsec_policies_preset' => 'getIpsecPoliciesPreset',
        'secret' => 'getSecret',
        'ike_version' => 'getIkeVersion',
        'network_tags' => 'getNetworkTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IKE_VERSION__1 = '1';
    const IKE_VERSION__2 = '2';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkeVersionAllowableValues()
    {
        return [
            self::IKE_VERSION__1,
            self::IKE_VERSION__2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['public_ip'] = isset($data['public_ip']) ? $data['public_ip'] : null;
        $this->container['remote_id'] = isset($data['remote_id']) ? $data['remote_id'] : null;
        $this->container['private_subnets'] = isset($data['private_subnets']) ? $data['private_subnets'] : null;
        $this->container['ipsec_policies'] = isset($data['ipsec_policies']) ? $data['ipsec_policies'] : null;
        $this->container['ipsec_policies_preset'] = isset($data['ipsec_policies_preset']) ? $data['ipsec_policies_preset'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
        $this->container['ike_version'] = isset($data['ike_version']) ? $data['ike_version'] : '1';
        $this->container['network_tags'] = isset($data['network_tags']) ? $data['network_tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['public_ip'] === null) {
            $invalidProperties[] = "'public_ip' can't be null";
        }
        if ($this->container['private_subnets'] === null) {
            $invalidProperties[] = "'private_subnets' can't be null";
        }
        if ($this->container['secret'] === null) {
            $invalidProperties[] = "'secret' can't be null";
        }
        $allowedValues = $this->getIkeVersionAllowableValues();
        if (!is_null($this->container['ike_version']) && !in_array($this->container['ike_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ike_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the VPN peer
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets public_ip
     *
     * @return string
     */
    public function getPublicIp()
    {
        return $this->container['public_ip'];
    }

    /**
     * Sets public_ip
     *
     * @param string $public_ip The public IP of the VPN peer
     *
     * @return $this
     */
    public function setPublicIp($public_ip)
    {
        $this->container['public_ip'] = $public_ip;

        return $this;
    }

    /**
     * Gets remote_id
     *
     * @return string
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     *
     * @param string $remote_id [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     *
     * @return $this
     */
    public function setRemoteId($remote_id)
    {
        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets private_subnets
     *
     * @return string[]
     */
    public function getPrivateSubnets()
    {
        return $this->container['private_subnets'];
    }

    /**
     * Sets private_subnets
     *
     * @param string[] $private_subnets The list of the private subnets of the VPN peer
     *
     * @return $this
     */
    public function setPrivateSubnets($private_subnets)
    {
        $this->container['private_subnets'] = $private_subnets;

        return $this;
    }

    /**
     * Gets ipsec_policies
     *
     * @return \Swagger\Client\Model\OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies
     */
    public function getIpsecPolicies()
    {
        return $this->container['ipsec_policies'];
    }

    /**
     * Sets ipsec_policies
     *
     * @param \Swagger\Client\Model\OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies $ipsec_policies ipsec_policies
     *
     * @return $this
     */
    public function setIpsecPolicies($ipsec_policies)
    {
        $this->container['ipsec_policies'] = $ipsec_policies;

        return $this;
    }

    /**
     * Gets ipsec_policies_preset
     *
     * @return string
     */
    public function getIpsecPoliciesPreset()
    {
        return $this->container['ipsec_policies_preset'];
    }

    /**
     * Sets ipsec_policies_preset
     *
     * @param string $ipsec_policies_preset One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
     *
     * @return $this
     */
    public function setIpsecPoliciesPreset($ipsec_policies_preset)
    {
        $this->container['ipsec_policies_preset'] = $ipsec_policies_preset;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string $secret The shared secret with the VPN peer
     *
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets ike_version
     *
     * @return string
     */
    public function getIkeVersion()
    {
        return $this->container['ike_version'];
    }

    /**
     * Sets ike_version
     *
     * @param string $ike_version [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
     *
     * @return $this
     */
    public function setIkeVersion($ike_version)
    {
        $allowedValues = $this->getIkeVersionAllowableValues();
        if (!is_null($ike_version) && !in_array($ike_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ike_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_version'] = $ike_version;

        return $this;
    }

    /**
     * Gets network_tags
     *
     * @return string[]
     */
    public function getNetworkTags()
    {
        return $this->container['network_tags'];
    }

    /**
     * Sets network_tags
     *
     * @param string[] $network_tags A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
     *
     * @return $this
     */
    public function setNetworkTags($network_tags)
    {
        $this->container['network_tags'] = $network_tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


