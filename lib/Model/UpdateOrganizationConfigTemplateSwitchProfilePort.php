<?php
/**
 * UpdateOrganizationConfigTemplateSwitchProfilePort
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateOrganizationConfigTemplateSwitchProfilePort Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateOrganizationConfigTemplateSwitchProfilePort implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateOrganizationConfigTemplateSwitchProfilePort';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'tags' => 'string[]',
        'enabled' => 'bool',
        'type' => 'string',
        'vlan' => 'int',
        'voice_vlan' => 'int',
        'allowed_vlans' => 'string',
        'poe_enabled' => 'bool',
        'isolation_enabled' => 'bool',
        'rstp_enabled' => 'bool',
        'stp_guard' => 'string',
        'link_negotiation' => 'string',
        'port_schedule_id' => 'string',
        'udld' => 'string',
        'access_policy_type' => 'string',
        'access_policy_number' => 'int',
        'mac_allow_list' => 'string[]',
        'sticky_mac_allow_list' => 'string[]',
        'sticky_mac_allow_list_limit' => 'int',
        'storm_control_enabled' => 'bool',
        'flexible_stacking_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'tags' => null,
        'enabled' => null,
        'type' => null,
        'vlan' => null,
        'voice_vlan' => null,
        'allowed_vlans' => null,
        'poe_enabled' => null,
        'isolation_enabled' => null,
        'rstp_enabled' => null,
        'stp_guard' => null,
        'link_negotiation' => null,
        'port_schedule_id' => null,
        'udld' => null,
        'access_policy_type' => null,
        'access_policy_number' => null,
        'mac_allow_list' => null,
        'sticky_mac_allow_list' => null,
        'sticky_mac_allow_list_limit' => null,
        'storm_control_enabled' => null,
        'flexible_stacking_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'tags' => 'tags',
        'enabled' => 'enabled',
        'type' => 'type',
        'vlan' => 'vlan',
        'voice_vlan' => 'voiceVlan',
        'allowed_vlans' => 'allowedVlans',
        'poe_enabled' => 'poeEnabled',
        'isolation_enabled' => 'isolationEnabled',
        'rstp_enabled' => 'rstpEnabled',
        'stp_guard' => 'stpGuard',
        'link_negotiation' => 'linkNegotiation',
        'port_schedule_id' => 'portScheduleId',
        'udld' => 'udld',
        'access_policy_type' => 'accessPolicyType',
        'access_policy_number' => 'accessPolicyNumber',
        'mac_allow_list' => 'macAllowList',
        'sticky_mac_allow_list' => 'stickyMacAllowList',
        'sticky_mac_allow_list_limit' => 'stickyMacAllowListLimit',
        'storm_control_enabled' => 'stormControlEnabled',
        'flexible_stacking_enabled' => 'flexibleStackingEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'tags' => 'setTags',
        'enabled' => 'setEnabled',
        'type' => 'setType',
        'vlan' => 'setVlan',
        'voice_vlan' => 'setVoiceVlan',
        'allowed_vlans' => 'setAllowedVlans',
        'poe_enabled' => 'setPoeEnabled',
        'isolation_enabled' => 'setIsolationEnabled',
        'rstp_enabled' => 'setRstpEnabled',
        'stp_guard' => 'setStpGuard',
        'link_negotiation' => 'setLinkNegotiation',
        'port_schedule_id' => 'setPortScheduleId',
        'udld' => 'setUdld',
        'access_policy_type' => 'setAccessPolicyType',
        'access_policy_number' => 'setAccessPolicyNumber',
        'mac_allow_list' => 'setMacAllowList',
        'sticky_mac_allow_list' => 'setStickyMacAllowList',
        'sticky_mac_allow_list_limit' => 'setStickyMacAllowListLimit',
        'storm_control_enabled' => 'setStormControlEnabled',
        'flexible_stacking_enabled' => 'setFlexibleStackingEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'tags' => 'getTags',
        'enabled' => 'getEnabled',
        'type' => 'getType',
        'vlan' => 'getVlan',
        'voice_vlan' => 'getVoiceVlan',
        'allowed_vlans' => 'getAllowedVlans',
        'poe_enabled' => 'getPoeEnabled',
        'isolation_enabled' => 'getIsolationEnabled',
        'rstp_enabled' => 'getRstpEnabled',
        'stp_guard' => 'getStpGuard',
        'link_negotiation' => 'getLinkNegotiation',
        'port_schedule_id' => 'getPortScheduleId',
        'udld' => 'getUdld',
        'access_policy_type' => 'getAccessPolicyType',
        'access_policy_number' => 'getAccessPolicyNumber',
        'mac_allow_list' => 'getMacAllowList',
        'sticky_mac_allow_list' => 'getStickyMacAllowList',
        'sticky_mac_allow_list_limit' => 'getStickyMacAllowListLimit',
        'storm_control_enabled' => 'getStormControlEnabled',
        'flexible_stacking_enabled' => 'getFlexibleStackingEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_TRUNK = 'trunk';
    const TYPE_ACCESS = 'access';
    const STP_GUARD_DISABLED = 'disabled';
    const STP_GUARD_ROOT_GUARD = 'root guard';
    const STP_GUARD_BPDU_GUARD = 'bpdu guard';
    const STP_GUARD_LOOP_GUARD = 'loop guard';
    const UDLD_ALERT_ONLY = 'Alert only';
    const UDLD_ENFORCE = 'Enforce';
    const ACCESS_POLICY_TYPE_OPEN = 'Open';
    const ACCESS_POLICY_TYPE_CUSTOM_ACCESS_POLICY = 'Custom access policy';
    const ACCESS_POLICY_TYPE_MAC_ALLOW_LIST = 'MAC allow list';
    const ACCESS_POLICY_TYPE_STICKY_MAC_ALLOW_LIST = 'Sticky MAC allow list';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TRUNK,
            self::TYPE_ACCESS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpGuardAllowableValues()
    {
        return [
            self::STP_GUARD_DISABLED,
            self::STP_GUARD_ROOT_GUARD,
            self::STP_GUARD_BPDU_GUARD,
            self::STP_GUARD_LOOP_GUARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUdldAllowableValues()
    {
        return [
            self::UDLD_ALERT_ONLY,
            self::UDLD_ENFORCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessPolicyTypeAllowableValues()
    {
        return [
            self::ACCESS_POLICY_TYPE_OPEN,
            self::ACCESS_POLICY_TYPE_CUSTOM_ACCESS_POLICY,
            self::ACCESS_POLICY_TYPE_MAC_ALLOW_LIST,
            self::ACCESS_POLICY_TYPE_STICKY_MAC_ALLOW_LIST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['vlan'] = isset($data['vlan']) ? $data['vlan'] : null;
        $this->container['voice_vlan'] = isset($data['voice_vlan']) ? $data['voice_vlan'] : null;
        $this->container['allowed_vlans'] = isset($data['allowed_vlans']) ? $data['allowed_vlans'] : null;
        $this->container['poe_enabled'] = isset($data['poe_enabled']) ? $data['poe_enabled'] : null;
        $this->container['isolation_enabled'] = isset($data['isolation_enabled']) ? $data['isolation_enabled'] : null;
        $this->container['rstp_enabled'] = isset($data['rstp_enabled']) ? $data['rstp_enabled'] : null;
        $this->container['stp_guard'] = isset($data['stp_guard']) ? $data['stp_guard'] : null;
        $this->container['link_negotiation'] = isset($data['link_negotiation']) ? $data['link_negotiation'] : null;
        $this->container['port_schedule_id'] = isset($data['port_schedule_id']) ? $data['port_schedule_id'] : null;
        $this->container['udld'] = isset($data['udld']) ? $data['udld'] : null;
        $this->container['access_policy_type'] = isset($data['access_policy_type']) ? $data['access_policy_type'] : null;
        $this->container['access_policy_number'] = isset($data['access_policy_number']) ? $data['access_policy_number'] : null;
        $this->container['mac_allow_list'] = isset($data['mac_allow_list']) ? $data['mac_allow_list'] : null;
        $this->container['sticky_mac_allow_list'] = isset($data['sticky_mac_allow_list']) ? $data['sticky_mac_allow_list'] : null;
        $this->container['sticky_mac_allow_list_limit'] = isset($data['sticky_mac_allow_list_limit']) ? $data['sticky_mac_allow_list_limit'] : null;
        $this->container['storm_control_enabled'] = isset($data['storm_control_enabled']) ? $data['storm_control_enabled'] : null;
        $this->container['flexible_stacking_enabled'] = isset($data['flexible_stacking_enabled']) ? $data['flexible_stacking_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpGuardAllowableValues();
        if (!is_null($this->container['stp_guard']) && !in_array($this->container['stp_guard'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stp_guard', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUdldAllowableValues();
        if (!is_null($this->container['udld']) && !in_array($this->container['udld'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'udld', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessPolicyTypeAllowableValues();
        if (!is_null($this->container['access_policy_type']) && !in_array($this->container['access_policy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'access_policy_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the switch profile port
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags The list of tags of the switch profile port
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled The status of the switch profile port
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the switch profile port ('trunk' or 'access')
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return int
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int $vlan The VLAN of the switch profile port. A null value will clear the value set for trunk ports.
     *
     * @return $this
     */
    public function setVlan($vlan)
    {
        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets voice_vlan
     *
     * @return int
     */
    public function getVoiceVlan()
    {
        return $this->container['voice_vlan'];
    }

    /**
     * Sets voice_vlan
     *
     * @param int $voice_vlan The voice VLAN of the switch profile port. Only applicable to access ports
     *
     * @return $this
     */
    public function setVoiceVlan($voice_vlan)
    {
        $this->container['voice_vlan'] = $voice_vlan;

        return $this;
    }

    /**
     * Gets allowed_vlans
     *
     * @return string
     */
    public function getAllowedVlans()
    {
        return $this->container['allowed_vlans'];
    }

    /**
     * Sets allowed_vlans
     *
     * @param string $allowed_vlans The VLANs allowed on the switch profile port. Only applicable to trunk ports
     *
     * @return $this
     */
    public function setAllowedVlans($allowed_vlans)
    {
        $this->container['allowed_vlans'] = $allowed_vlans;

        return $this;
    }

    /**
     * Gets poe_enabled
     *
     * @return bool
     */
    public function getPoeEnabled()
    {
        return $this->container['poe_enabled'];
    }

    /**
     * Sets poe_enabled
     *
     * @param bool $poe_enabled The PoE status of the switch profile port
     *
     * @return $this
     */
    public function setPoeEnabled($poe_enabled)
    {
        $this->container['poe_enabled'] = $poe_enabled;

        return $this;
    }

    /**
     * Gets isolation_enabled
     *
     * @return bool
     */
    public function getIsolationEnabled()
    {
        return $this->container['isolation_enabled'];
    }

    /**
     * Sets isolation_enabled
     *
     * @param bool $isolation_enabled The isolation status of the switch profile port
     *
     * @return $this
     */
    public function setIsolationEnabled($isolation_enabled)
    {
        $this->container['isolation_enabled'] = $isolation_enabled;

        return $this;
    }

    /**
     * Gets rstp_enabled
     *
     * @return bool
     */
    public function getRstpEnabled()
    {
        return $this->container['rstp_enabled'];
    }

    /**
     * Sets rstp_enabled
     *
     * @param bool $rstp_enabled The rapid spanning tree protocol status
     *
     * @return $this
     */
    public function setRstpEnabled($rstp_enabled)
    {
        $this->container['rstp_enabled'] = $rstp_enabled;

        return $this;
    }

    /**
     * Gets stp_guard
     *
     * @return string
     */
    public function getStpGuard()
    {
        return $this->container['stp_guard'];
    }

    /**
     * Sets stp_guard
     *
     * @param string $stp_guard The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard')
     *
     * @return $this
     */
    public function setStpGuard($stp_guard)
    {
        $allowedValues = $this->getStpGuardAllowableValues();
        if (!is_null($stp_guard) && !in_array($stp_guard, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stp_guard', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stp_guard'] = $stp_guard;

        return $this;
    }

    /**
     * Gets link_negotiation
     *
     * @return string
     */
    public function getLinkNegotiation()
    {
        return $this->container['link_negotiation'];
    }

    /**
     * Sets link_negotiation
     *
     * @param string $link_negotiation The link speed for the switch profile port
     *
     * @return $this
     */
    public function setLinkNegotiation($link_negotiation)
    {
        $this->container['link_negotiation'] = $link_negotiation;

        return $this;
    }

    /**
     * Gets port_schedule_id
     *
     * @return string
     */
    public function getPortScheduleId()
    {
        return $this->container['port_schedule_id'];
    }

    /**
     * Sets port_schedule_id
     *
     * @param string $port_schedule_id The ID of the port schedule. A value of null will clear the port schedule.
     *
     * @return $this
     */
    public function setPortScheduleId($port_schedule_id)
    {
        $this->container['port_schedule_id'] = $port_schedule_id;

        return $this;
    }

    /**
     * Gets udld
     *
     * @return string
     */
    public function getUdld()
    {
        return $this->container['udld'];
    }

    /**
     * Sets udld
     *
     * @param string $udld The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
     *
     * @return $this
     */
    public function setUdld($udld)
    {
        $allowedValues = $this->getUdldAllowableValues();
        if (!is_null($udld) && !in_array($udld, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'udld', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['udld'] = $udld;

        return $this;
    }

    /**
     * Gets access_policy_type
     *
     * @return string
     */
    public function getAccessPolicyType()
    {
        return $this->container['access_policy_type'];
    }

    /**
     * Sets access_policy_type
     *
     * @param string $access_policy_type The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'
     *
     * @return $this
     */
    public function setAccessPolicyType($access_policy_type)
    {
        $allowedValues = $this->getAccessPolicyTypeAllowableValues();
        if (!is_null($access_policy_type) && !in_array($access_policy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'access_policy_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_policy_type'] = $access_policy_type;

        return $this;
    }

    /**
     * Gets access_policy_number
     *
     * @return int
     */
    public function getAccessPolicyNumber()
    {
        return $this->container['access_policy_number'];
    }

    /**
     * Sets access_policy_number
     *
     * @param int $access_policy_number The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'
     *
     * @return $this
     */
    public function setAccessPolicyNumber($access_policy_number)
    {
        $this->container['access_policy_number'] = $access_policy_number;

        return $this;
    }

    /**
     * Gets mac_allow_list
     *
     * @return string[]
     */
    public function getMacAllowList()
    {
        return $this->container['mac_allow_list'];
    }

    /**
     * Sets mac_allow_list
     *
     * @param string[] $mac_allow_list Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'
     *
     * @return $this
     */
    public function setMacAllowList($mac_allow_list)
    {
        $this->container['mac_allow_list'] = $mac_allow_list;

        return $this;
    }

    /**
     * Gets sticky_mac_allow_list
     *
     * @return string[]
     */
    public function getStickyMacAllowList()
    {
        return $this->container['sticky_mac_allow_list'];
    }

    /**
     * Sets sticky_mac_allow_list
     *
     * @param string[] $sticky_mac_allow_list The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'
     *
     * @return $this
     */
    public function setStickyMacAllowList($sticky_mac_allow_list)
    {
        $this->container['sticky_mac_allow_list'] = $sticky_mac_allow_list;

        return $this;
    }

    /**
     * Gets sticky_mac_allow_list_limit
     *
     * @return int
     */
    public function getStickyMacAllowListLimit()
    {
        return $this->container['sticky_mac_allow_list_limit'];
    }

    /**
     * Sets sticky_mac_allow_list_limit
     *
     * @param int $sticky_mac_allow_list_limit The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'
     *
     * @return $this
     */
    public function setStickyMacAllowListLimit($sticky_mac_allow_list_limit)
    {
        $this->container['sticky_mac_allow_list_limit'] = $sticky_mac_allow_list_limit;

        return $this;
    }

    /**
     * Gets storm_control_enabled
     *
     * @return bool
     */
    public function getStormControlEnabled()
    {
        return $this->container['storm_control_enabled'];
    }

    /**
     * Sets storm_control_enabled
     *
     * @param bool $storm_control_enabled The storm control status of the switch profile port
     *
     * @return $this
     */
    public function setStormControlEnabled($storm_control_enabled)
    {
        $this->container['storm_control_enabled'] = $storm_control_enabled;

        return $this;
    }

    /**
     * Gets flexible_stacking_enabled
     *
     * @return bool
     */
    public function getFlexibleStackingEnabled()
    {
        return $this->container['flexible_stacking_enabled'];
    }

    /**
     * Sets flexible_stacking_enabled
     *
     * @param bool $flexible_stacking_enabled For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
     *
     * @return $this
     */
    public function setFlexibleStackingEnabled($flexible_stacking_enabled)
    {
        $this->container['flexible_stacking_enabled'] = $flexible_stacking_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


