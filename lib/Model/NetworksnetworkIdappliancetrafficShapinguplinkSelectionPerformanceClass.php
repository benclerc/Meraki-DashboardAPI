<?php
/**
 * NetworksnetworkIdappliancetrafficShapinguplinkSelectionPerformanceClass
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdappliancetrafficShapinguplinkSelectionPerformanceClass Class Doc Comment
 *
 * @category Class
 * @description Performance class setting for this uplink preference rule
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdappliancetrafficShapinguplinkSelectionPerformanceClass implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdappliancetrafficShapinguplinkSelection_performanceClass';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'builtin_performance_class_name' => 'string',
        'custom_performance_class_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'builtin_performance_class_name' => null,
        'custom_performance_class_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'builtin_performance_class_name' => 'builtinPerformanceClassName',
        'custom_performance_class_id' => 'customPerformanceClassId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'builtin_performance_class_name' => 'setBuiltinPerformanceClassName',
        'custom_performance_class_id' => 'setCustomPerformanceClassId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'builtin_performance_class_name' => 'getBuiltinPerformanceClassName',
        'custom_performance_class_id' => 'getCustomPerformanceClassId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_BUILTIN = 'builtin';
    const TYPE_CUSTOM = 'custom';
    const BUILTIN_PERFORMANCE_CLASS_NAME_VO_IP = 'VoIP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BUILTIN,
            self::TYPE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBuiltinPerformanceClassNameAllowableValues()
    {
        return [
            self::BUILTIN_PERFORMANCE_CLASS_NAME_VO_IP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['builtin_performance_class_name'] = isset($data['builtin_performance_class_name']) ? $data['builtin_performance_class_name'] : null;
        $this->container['custom_performance_class_id'] = isset($data['custom_performance_class_id']) ? $data['custom_performance_class_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBuiltinPerformanceClassNameAllowableValues();
        if (!is_null($this->container['builtin_performance_class_name']) && !in_array($this->container['builtin_performance_class_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'builtin_performance_class_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of this performance class. Must be one of: 'builtin' or 'custom'
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets builtin_performance_class_name
     *
     * @return string
     */
    public function getBuiltinPerformanceClassName()
    {
        return $this->container['builtin_performance_class_name'];
    }

    /**
     * Sets builtin_performance_class_name
     *
     * @param string $builtin_performance_class_name Name of builtin performance class, must be present when performanceClass type is 'builtin', and value must be one of: 'VoIP'
     *
     * @return $this
     */
    public function setBuiltinPerformanceClassName($builtin_performance_class_name)
    {
        $allowedValues = $this->getBuiltinPerformanceClassNameAllowableValues();
        if (!is_null($builtin_performance_class_name) && !in_array($builtin_performance_class_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'builtin_performance_class_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['builtin_performance_class_name'] = $builtin_performance_class_name;

        return $this;
    }

    /**
     * Gets custom_performance_class_id
     *
     * @return string
     */
    public function getCustomPerformanceClassId()
    {
        return $this->container['custom_performance_class_id'];
    }

    /**
     * Sets custom_performance_class_id
     *
     * @param string $custom_performance_class_id ID of created custom performance class, must be present when performanceClass type is 'custom'
     *
     * @return $this
     */
    public function setCustomPerformanceClassId($custom_performance_class_id)
    {
        $this->container['custom_performance_class_id'] = $custom_performance_class_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


