<?php
/**
 * UpdateNetworkApplianceTrafficShapingUplinkSelection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateNetworkApplianceTrafficShapingUplinkSelection Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateNetworkApplianceTrafficShapingUplinkSelection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateNetworkApplianceTrafficShapingUplinkSelection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_active_auto_vpn_enabled' => 'bool',
        'default_uplink' => 'string',
        'load_balancing_enabled' => 'bool',
        'wan_traffic_uplink_preferences' => '\Swagger\Client\Model\NetworksnetworkIdappliancetrafficShapinguplinkSelectionWanTrafficUplinkPreferences[]',
        'vpn_traffic_uplink_preferences' => '\Swagger\Client\Model\NetworksnetworkIdappliancetrafficShapinguplinkSelectionVpnTrafficUplinkPreferences[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_active_auto_vpn_enabled' => null,
        'default_uplink' => null,
        'load_balancing_enabled' => null,
        'wan_traffic_uplink_preferences' => null,
        'vpn_traffic_uplink_preferences' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_active_auto_vpn_enabled' => 'activeActiveAutoVpnEnabled',
        'default_uplink' => 'defaultUplink',
        'load_balancing_enabled' => 'loadBalancingEnabled',
        'wan_traffic_uplink_preferences' => 'wanTrafficUplinkPreferences',
        'vpn_traffic_uplink_preferences' => 'vpnTrafficUplinkPreferences'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_active_auto_vpn_enabled' => 'setActiveActiveAutoVpnEnabled',
        'default_uplink' => 'setDefaultUplink',
        'load_balancing_enabled' => 'setLoadBalancingEnabled',
        'wan_traffic_uplink_preferences' => 'setWanTrafficUplinkPreferences',
        'vpn_traffic_uplink_preferences' => 'setVpnTrafficUplinkPreferences'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_active_auto_vpn_enabled' => 'getActiveActiveAutoVpnEnabled',
        'default_uplink' => 'getDefaultUplink',
        'load_balancing_enabled' => 'getLoadBalancingEnabled',
        'wan_traffic_uplink_preferences' => 'getWanTrafficUplinkPreferences',
        'vpn_traffic_uplink_preferences' => 'getVpnTrafficUplinkPreferences'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEFAULT_UPLINK_WAN1 = 'wan1';
    const DEFAULT_UPLINK_WAN2 = 'wan2';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultUplinkAllowableValues()
    {
        return [
            self::DEFAULT_UPLINK_WAN1,
            self::DEFAULT_UPLINK_WAN2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_active_auto_vpn_enabled'] = isset($data['active_active_auto_vpn_enabled']) ? $data['active_active_auto_vpn_enabled'] : null;
        $this->container['default_uplink'] = isset($data['default_uplink']) ? $data['default_uplink'] : null;
        $this->container['load_balancing_enabled'] = isset($data['load_balancing_enabled']) ? $data['load_balancing_enabled'] : null;
        $this->container['wan_traffic_uplink_preferences'] = isset($data['wan_traffic_uplink_preferences']) ? $data['wan_traffic_uplink_preferences'] : null;
        $this->container['vpn_traffic_uplink_preferences'] = isset($data['vpn_traffic_uplink_preferences']) ? $data['vpn_traffic_uplink_preferences'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultUplinkAllowableValues();
        if (!is_null($this->container['default_uplink']) && !in_array($this->container['default_uplink'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'default_uplink', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_active_auto_vpn_enabled
     *
     * @return bool
     */
    public function getActiveActiveAutoVpnEnabled()
    {
        return $this->container['active_active_auto_vpn_enabled'];
    }

    /**
     * Sets active_active_auto_vpn_enabled
     *
     * @param bool $active_active_auto_vpn_enabled Toggle for enabling or disabling active-active AutoVPN
     *
     * @return $this
     */
    public function setActiveActiveAutoVpnEnabled($active_active_auto_vpn_enabled)
    {
        $this->container['active_active_auto_vpn_enabled'] = $active_active_auto_vpn_enabled;

        return $this;
    }

    /**
     * Gets default_uplink
     *
     * @return string
     */
    public function getDefaultUplink()
    {
        return $this->container['default_uplink'];
    }

    /**
     * Sets default_uplink
     *
     * @param string $default_uplink The default uplink. Must be one of: 'wan1' or 'wan2'
     *
     * @return $this
     */
    public function setDefaultUplink($default_uplink)
    {
        $allowedValues = $this->getDefaultUplinkAllowableValues();
        if (!is_null($default_uplink) && !in_array($default_uplink, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'default_uplink', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_uplink'] = $default_uplink;

        return $this;
    }

    /**
     * Gets load_balancing_enabled
     *
     * @return bool
     */
    public function getLoadBalancingEnabled()
    {
        return $this->container['load_balancing_enabled'];
    }

    /**
     * Sets load_balancing_enabled
     *
     * @param bool $load_balancing_enabled Toggle for enabling or disabling load balancing
     *
     * @return $this
     */
    public function setLoadBalancingEnabled($load_balancing_enabled)
    {
        $this->container['load_balancing_enabled'] = $load_balancing_enabled;

        return $this;
    }

    /**
     * Gets wan_traffic_uplink_preferences
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdappliancetrafficShapinguplinkSelectionWanTrafficUplinkPreferences[]
     */
    public function getWanTrafficUplinkPreferences()
    {
        return $this->container['wan_traffic_uplink_preferences'];
    }

    /**
     * Sets wan_traffic_uplink_preferences
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdappliancetrafficShapinguplinkSelectionWanTrafficUplinkPreferences[] $wan_traffic_uplink_preferences Array of uplink preference rules for WAN traffic
     *
     * @return $this
     */
    public function setWanTrafficUplinkPreferences($wan_traffic_uplink_preferences)
    {
        $this->container['wan_traffic_uplink_preferences'] = $wan_traffic_uplink_preferences;

        return $this;
    }

    /**
     * Gets vpn_traffic_uplink_preferences
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdappliancetrafficShapinguplinkSelectionVpnTrafficUplinkPreferences[]
     */
    public function getVpnTrafficUplinkPreferences()
    {
        return $this->container['vpn_traffic_uplink_preferences'];
    }

    /**
     * Sets vpn_traffic_uplink_preferences
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdappliancetrafficShapinguplinkSelectionVpnTrafficUplinkPreferences[] $vpn_traffic_uplink_preferences Array of uplink preference rules for VPN traffic
     *
     * @return $this
     */
    public function setVpnTrafficUplinkPreferences($vpn_traffic_uplink_preferences)
    {
        $this->container['vpn_traffic_uplink_preferences'] = $vpn_traffic_uplink_preferences;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


