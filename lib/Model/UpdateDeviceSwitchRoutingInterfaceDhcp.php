<?php
/**
 * UpdateDeviceSwitchRoutingInterfaceDhcp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateDeviceSwitchRoutingInterfaceDhcp Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateDeviceSwitchRoutingInterfaceDhcp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateDeviceSwitchRoutingInterfaceDhcp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dhcp_mode' => 'string',
        'dhcp_relay_server_ips' => 'string[]',
        'dhcp_lease_time' => 'string',
        'dns_nameservers_option' => 'string',
        'dns_custom_nameservers' => 'string[]',
        'boot_options_enabled' => 'bool',
        'boot_next_server' => 'string',
        'boot_file_name' => 'string',
        'dhcp_options' => '\Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions[]',
        'reserved_ip_ranges' => '\Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges[]',
        'fixed_ip_assignments' => '\Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dhcp_mode' => null,
        'dhcp_relay_server_ips' => null,
        'dhcp_lease_time' => null,
        'dns_nameservers_option' => null,
        'dns_custom_nameservers' => null,
        'boot_options_enabled' => null,
        'boot_next_server' => null,
        'boot_file_name' => null,
        'dhcp_options' => null,
        'reserved_ip_ranges' => null,
        'fixed_ip_assignments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dhcp_mode' => 'dhcpMode',
        'dhcp_relay_server_ips' => 'dhcpRelayServerIps',
        'dhcp_lease_time' => 'dhcpLeaseTime',
        'dns_nameservers_option' => 'dnsNameserversOption',
        'dns_custom_nameservers' => 'dnsCustomNameservers',
        'boot_options_enabled' => 'bootOptionsEnabled',
        'boot_next_server' => 'bootNextServer',
        'boot_file_name' => 'bootFileName',
        'dhcp_options' => 'dhcpOptions',
        'reserved_ip_ranges' => 'reservedIpRanges',
        'fixed_ip_assignments' => 'fixedIpAssignments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dhcp_mode' => 'setDhcpMode',
        'dhcp_relay_server_ips' => 'setDhcpRelayServerIps',
        'dhcp_lease_time' => 'setDhcpLeaseTime',
        'dns_nameservers_option' => 'setDnsNameserversOption',
        'dns_custom_nameservers' => 'setDnsCustomNameservers',
        'boot_options_enabled' => 'setBootOptionsEnabled',
        'boot_next_server' => 'setBootNextServer',
        'boot_file_name' => 'setBootFileName',
        'dhcp_options' => 'setDhcpOptions',
        'reserved_ip_ranges' => 'setReservedIpRanges',
        'fixed_ip_assignments' => 'setFixedIpAssignments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dhcp_mode' => 'getDhcpMode',
        'dhcp_relay_server_ips' => 'getDhcpRelayServerIps',
        'dhcp_lease_time' => 'getDhcpLeaseTime',
        'dns_nameservers_option' => 'getDnsNameserversOption',
        'dns_custom_nameservers' => 'getDnsCustomNameservers',
        'boot_options_enabled' => 'getBootOptionsEnabled',
        'boot_next_server' => 'getBootNextServer',
        'boot_file_name' => 'getBootFileName',
        'dhcp_options' => 'getDhcpOptions',
        'reserved_ip_ranges' => 'getReservedIpRanges',
        'fixed_ip_assignments' => 'getFixedIpAssignments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DHCP_MODE_DHCP_DISABLED = 'dhcpDisabled';
    const DHCP_MODE_DHCP_RELAY = 'dhcpRelay';
    const DHCP_MODE_DHCP_SERVER = 'dhcpServer';
    const DHCP_LEASE_TIME__30_MINUTES = '30 minutes';
    const DHCP_LEASE_TIME__1_HOUR = '1 hour';
    const DHCP_LEASE_TIME__4_HOURS = '4 hours';
    const DHCP_LEASE_TIME__12_HOURS = '12 hours';
    const DHCP_LEASE_TIME__1_DAY = '1 day';
    const DHCP_LEASE_TIME__1_WEEK = '1 week';
    const DNS_NAMESERVERS_OPTION_GOOGLE_PUBLIC_DNS = 'googlePublicDns';
    const DNS_NAMESERVERS_OPTION_OPEN_DNS = 'openDns';
    const DNS_NAMESERVERS_OPTION_CUSTOM = 'custom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpModeAllowableValues()
    {
        return [
            self::DHCP_MODE_DHCP_DISABLED,
            self::DHCP_MODE_DHCP_RELAY,
            self::DHCP_MODE_DHCP_SERVER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDhcpLeaseTimeAllowableValues()
    {
        return [
            self::DHCP_LEASE_TIME__30_MINUTES,
            self::DHCP_LEASE_TIME__1_HOUR,
            self::DHCP_LEASE_TIME__4_HOURS,
            self::DHCP_LEASE_TIME__12_HOURS,
            self::DHCP_LEASE_TIME__1_DAY,
            self::DHCP_LEASE_TIME__1_WEEK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDnsNameserversOptionAllowableValues()
    {
        return [
            self::DNS_NAMESERVERS_OPTION_GOOGLE_PUBLIC_DNS,
            self::DNS_NAMESERVERS_OPTION_OPEN_DNS,
            self::DNS_NAMESERVERS_OPTION_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dhcp_mode'] = isset($data['dhcp_mode']) ? $data['dhcp_mode'] : null;
        $this->container['dhcp_relay_server_ips'] = isset($data['dhcp_relay_server_ips']) ? $data['dhcp_relay_server_ips'] : null;
        $this->container['dhcp_lease_time'] = isset($data['dhcp_lease_time']) ? $data['dhcp_lease_time'] : null;
        $this->container['dns_nameservers_option'] = isset($data['dns_nameservers_option']) ? $data['dns_nameservers_option'] : null;
        $this->container['dns_custom_nameservers'] = isset($data['dns_custom_nameservers']) ? $data['dns_custom_nameservers'] : null;
        $this->container['boot_options_enabled'] = isset($data['boot_options_enabled']) ? $data['boot_options_enabled'] : null;
        $this->container['boot_next_server'] = isset($data['boot_next_server']) ? $data['boot_next_server'] : null;
        $this->container['boot_file_name'] = isset($data['boot_file_name']) ? $data['boot_file_name'] : null;
        $this->container['dhcp_options'] = isset($data['dhcp_options']) ? $data['dhcp_options'] : null;
        $this->container['reserved_ip_ranges'] = isset($data['reserved_ip_ranges']) ? $data['reserved_ip_ranges'] : null;
        $this->container['fixed_ip_assignments'] = isset($data['fixed_ip_assignments']) ? $data['fixed_ip_assignments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDhcpModeAllowableValues();
        if (!is_null($this->container['dhcp_mode']) && !in_array($this->container['dhcp_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'dhcp_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDhcpLeaseTimeAllowableValues();
        if (!is_null($this->container['dhcp_lease_time']) && !in_array($this->container['dhcp_lease_time'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'dhcp_lease_time', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDnsNameserversOptionAllowableValues();
        if (!is_null($this->container['dns_nameservers_option']) && !in_array($this->container['dns_nameservers_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'dns_nameservers_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dhcp_mode
     *
     * @return string
     */
    public function getDhcpMode()
    {
        return $this->container['dhcp_mode'];
    }

    /**
     * Sets dhcp_mode
     *
     * @param string $dhcp_mode The DHCP mode options for the switch interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
     *
     * @return $this
     */
    public function setDhcpMode($dhcp_mode)
    {
        $allowedValues = $this->getDhcpModeAllowableValues();
        if (!is_null($dhcp_mode) && !in_array($dhcp_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dhcp_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_mode'] = $dhcp_mode;

        return $this;
    }

    /**
     * Gets dhcp_relay_server_ips
     *
     * @return string[]
     */
    public function getDhcpRelayServerIps()
    {
        return $this->container['dhcp_relay_server_ips'];
    }

    /**
     * Sets dhcp_relay_server_ips
     *
     * @param string[] $dhcp_relay_server_ips The DHCP relay server IPs to which DHCP packets would get relayed for the switch interface
     *
     * @return $this
     */
    public function setDhcpRelayServerIps($dhcp_relay_server_ips)
    {
        $this->container['dhcp_relay_server_ips'] = $dhcp_relay_server_ips;

        return $this;
    }

    /**
     * Gets dhcp_lease_time
     *
     * @return string
     */
    public function getDhcpLeaseTime()
    {
        return $this->container['dhcp_lease_time'];
    }

    /**
     * Sets dhcp_lease_time
     *
     * @param string $dhcp_lease_time The DHCP lease time config for the dhcp server running on switch interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
     *
     * @return $this
     */
    public function setDhcpLeaseTime($dhcp_lease_time)
    {
        $allowedValues = $this->getDhcpLeaseTimeAllowableValues();
        if (!is_null($dhcp_lease_time) && !in_array($dhcp_lease_time, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dhcp_lease_time', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dhcp_lease_time'] = $dhcp_lease_time;

        return $this;
    }

    /**
     * Gets dns_nameservers_option
     *
     * @return string
     */
    public function getDnsNameserversOption()
    {
        return $this->container['dns_nameservers_option'];
    }

    /**
     * Sets dns_nameservers_option
     *
     * @param string $dns_nameservers_option The DHCP name server option for the dhcp server running on the switch interface ('googlePublicDns', 'openDns' or 'custom')
     *
     * @return $this
     */
    public function setDnsNameserversOption($dns_nameservers_option)
    {
        $allowedValues = $this->getDnsNameserversOptionAllowableValues();
        if (!is_null($dns_nameservers_option) && !in_array($dns_nameservers_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dns_nameservers_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dns_nameservers_option'] = $dns_nameservers_option;

        return $this;
    }

    /**
     * Gets dns_custom_nameservers
     *
     * @return string[]
     */
    public function getDnsCustomNameservers()
    {
        return $this->container['dns_custom_nameservers'];
    }

    /**
     * Sets dns_custom_nameservers
     *
     * @param string[] $dns_custom_nameservers The DHCP name server IPs when DHCP name server option is 'custom'
     *
     * @return $this
     */
    public function setDnsCustomNameservers($dns_custom_nameservers)
    {
        $this->container['dns_custom_nameservers'] = $dns_custom_nameservers;

        return $this;
    }

    /**
     * Gets boot_options_enabled
     *
     * @return bool
     */
    public function getBootOptionsEnabled()
    {
        return $this->container['boot_options_enabled'];
    }

    /**
     * Sets boot_options_enabled
     *
     * @param bool $boot_options_enabled Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch interface
     *
     * @return $this
     */
    public function setBootOptionsEnabled($boot_options_enabled)
    {
        $this->container['boot_options_enabled'] = $boot_options_enabled;

        return $this;
    }

    /**
     * Gets boot_next_server
     *
     * @return string
     */
    public function getBootNextServer()
    {
        return $this->container['boot_next_server'];
    }

    /**
     * Sets boot_next_server
     *
     * @param string $boot_next_server The PXE boot server IP for the DHCP server running on the switch interface
     *
     * @return $this
     */
    public function setBootNextServer($boot_next_server)
    {
        $this->container['boot_next_server'] = $boot_next_server;

        return $this;
    }

    /**
     * Gets boot_file_name
     *
     * @return string
     */
    public function getBootFileName()
    {
        return $this->container['boot_file_name'];
    }

    /**
     * Sets boot_file_name
     *
     * @param string $boot_file_name The PXE boot server filename for the DHCP server running on the switch interface
     *
     * @return $this
     */
    public function setBootFileName($boot_file_name)
    {
        $this->container['boot_file_name'] = $boot_file_name;

        return $this;
    }

    /**
     * Gets dhcp_options
     *
     * @return \Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions[]
     */
    public function getDhcpOptions()
    {
        return $this->container['dhcp_options'];
    }

    /**
     * Sets dhcp_options
     *
     * @param \Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions[] $dhcp_options Array of DHCP options consisting of code, type and value for the DHCP server running on the switch interface
     *
     * @return $this
     */
    public function setDhcpOptions($dhcp_options)
    {
        $this->container['dhcp_options'] = $dhcp_options;

        return $this;
    }

    /**
     * Gets reserved_ip_ranges
     *
     * @return \Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges[]
     */
    public function getReservedIpRanges()
    {
        return $this->container['reserved_ip_ranges'];
    }

    /**
     * Sets reserved_ip_ranges
     *
     * @param \Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges[] $reserved_ip_ranges Array of DHCP reserved IP assignments for the DHCP server running on the switch interface
     *
     * @return $this
     */
    public function setReservedIpRanges($reserved_ip_ranges)
    {
        $this->container['reserved_ip_ranges'] = $reserved_ip_ranges;

        return $this;
    }

    /**
     * Gets fixed_ip_assignments
     *
     * @return \Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments[]
     */
    public function getFixedIpAssignments()
    {
        return $this->container['fixed_ip_assignments'];
    }

    /**
     * Sets fixed_ip_assignments
     *
     * @param \Swagger\Client\Model\DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments[] $fixed_ip_assignments Array of DHCP fixed IP assignments for the DHCP server running on the switch interface
     *
     * @return $this
     */
    public function setFixedIpAssignments($fixed_ip_assignments)
    {
        $this->container['fixed_ip_assignments'] = $fixed_ip_assignments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


