<?php
/**
 * UpdateOrganizationSnmp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateOrganizationSnmp Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateOrganizationSnmp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateOrganizationSnmp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'v2c_enabled' => 'bool',
        'v3_enabled' => 'bool',
        'v3_auth_mode' => 'string',
        'v3_auth_pass' => 'string',
        'v3_priv_mode' => 'string',
        'v3_priv_pass' => 'string',
        'peer_ips' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'v2c_enabled' => null,
        'v3_enabled' => null,
        'v3_auth_mode' => null,
        'v3_auth_pass' => null,
        'v3_priv_mode' => null,
        'v3_priv_pass' => null,
        'peer_ips' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'v2c_enabled' => 'v2cEnabled',
        'v3_enabled' => 'v3Enabled',
        'v3_auth_mode' => 'v3AuthMode',
        'v3_auth_pass' => 'v3AuthPass',
        'v3_priv_mode' => 'v3PrivMode',
        'v3_priv_pass' => 'v3PrivPass',
        'peer_ips' => 'peerIps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'v2c_enabled' => 'setV2cEnabled',
        'v3_enabled' => 'setV3Enabled',
        'v3_auth_mode' => 'setV3AuthMode',
        'v3_auth_pass' => 'setV3AuthPass',
        'v3_priv_mode' => 'setV3PrivMode',
        'v3_priv_pass' => 'setV3PrivPass',
        'peer_ips' => 'setPeerIps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'v2c_enabled' => 'getV2cEnabled',
        'v3_enabled' => 'getV3Enabled',
        'v3_auth_mode' => 'getV3AuthMode',
        'v3_auth_pass' => 'getV3AuthPass',
        'v3_priv_mode' => 'getV3PrivMode',
        'v3_priv_pass' => 'getV3PrivPass',
        'peer_ips' => 'getPeerIps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const V3_AUTH_MODE_MD5 = 'MD5';
    const V3_AUTH_MODE_SHA = 'SHA';
    const V3_PRIV_MODE_DES = 'DES';
    const V3_PRIV_MODE_AES128 = 'AES128';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getV3AuthModeAllowableValues()
    {
        return [
            self::V3_AUTH_MODE_MD5,
            self::V3_AUTH_MODE_SHA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getV3PrivModeAllowableValues()
    {
        return [
            self::V3_PRIV_MODE_DES,
            self::V3_PRIV_MODE_AES128,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['v2c_enabled'] = isset($data['v2c_enabled']) ? $data['v2c_enabled'] : null;
        $this->container['v3_enabled'] = isset($data['v3_enabled']) ? $data['v3_enabled'] : null;
        $this->container['v3_auth_mode'] = isset($data['v3_auth_mode']) ? $data['v3_auth_mode'] : null;
        $this->container['v3_auth_pass'] = isset($data['v3_auth_pass']) ? $data['v3_auth_pass'] : null;
        $this->container['v3_priv_mode'] = isset($data['v3_priv_mode']) ? $data['v3_priv_mode'] : null;
        $this->container['v3_priv_pass'] = isset($data['v3_priv_pass']) ? $data['v3_priv_pass'] : null;
        $this->container['peer_ips'] = isset($data['peer_ips']) ? $data['peer_ips'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getV3AuthModeAllowableValues();
        if (!is_null($this->container['v3_auth_mode']) && !in_array($this->container['v3_auth_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'v3_auth_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getV3PrivModeAllowableValues();
        if (!is_null($this->container['v3_priv_mode']) && !in_array($this->container['v3_priv_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'v3_priv_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets v2c_enabled
     *
     * @return bool
     */
    public function getV2cEnabled()
    {
        return $this->container['v2c_enabled'];
    }

    /**
     * Sets v2c_enabled
     *
     * @param bool $v2c_enabled Boolean indicating whether SNMP version 2c is enabled for the organization.
     *
     * @return $this
     */
    public function setV2cEnabled($v2c_enabled)
    {
        $this->container['v2c_enabled'] = $v2c_enabled;

        return $this;
    }

    /**
     * Gets v3_enabled
     *
     * @return bool
     */
    public function getV3Enabled()
    {
        return $this->container['v3_enabled'];
    }

    /**
     * Sets v3_enabled
     *
     * @param bool $v3_enabled Boolean indicating whether SNMP version 3 is enabled for the organization.
     *
     * @return $this
     */
    public function setV3Enabled($v3_enabled)
    {
        $this->container['v3_enabled'] = $v3_enabled;

        return $this;
    }

    /**
     * Gets v3_auth_mode
     *
     * @return string
     */
    public function getV3AuthMode()
    {
        return $this->container['v3_auth_mode'];
    }

    /**
     * Sets v3_auth_mode
     *
     * @param string $v3_auth_mode The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
     *
     * @return $this
     */
    public function setV3AuthMode($v3_auth_mode)
    {
        $allowedValues = $this->getV3AuthModeAllowableValues();
        if (!is_null($v3_auth_mode) && !in_array($v3_auth_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'v3_auth_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['v3_auth_mode'] = $v3_auth_mode;

        return $this;
    }

    /**
     * Gets v3_auth_pass
     *
     * @return string
     */
    public function getV3AuthPass()
    {
        return $this->container['v3_auth_pass'];
    }

    /**
     * Sets v3_auth_pass
     *
     * @param string $v3_auth_pass The SNMP version 3 authentication password. Must be at least 8 characters if specified.
     *
     * @return $this
     */
    public function setV3AuthPass($v3_auth_pass)
    {
        $this->container['v3_auth_pass'] = $v3_auth_pass;

        return $this;
    }

    /**
     * Gets v3_priv_mode
     *
     * @return string
     */
    public function getV3PrivMode()
    {
        return $this->container['v3_priv_mode'];
    }

    /**
     * Sets v3_priv_mode
     *
     * @param string $v3_priv_mode The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
     *
     * @return $this
     */
    public function setV3PrivMode($v3_priv_mode)
    {
        $allowedValues = $this->getV3PrivModeAllowableValues();
        if (!is_null($v3_priv_mode) && !in_array($v3_priv_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'v3_priv_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['v3_priv_mode'] = $v3_priv_mode;

        return $this;
    }

    /**
     * Gets v3_priv_pass
     *
     * @return string
     */
    public function getV3PrivPass()
    {
        return $this->container['v3_priv_pass'];
    }

    /**
     * Sets v3_priv_pass
     *
     * @param string $v3_priv_pass The SNMP version 3 privacy password. Must be at least 8 characters if specified.
     *
     * @return $this
     */
    public function setV3PrivPass($v3_priv_pass)
    {
        $this->container['v3_priv_pass'] = $v3_priv_pass;

        return $this;
    }

    /**
     * Gets peer_ips
     *
     * @return string[]
     */
    public function getPeerIps()
    {
        return $this->container['peer_ips'];
    }

    /**
     * Sets peer_ips
     *
     * @param string[] $peer_ips The list of IPv4 addresses that are allowed to access the SNMP server.
     *
     * @return $this
     */
    public function setPeerIps($peer_ips)
    {
        $this->container['peer_ips'] = $peer_ips;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


