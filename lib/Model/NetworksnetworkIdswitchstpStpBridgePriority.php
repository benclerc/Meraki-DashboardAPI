<?php
/**
 * NetworksnetworkIdswitchstpStpBridgePriority
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdswitchstpStpBridgePriority Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdswitchstpStpBridgePriority implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdswitchstp_stpBridgePriority';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'switch_profiles' => 'string[]',
        'switches' => 'string[]',
        'stacks' => 'string[]',
        'stp_priority' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'switch_profiles' => null,
        'switches' => null,
        'stacks' => null,
        'stp_priority' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'switch_profiles' => 'switchProfiles',
        'switches' => 'switches',
        'stacks' => 'stacks',
        'stp_priority' => 'stpPriority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'switch_profiles' => 'setSwitchProfiles',
        'switches' => 'setSwitches',
        'stacks' => 'setStacks',
        'stp_priority' => 'setStpPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'switch_profiles' => 'getSwitchProfiles',
        'switches' => 'getSwitches',
        'stacks' => 'getStacks',
        'stp_priority' => 'getStpPriority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['switch_profiles'] = isset($data['switch_profiles']) ? $data['switch_profiles'] : null;
        $this->container['switches'] = isset($data['switches']) ? $data['switches'] : null;
        $this->container['stacks'] = isset($data['stacks']) ? $data['stacks'] : null;
        $this->container['stp_priority'] = isset($data['stp_priority']) ? $data['stp_priority'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stp_priority'] === null) {
            $invalidProperties[] = "'stp_priority' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets switch_profiles
     *
     * @return string[]
     */
    public function getSwitchProfiles()
    {
        return $this->container['switch_profiles'];
    }

    /**
     * Sets switch_profiles
     *
     * @param string[] $switch_profiles List of switch profile IDs
     *
     * @return $this
     */
    public function setSwitchProfiles($switch_profiles)
    {
        $this->container['switch_profiles'] = $switch_profiles;

        return $this;
    }

    /**
     * Gets switches
     *
     * @return string[]
     */
    public function getSwitches()
    {
        return $this->container['switches'];
    }

    /**
     * Sets switches
     *
     * @param string[] $switches List of switch serial numbers
     *
     * @return $this
     */
    public function setSwitches($switches)
    {
        $this->container['switches'] = $switches;

        return $this;
    }

    /**
     * Gets stacks
     *
     * @return string[]
     */
    public function getStacks()
    {
        return $this->container['stacks'];
    }

    /**
     * Sets stacks
     *
     * @param string[] $stacks List of stack IDs
     *
     * @return $this
     */
    public function setStacks($stacks)
    {
        $this->container['stacks'] = $stacks;

        return $this;
    }

    /**
     * Gets stp_priority
     *
     * @return int
     */
    public function getStpPriority()
    {
        return $this->container['stp_priority'];
    }

    /**
     * Sets stp_priority
     *
     * @param int $stp_priority STP priority for switch, stacks, or switch profiles
     *
     * @return $this
     */
    public function setStpPriority($stp_priority)
    {
        $this->container['stp_priority'] = $stp_priority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


