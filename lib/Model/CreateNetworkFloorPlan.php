<?php
/**
 * CreateNetworkFloorPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateNetworkFloorPlan Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateNetworkFloorPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'createNetworkFloorPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'center' => '\Swagger\Client\Model\NetworksnetworkIdfloorPlansCenter',
        'bottom_left_corner' => '\Swagger\Client\Model\NetworksnetworkIdfloorPlansBottomLeftCorner',
        'bottom_right_corner' => '\Swagger\Client\Model\NetworksnetworkIdfloorPlansBottomRightCorner',
        'top_left_corner' => '\Swagger\Client\Model\NetworksnetworkIdfloorPlansTopLeftCorner',
        'top_right_corner' => '\Swagger\Client\Model\NetworksnetworkIdfloorPlansTopRightCorner',
        'image_contents' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'center' => null,
        'bottom_left_corner' => null,
        'bottom_right_corner' => null,
        'top_left_corner' => null,
        'top_right_corner' => null,
        'image_contents' => 'byte'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'center' => 'center',
        'bottom_left_corner' => 'bottomLeftCorner',
        'bottom_right_corner' => 'bottomRightCorner',
        'top_left_corner' => 'topLeftCorner',
        'top_right_corner' => 'topRightCorner',
        'image_contents' => 'imageContents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'center' => 'setCenter',
        'bottom_left_corner' => 'setBottomLeftCorner',
        'bottom_right_corner' => 'setBottomRightCorner',
        'top_left_corner' => 'setTopLeftCorner',
        'top_right_corner' => 'setTopRightCorner',
        'image_contents' => 'setImageContents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'center' => 'getCenter',
        'bottom_left_corner' => 'getBottomLeftCorner',
        'bottom_right_corner' => 'getBottomRightCorner',
        'top_left_corner' => 'getTopLeftCorner',
        'top_right_corner' => 'getTopRightCorner',
        'image_contents' => 'getImageContents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['center'] = isset($data['center']) ? $data['center'] : null;
        $this->container['bottom_left_corner'] = isset($data['bottom_left_corner']) ? $data['bottom_left_corner'] : null;
        $this->container['bottom_right_corner'] = isset($data['bottom_right_corner']) ? $data['bottom_right_corner'] : null;
        $this->container['top_left_corner'] = isset($data['top_left_corner']) ? $data['top_left_corner'] : null;
        $this->container['top_right_corner'] = isset($data['top_right_corner']) ? $data['top_right_corner'] : null;
        $this->container['image_contents'] = isset($data['image_contents']) ? $data['image_contents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['image_contents'] === null) {
            $invalidProperties[] = "'image_contents' can't be null";
        }
        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['image_contents'])) {
            $invalidProperties[] = "invalid value for 'image_contents', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of your floor plan.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets center
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfloorPlansCenter
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfloorPlansCenter $center center
     *
     * @return $this
     */
    public function setCenter($center)
    {
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets bottom_left_corner
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfloorPlansBottomLeftCorner
     */
    public function getBottomLeftCorner()
    {
        return $this->container['bottom_left_corner'];
    }

    /**
     * Sets bottom_left_corner
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfloorPlansBottomLeftCorner $bottom_left_corner bottom_left_corner
     *
     * @return $this
     */
    public function setBottomLeftCorner($bottom_left_corner)
    {
        $this->container['bottom_left_corner'] = $bottom_left_corner;

        return $this;
    }

    /**
     * Gets bottom_right_corner
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfloorPlansBottomRightCorner
     */
    public function getBottomRightCorner()
    {
        return $this->container['bottom_right_corner'];
    }

    /**
     * Sets bottom_right_corner
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfloorPlansBottomRightCorner $bottom_right_corner bottom_right_corner
     *
     * @return $this
     */
    public function setBottomRightCorner($bottom_right_corner)
    {
        $this->container['bottom_right_corner'] = $bottom_right_corner;

        return $this;
    }

    /**
     * Gets top_left_corner
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfloorPlansTopLeftCorner
     */
    public function getTopLeftCorner()
    {
        return $this->container['top_left_corner'];
    }

    /**
     * Sets top_left_corner
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfloorPlansTopLeftCorner $top_left_corner top_left_corner
     *
     * @return $this
     */
    public function setTopLeftCorner($top_left_corner)
    {
        $this->container['top_left_corner'] = $top_left_corner;

        return $this;
    }

    /**
     * Gets top_right_corner
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfloorPlansTopRightCorner
     */
    public function getTopRightCorner()
    {
        return $this->container['top_right_corner'];
    }

    /**
     * Sets top_right_corner
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfloorPlansTopRightCorner $top_right_corner top_right_corner
     *
     * @return $this
     */
    public function setTopRightCorner($top_right_corner)
    {
        $this->container['top_right_corner'] = $top_right_corner;

        return $this;
    }

    /**
     * Gets image_contents
     *
     * @return string
     */
    public function getImageContents()
    {
        return $this->container['image_contents'];
    }

    /**
     * Sets image_contents
     *
     * @param string $image_contents The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
     *
     * @return $this
     */
    public function setImageContents($image_contents)
    {

        if ((!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $image_contents))) {
            throw new \InvalidArgumentException("invalid value for $image_contents when calling CreateNetworkFloorPlan., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['image_contents'] = $image_contents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


