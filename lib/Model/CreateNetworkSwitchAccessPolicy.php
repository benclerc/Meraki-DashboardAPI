<?php
/**
 * CreateNetworkSwitchAccessPolicy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateNetworkSwitchAccessPolicy Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateNetworkSwitchAccessPolicy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'createNetworkSwitchAccessPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'radius_servers' => '\Swagger\Client\Model\NetworksnetworkIdswitchaccessPoliciesRadiusServers[]',
        'radius_testing_enabled' => 'bool',
        'radius_coa_support_enabled' => 'bool',
        'radius_accounting_enabled' => 'bool',
        'radius_accounting_servers' => '\Swagger\Client\Model\NetworksnetworkIdswitchaccessPoliciesRadiusAccountingServers[]',
        'radius_group_attribute' => 'string',
        'host_mode' => 'string',
        'access_policy_type' => 'string',
        'increase_access_speed' => 'bool',
        'guest_vlan_id' => 'int',
        'voice_vlan_clients' => 'bool',
        'url_redirect_walled_garden_enabled' => 'bool',
        'url_redirect_walled_garden_ranges' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'radius_servers' => null,
        'radius_testing_enabled' => null,
        'radius_coa_support_enabled' => null,
        'radius_accounting_enabled' => null,
        'radius_accounting_servers' => null,
        'radius_group_attribute' => null,
        'host_mode' => null,
        'access_policy_type' => null,
        'increase_access_speed' => null,
        'guest_vlan_id' => null,
        'voice_vlan_clients' => null,
        'url_redirect_walled_garden_enabled' => null,
        'url_redirect_walled_garden_ranges' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'radius_servers' => 'radiusServers',
        'radius_testing_enabled' => 'radiusTestingEnabled',
        'radius_coa_support_enabled' => 'radiusCoaSupportEnabled',
        'radius_accounting_enabled' => 'radiusAccountingEnabled',
        'radius_accounting_servers' => 'radiusAccountingServers',
        'radius_group_attribute' => 'radiusGroupAttribute',
        'host_mode' => 'hostMode',
        'access_policy_type' => 'accessPolicyType',
        'increase_access_speed' => 'increaseAccessSpeed',
        'guest_vlan_id' => 'guestVlanId',
        'voice_vlan_clients' => 'voiceVlanClients',
        'url_redirect_walled_garden_enabled' => 'urlRedirectWalledGardenEnabled',
        'url_redirect_walled_garden_ranges' => 'urlRedirectWalledGardenRanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'radius_servers' => 'setRadiusServers',
        'radius_testing_enabled' => 'setRadiusTestingEnabled',
        'radius_coa_support_enabled' => 'setRadiusCoaSupportEnabled',
        'radius_accounting_enabled' => 'setRadiusAccountingEnabled',
        'radius_accounting_servers' => 'setRadiusAccountingServers',
        'radius_group_attribute' => 'setRadiusGroupAttribute',
        'host_mode' => 'setHostMode',
        'access_policy_type' => 'setAccessPolicyType',
        'increase_access_speed' => 'setIncreaseAccessSpeed',
        'guest_vlan_id' => 'setGuestVlanId',
        'voice_vlan_clients' => 'setVoiceVlanClients',
        'url_redirect_walled_garden_enabled' => 'setUrlRedirectWalledGardenEnabled',
        'url_redirect_walled_garden_ranges' => 'setUrlRedirectWalledGardenRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'radius_servers' => 'getRadiusServers',
        'radius_testing_enabled' => 'getRadiusTestingEnabled',
        'radius_coa_support_enabled' => 'getRadiusCoaSupportEnabled',
        'radius_accounting_enabled' => 'getRadiusAccountingEnabled',
        'radius_accounting_servers' => 'getRadiusAccountingServers',
        'radius_group_attribute' => 'getRadiusGroupAttribute',
        'host_mode' => 'getHostMode',
        'access_policy_type' => 'getAccessPolicyType',
        'increase_access_speed' => 'getIncreaseAccessSpeed',
        'guest_vlan_id' => 'getGuestVlanId',
        'voice_vlan_clients' => 'getVoiceVlanClients',
        'url_redirect_walled_garden_enabled' => 'getUrlRedirectWalledGardenEnabled',
        'url_redirect_walled_garden_ranges' => 'getUrlRedirectWalledGardenRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HOST_MODE_SINGLE_HOST = 'Single-Host';
    const HOST_MODE_MULTI_DOMAIN = 'Multi-Domain';
    const HOST_MODE_MULTI_HOST = 'Multi-Host';
    const HOST_MODE_MULTI_AUTH = 'Multi-Auth';
    const ACCESS_POLICY_TYPE__8021X = '802.1x';
    const ACCESS_POLICY_TYPE_MAC_AUTHENTICATION_BYPASS = 'MAC authentication bypass';
    const ACCESS_POLICY_TYPE_HYBRID_AUTHENTICATION = 'Hybrid authentication';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHostModeAllowableValues()
    {
        return [
            self::HOST_MODE_SINGLE_HOST,
            self::HOST_MODE_MULTI_DOMAIN,
            self::HOST_MODE_MULTI_HOST,
            self::HOST_MODE_MULTI_AUTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessPolicyTypeAllowableValues()
    {
        return [
            self::ACCESS_POLICY_TYPE__8021X,
            self::ACCESS_POLICY_TYPE_MAC_AUTHENTICATION_BYPASS,
            self::ACCESS_POLICY_TYPE_HYBRID_AUTHENTICATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['radius_servers'] = isset($data['radius_servers']) ? $data['radius_servers'] : null;
        $this->container['radius_testing_enabled'] = isset($data['radius_testing_enabled']) ? $data['radius_testing_enabled'] : null;
        $this->container['radius_coa_support_enabled'] = isset($data['radius_coa_support_enabled']) ? $data['radius_coa_support_enabled'] : null;
        $this->container['radius_accounting_enabled'] = isset($data['radius_accounting_enabled']) ? $data['radius_accounting_enabled'] : null;
        $this->container['radius_accounting_servers'] = isset($data['radius_accounting_servers']) ? $data['radius_accounting_servers'] : null;
        $this->container['radius_group_attribute'] = isset($data['radius_group_attribute']) ? $data['radius_group_attribute'] : null;
        $this->container['host_mode'] = isset($data['host_mode']) ? $data['host_mode'] : null;
        $this->container['access_policy_type'] = isset($data['access_policy_type']) ? $data['access_policy_type'] : null;
        $this->container['increase_access_speed'] = isset($data['increase_access_speed']) ? $data['increase_access_speed'] : null;
        $this->container['guest_vlan_id'] = isset($data['guest_vlan_id']) ? $data['guest_vlan_id'] : null;
        $this->container['voice_vlan_clients'] = isset($data['voice_vlan_clients']) ? $data['voice_vlan_clients'] : null;
        $this->container['url_redirect_walled_garden_enabled'] = isset($data['url_redirect_walled_garden_enabled']) ? $data['url_redirect_walled_garden_enabled'] : null;
        $this->container['url_redirect_walled_garden_ranges'] = isset($data['url_redirect_walled_garden_ranges']) ? $data['url_redirect_walled_garden_ranges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['radius_servers'] === null) {
            $invalidProperties[] = "'radius_servers' can't be null";
        }
        if ($this->container['radius_testing_enabled'] === null) {
            $invalidProperties[] = "'radius_testing_enabled' can't be null";
        }
        if ($this->container['radius_coa_support_enabled'] === null) {
            $invalidProperties[] = "'radius_coa_support_enabled' can't be null";
        }
        if ($this->container['radius_accounting_enabled'] === null) {
            $invalidProperties[] = "'radius_accounting_enabled' can't be null";
        }
        if ($this->container['host_mode'] === null) {
            $invalidProperties[] = "'host_mode' can't be null";
        }
        $allowedValues = $this->getHostModeAllowableValues();
        if (!is_null($this->container['host_mode']) && !in_array($this->container['host_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'host_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessPolicyTypeAllowableValues();
        if (!is_null($this->container['access_policy_type']) && !in_array($this->container['access_policy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'access_policy_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['url_redirect_walled_garden_enabled'] === null) {
            $invalidProperties[] = "'url_redirect_walled_garden_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the access policy
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets radius_servers
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdswitchaccessPoliciesRadiusServers[]
     */
    public function getRadiusServers()
    {
        return $this->container['radius_servers'];
    }

    /**
     * Sets radius_servers
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdswitchaccessPoliciesRadiusServers[] $radius_servers List of RADIUS servers to require connecting devices to authenticate against before granting network access
     *
     * @return $this
     */
    public function setRadiusServers($radius_servers)
    {
        $this->container['radius_servers'] = $radius_servers;

        return $this;
    }

    /**
     * Gets radius_testing_enabled
     *
     * @return bool
     */
    public function getRadiusTestingEnabled()
    {
        return $this->container['radius_testing_enabled'];
    }

    /**
     * Sets radius_testing_enabled
     *
     * @param bool $radius_testing_enabled If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     *
     * @return $this
     */
    public function setRadiusTestingEnabled($radius_testing_enabled)
    {
        $this->container['radius_testing_enabled'] = $radius_testing_enabled;

        return $this;
    }

    /**
     * Gets radius_coa_support_enabled
     *
     * @return bool
     */
    public function getRadiusCoaSupportEnabled()
    {
        return $this->container['radius_coa_support_enabled'];
    }

    /**
     * Sets radius_coa_support_enabled
     *
     * @param bool $radius_coa_support_enabled Change of authentication for RADIUS re-authentication and disconnection
     *
     * @return $this
     */
    public function setRadiusCoaSupportEnabled($radius_coa_support_enabled)
    {
        $this->container['radius_coa_support_enabled'] = $radius_coa_support_enabled;

        return $this;
    }

    /**
     * Gets radius_accounting_enabled
     *
     * @return bool
     */
    public function getRadiusAccountingEnabled()
    {
        return $this->container['radius_accounting_enabled'];
    }

    /**
     * Sets radius_accounting_enabled
     *
     * @param bool $radius_accounting_enabled Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
     *
     * @return $this
     */
    public function setRadiusAccountingEnabled($radius_accounting_enabled)
    {
        $this->container['radius_accounting_enabled'] = $radius_accounting_enabled;

        return $this;
    }

    /**
     * Gets radius_accounting_servers
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdswitchaccessPoliciesRadiusAccountingServers[]
     */
    public function getRadiusAccountingServers()
    {
        return $this->container['radius_accounting_servers'];
    }

    /**
     * Sets radius_accounting_servers
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdswitchaccessPoliciesRadiusAccountingServers[] $radius_accounting_servers List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
     *
     * @return $this
     */
    public function setRadiusAccountingServers($radius_accounting_servers)
    {
        $this->container['radius_accounting_servers'] = $radius_accounting_servers;

        return $this;
    }

    /**
     * Gets radius_group_attribute
     *
     * @return string
     */
    public function getRadiusGroupAttribute()
    {
        return $this->container['radius_group_attribute'];
    }

    /**
     * Sets radius_group_attribute
     *
     * @param string $radius_group_attribute Acceptable values are `\"\"` for None, or `\"11\"` for Group Policies ACL
     *
     * @return $this
     */
    public function setRadiusGroupAttribute($radius_group_attribute)
    {
        $this->container['radius_group_attribute'] = $radius_group_attribute;

        return $this;
    }

    /**
     * Gets host_mode
     *
     * @return string
     */
    public function getHostMode()
    {
        return $this->container['host_mode'];
    }

    /**
     * Sets host_mode
     *
     * @param string $host_mode Choose the Host Mode for the access policy.
     *
     * @return $this
     */
    public function setHostMode($host_mode)
    {
        $allowedValues = $this->getHostModeAllowableValues();
        if (!in_array($host_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'host_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['host_mode'] = $host_mode;

        return $this;
    }

    /**
     * Gets access_policy_type
     *
     * @return string
     */
    public function getAccessPolicyType()
    {
        return $this->container['access_policy_type'];
    }

    /**
     * Sets access_policy_type
     *
     * @param string $access_policy_type Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
     *
     * @return $this
     */
    public function setAccessPolicyType($access_policy_type)
    {
        $allowedValues = $this->getAccessPolicyTypeAllowableValues();
        if (!is_null($access_policy_type) && !in_array($access_policy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'access_policy_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_policy_type'] = $access_policy_type;

        return $this;
    }

    /**
     * Gets increase_access_speed
     *
     * @return bool
     */
    public function getIncreaseAccessSpeed()
    {
        return $this->container['increase_access_speed'];
    }

    /**
     * Sets increase_access_speed
     *
     * @param bool $increase_access_speed Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.
     *
     * @return $this
     */
    public function setIncreaseAccessSpeed($increase_access_speed)
    {
        $this->container['increase_access_speed'] = $increase_access_speed;

        return $this;
    }

    /**
     * Gets guest_vlan_id
     *
     * @return int
     */
    public function getGuestVlanId()
    {
        return $this->container['guest_vlan_id'];
    }

    /**
     * Sets guest_vlan_id
     *
     * @param int $guest_vlan_id ID for the guest VLAN allow unauthorized devices access to limited network resources
     *
     * @return $this
     */
    public function setGuestVlanId($guest_vlan_id)
    {
        $this->container['guest_vlan_id'] = $guest_vlan_id;

        return $this;
    }

    /**
     * Gets voice_vlan_clients
     *
     * @return bool
     */
    public function getVoiceVlanClients()
    {
        return $this->container['voice_vlan_clients'];
    }

    /**
     * Sets voice_vlan_clients
     *
     * @param bool $voice_vlan_clients CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.
     *
     * @return $this
     */
    public function setVoiceVlanClients($voice_vlan_clients)
    {
        $this->container['voice_vlan_clients'] = $voice_vlan_clients;

        return $this;
    }

    /**
     * Gets url_redirect_walled_garden_enabled
     *
     * @return bool
     */
    public function getUrlRedirectWalledGardenEnabled()
    {
        return $this->container['url_redirect_walled_garden_enabled'];
    }

    /**
     * Sets url_redirect_walled_garden_enabled
     *
     * @param bool $url_redirect_walled_garden_enabled Enable to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
     *
     * @return $this
     */
    public function setUrlRedirectWalledGardenEnabled($url_redirect_walled_garden_enabled)
    {
        $this->container['url_redirect_walled_garden_enabled'] = $url_redirect_walled_garden_enabled;

        return $this;
    }

    /**
     * Gets url_redirect_walled_garden_ranges
     *
     * @return string[]
     */
    public function getUrlRedirectWalledGardenRanges()
    {
        return $this->container['url_redirect_walled_garden_ranges'];
    }

    /**
     * Sets url_redirect_walled_garden_ranges
     *
     * @param string[] $url_redirect_walled_garden_ranges IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
     *
     * @return $this
     */
    public function setUrlRedirectWalledGardenRanges($url_redirect_walled_garden_ranges)
    {
        $this->container['url_redirect_walled_garden_ranges'] = $url_redirect_walled_garden_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


