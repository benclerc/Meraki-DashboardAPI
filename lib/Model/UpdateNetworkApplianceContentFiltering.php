<?php
/**
 * UpdateNetworkApplianceContentFiltering
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateNetworkApplianceContentFiltering Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateNetworkApplianceContentFiltering implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateNetworkApplianceContentFiltering';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allowed_url_patterns' => 'string[]',
        'blocked_url_patterns' => 'string[]',
        'blocked_url_categories' => 'string[]',
        'url_category_list_size' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allowed_url_patterns' => null,
        'blocked_url_patterns' => null,
        'blocked_url_categories' => null,
        'url_category_list_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowed_url_patterns' => 'allowedUrlPatterns',
        'blocked_url_patterns' => 'blockedUrlPatterns',
        'blocked_url_categories' => 'blockedUrlCategories',
        'url_category_list_size' => 'urlCategoryListSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowed_url_patterns' => 'setAllowedUrlPatterns',
        'blocked_url_patterns' => 'setBlockedUrlPatterns',
        'blocked_url_categories' => 'setBlockedUrlCategories',
        'url_category_list_size' => 'setUrlCategoryListSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowed_url_patterns' => 'getAllowedUrlPatterns',
        'blocked_url_patterns' => 'getBlockedUrlPatterns',
        'blocked_url_categories' => 'getBlockedUrlCategories',
        'url_category_list_size' => 'getUrlCategoryListSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const URL_CATEGORY_LIST_SIZE_TOP_SITES = 'topSites';
    const URL_CATEGORY_LIST_SIZE_FULL_LIST = 'fullList';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUrlCategoryListSizeAllowableValues()
    {
        return [
            self::URL_CATEGORY_LIST_SIZE_TOP_SITES,
            self::URL_CATEGORY_LIST_SIZE_FULL_LIST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allowed_url_patterns'] = isset($data['allowed_url_patterns']) ? $data['allowed_url_patterns'] : null;
        $this->container['blocked_url_patterns'] = isset($data['blocked_url_patterns']) ? $data['blocked_url_patterns'] : null;
        $this->container['blocked_url_categories'] = isset($data['blocked_url_categories']) ? $data['blocked_url_categories'] : null;
        $this->container['url_category_list_size'] = isset($data['url_category_list_size']) ? $data['url_category_list_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUrlCategoryListSizeAllowableValues();
        if (!is_null($this->container['url_category_list_size']) && !in_array($this->container['url_category_list_size'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'url_category_list_size', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowed_url_patterns
     *
     * @return string[]
     */
    public function getAllowedUrlPatterns()
    {
        return $this->container['allowed_url_patterns'];
    }

    /**
     * Sets allowed_url_patterns
     *
     * @param string[] $allowed_url_patterns A list of URL patterns that are allowed
     *
     * @return $this
     */
    public function setAllowedUrlPatterns($allowed_url_patterns)
    {
        $this->container['allowed_url_patterns'] = $allowed_url_patterns;

        return $this;
    }

    /**
     * Gets blocked_url_patterns
     *
     * @return string[]
     */
    public function getBlockedUrlPatterns()
    {
        return $this->container['blocked_url_patterns'];
    }

    /**
     * Sets blocked_url_patterns
     *
     * @param string[] $blocked_url_patterns A list of URL patterns that are blocked
     *
     * @return $this
     */
    public function setBlockedUrlPatterns($blocked_url_patterns)
    {
        $this->container['blocked_url_patterns'] = $blocked_url_patterns;

        return $this;
    }

    /**
     * Gets blocked_url_categories
     *
     * @return string[]
     */
    public function getBlockedUrlCategories()
    {
        return $this->container['blocked_url_categories'];
    }

    /**
     * Sets blocked_url_categories
     *
     * @param string[] $blocked_url_categories A list of URL categories to block
     *
     * @return $this
     */
    public function setBlockedUrlCategories($blocked_url_categories)
    {
        $this->container['blocked_url_categories'] = $blocked_url_categories;

        return $this;
    }

    /**
     * Gets url_category_list_size
     *
     * @return string
     */
    public function getUrlCategoryListSize()
    {
        return $this->container['url_category_list_size'];
    }

    /**
     * Sets url_category_list_size
     *
     * @param string $url_category_list_size URL category list size which is either 'topSites' or 'fullList'
     *
     * @return $this
     */
    public function setUrlCategoryListSize($url_category_list_size)
    {
        $allowedValues = $this->getUrlCategoryListSizeAllowableValues();
        if (!is_null($url_category_list_size) && !in_array($url_category_list_size, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'url_category_list_size', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['url_category_list_size'] = $url_category_list_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


