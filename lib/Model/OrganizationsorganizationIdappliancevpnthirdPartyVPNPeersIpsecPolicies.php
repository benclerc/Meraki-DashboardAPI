<?php
/**
 * OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies Class Doc Comment
 *
 * @category Class
 * @description Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'organizationsorganizationIdappliancevpnthirdPartyVPNPeers_ipsecPolicies';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ike_cipher_algo' => 'string[]',
        'ike_auth_algo' => 'string[]',
        'ike_prf_algo' => 'string[]',
        'ike_diffie_hellman_group' => 'string[]',
        'ike_lifetime' => 'int',
        'child_cipher_algo' => 'string[]',
        'child_auth_algo' => 'string[]',
        'child_pfs_group' => 'string[]',
        'child_lifetime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ike_cipher_algo' => null,
        'ike_auth_algo' => null,
        'ike_prf_algo' => null,
        'ike_diffie_hellman_group' => null,
        'ike_lifetime' => null,
        'child_cipher_algo' => null,
        'child_auth_algo' => null,
        'child_pfs_group' => null,
        'child_lifetime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ike_cipher_algo' => 'ikeCipherAlgo',
        'ike_auth_algo' => 'ikeAuthAlgo',
        'ike_prf_algo' => 'ikePrfAlgo',
        'ike_diffie_hellman_group' => 'ikeDiffieHellmanGroup',
        'ike_lifetime' => 'ikeLifetime',
        'child_cipher_algo' => 'childCipherAlgo',
        'child_auth_algo' => 'childAuthAlgo',
        'child_pfs_group' => 'childPfsGroup',
        'child_lifetime' => 'childLifetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ike_cipher_algo' => 'setIkeCipherAlgo',
        'ike_auth_algo' => 'setIkeAuthAlgo',
        'ike_prf_algo' => 'setIkePrfAlgo',
        'ike_diffie_hellman_group' => 'setIkeDiffieHellmanGroup',
        'ike_lifetime' => 'setIkeLifetime',
        'child_cipher_algo' => 'setChildCipherAlgo',
        'child_auth_algo' => 'setChildAuthAlgo',
        'child_pfs_group' => 'setChildPfsGroup',
        'child_lifetime' => 'setChildLifetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ike_cipher_algo' => 'getIkeCipherAlgo',
        'ike_auth_algo' => 'getIkeAuthAlgo',
        'ike_prf_algo' => 'getIkePrfAlgo',
        'ike_diffie_hellman_group' => 'getIkeDiffieHellmanGroup',
        'ike_lifetime' => 'getIkeLifetime',
        'child_cipher_algo' => 'getChildCipherAlgo',
        'child_auth_algo' => 'getChildAuthAlgo',
        'child_pfs_group' => 'getChildPfsGroup',
        'child_lifetime' => 'getChildLifetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IKE_PRF_ALGO_PRFSHA256 = 'prfsha256';
    const IKE_PRF_ALGO_PRFSHA1 = 'prfsha1';
    const IKE_PRF_ALGO_PRFMD5 = 'prfmd5';
    const IKE_PRF_ALGO__DEFAULT = 'default';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkePrfAlgoAllowableValues()
    {
        return [
            self::IKE_PRF_ALGO_PRFSHA256,
            self::IKE_PRF_ALGO_PRFSHA1,
            self::IKE_PRF_ALGO_PRFMD5,
            self::IKE_PRF_ALGO__DEFAULT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ike_cipher_algo'] = isset($data['ike_cipher_algo']) ? $data['ike_cipher_algo'] : null;
        $this->container['ike_auth_algo'] = isset($data['ike_auth_algo']) ? $data['ike_auth_algo'] : null;
        $this->container['ike_prf_algo'] = isset($data['ike_prf_algo']) ? $data['ike_prf_algo'] : null;
        $this->container['ike_diffie_hellman_group'] = isset($data['ike_diffie_hellman_group']) ? $data['ike_diffie_hellman_group'] : null;
        $this->container['ike_lifetime'] = isset($data['ike_lifetime']) ? $data['ike_lifetime'] : null;
        $this->container['child_cipher_algo'] = isset($data['child_cipher_algo']) ? $data['child_cipher_algo'] : null;
        $this->container['child_auth_algo'] = isset($data['child_auth_algo']) ? $data['child_auth_algo'] : null;
        $this->container['child_pfs_group'] = isset($data['child_pfs_group']) ? $data['child_pfs_group'] : null;
        $this->container['child_lifetime'] = isset($data['child_lifetime']) ? $data['child_lifetime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ike_cipher_algo
     *
     * @return string[]
     */
    public function getIkeCipherAlgo()
    {
        return $this->container['ike_cipher_algo'];
    }

    /**
     * Sets ike_cipher_algo
     *
     * @param string[] $ike_cipher_algo This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
     *
     * @return $this
     */
    public function setIkeCipherAlgo($ike_cipher_algo)
    {
        $this->container['ike_cipher_algo'] = $ike_cipher_algo;

        return $this;
    }

    /**
     * Gets ike_auth_algo
     *
     * @return string[]
     */
    public function getIkeAuthAlgo()
    {
        return $this->container['ike_auth_algo'];
    }

    /**
     * Sets ike_auth_algo
     *
     * @param string[] $ike_auth_algo This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
     *
     * @return $this
     */
    public function setIkeAuthAlgo($ike_auth_algo)
    {
        $this->container['ike_auth_algo'] = $ike_auth_algo;

        return $this;
    }

    /**
     * Gets ike_prf_algo
     *
     * @return string[]
     */
    public function getIkePrfAlgo()
    {
        return $this->container['ike_prf_algo'];
    }

    /**
     * Sets ike_prf_algo
     *
     * @param string[] $ike_prf_algo [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
     *
     * @return $this
     */
    public function setIkePrfAlgo($ike_prf_algo)
    {
        $allowedValues = $this->getIkePrfAlgoAllowableValues();
        if (!is_null($ike_prf_algo) && array_diff($ike_prf_algo, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ike_prf_algo', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_prf_algo'] = $ike_prf_algo;

        return $this;
    }

    /**
     * Gets ike_diffie_hellman_group
     *
     * @return string[]
     */
    public function getIkeDiffieHellmanGroup()
    {
        return $this->container['ike_diffie_hellman_group'];
    }

    /**
     * Sets ike_diffie_hellman_group
     *
     * @param string[] $ike_diffie_hellman_group This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
     *
     * @return $this
     */
    public function setIkeDiffieHellmanGroup($ike_diffie_hellman_group)
    {
        $this->container['ike_diffie_hellman_group'] = $ike_diffie_hellman_group;

        return $this;
    }

    /**
     * Gets ike_lifetime
     *
     * @return int
     */
    public function getIkeLifetime()
    {
        return $this->container['ike_lifetime'];
    }

    /**
     * Sets ike_lifetime
     *
     * @param int $ike_lifetime The lifetime of the Phase 1 SA in seconds.
     *
     * @return $this
     */
    public function setIkeLifetime($ike_lifetime)
    {
        $this->container['ike_lifetime'] = $ike_lifetime;

        return $this;
    }

    /**
     * Gets child_cipher_algo
     *
     * @return string[]
     */
    public function getChildCipherAlgo()
    {
        return $this->container['child_cipher_algo'];
    }

    /**
     * Sets child_cipher_algo
     *
     * @param string[] $child_cipher_algo This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
     *
     * @return $this
     */
    public function setChildCipherAlgo($child_cipher_algo)
    {
        $this->container['child_cipher_algo'] = $child_cipher_algo;

        return $this;
    }

    /**
     * Gets child_auth_algo
     *
     * @return string[]
     */
    public function getChildAuthAlgo()
    {
        return $this->container['child_auth_algo'];
    }

    /**
     * Sets child_auth_algo
     *
     * @param string[] $child_auth_algo This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
     *
     * @return $this
     */
    public function setChildAuthAlgo($child_auth_algo)
    {
        $this->container['child_auth_algo'] = $child_auth_algo;

        return $this;
    }

    /**
     * Gets child_pfs_group
     *
     * @return string[]
     */
    public function getChildPfsGroup()
    {
        return $this->container['child_pfs_group'];
    }

    /**
     * Sets child_pfs_group
     *
     * @param string[] $child_pfs_group This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
     *
     * @return $this
     */
    public function setChildPfsGroup($child_pfs_group)
    {
        $this->container['child_pfs_group'] = $child_pfs_group;

        return $this;
    }

    /**
     * Gets child_lifetime
     *
     * @return int
     */
    public function getChildLifetime()
    {
        return $this->container['child_lifetime'];
    }

    /**
     * Sets child_lifetime
     *
     * @param int $child_lifetime The lifetime of the Phase 2 SA in seconds.
     *
     * @return $this
     */
    public function setChildLifetime($child_lifetime)
    {
        $this->container['child_lifetime'] = $child_lifetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


