<?php
/**
 * CreateNetworkGroupPolicy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateNetworkGroupPolicy Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateNetworkGroupPolicy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'createNetworkGroupPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'scheduling' => '\Swagger\Client\Model\NetworksnetworkIdgroupPoliciesScheduling',
        'bandwidth' => '\Swagger\Client\Model\NetworksnetworkIdgroupPoliciesBandwidth',
        'firewall_and_traffic_shaping' => '\Swagger\Client\Model\NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping',
        'content_filtering' => '\Swagger\Client\Model\NetworksnetworkIdgroupPoliciesContentFiltering',
        'splash_auth_settings' => 'string',
        'vlan_tagging' => '\Swagger\Client\Model\NetworksnetworkIdgroupPoliciesVlanTagging',
        'bonjour_forwarding' => '\Swagger\Client\Model\NetworksnetworkIdgroupPoliciesBonjourForwarding'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'scheduling' => null,
        'bandwidth' => null,
        'firewall_and_traffic_shaping' => null,
        'content_filtering' => null,
        'splash_auth_settings' => null,
        'vlan_tagging' => null,
        'bonjour_forwarding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'scheduling' => 'scheduling',
        'bandwidth' => 'bandwidth',
        'firewall_and_traffic_shaping' => 'firewallAndTrafficShaping',
        'content_filtering' => 'contentFiltering',
        'splash_auth_settings' => 'splashAuthSettings',
        'vlan_tagging' => 'vlanTagging',
        'bonjour_forwarding' => 'bonjourForwarding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'scheduling' => 'setScheduling',
        'bandwidth' => 'setBandwidth',
        'firewall_and_traffic_shaping' => 'setFirewallAndTrafficShaping',
        'content_filtering' => 'setContentFiltering',
        'splash_auth_settings' => 'setSplashAuthSettings',
        'vlan_tagging' => 'setVlanTagging',
        'bonjour_forwarding' => 'setBonjourForwarding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'scheduling' => 'getScheduling',
        'bandwidth' => 'getBandwidth',
        'firewall_and_traffic_shaping' => 'getFirewallAndTrafficShaping',
        'content_filtering' => 'getContentFiltering',
        'splash_auth_settings' => 'getSplashAuthSettings',
        'vlan_tagging' => 'getVlanTagging',
        'bonjour_forwarding' => 'getBonjourForwarding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SPLASH_AUTH_SETTINGS_NETWORK_DEFAULT = 'network default';
    const SPLASH_AUTH_SETTINGS_BYPASS = 'bypass';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplashAuthSettingsAllowableValues()
    {
        return [
            self::SPLASH_AUTH_SETTINGS_NETWORK_DEFAULT,
            self::SPLASH_AUTH_SETTINGS_BYPASS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['scheduling'] = isset($data['scheduling']) ? $data['scheduling'] : null;
        $this->container['bandwidth'] = isset($data['bandwidth']) ? $data['bandwidth'] : null;
        $this->container['firewall_and_traffic_shaping'] = isset($data['firewall_and_traffic_shaping']) ? $data['firewall_and_traffic_shaping'] : null;
        $this->container['content_filtering'] = isset($data['content_filtering']) ? $data['content_filtering'] : null;
        $this->container['splash_auth_settings'] = isset($data['splash_auth_settings']) ? $data['splash_auth_settings'] : null;
        $this->container['vlan_tagging'] = isset($data['vlan_tagging']) ? $data['vlan_tagging'] : null;
        $this->container['bonjour_forwarding'] = isset($data['bonjour_forwarding']) ? $data['bonjour_forwarding'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getSplashAuthSettingsAllowableValues();
        if (!is_null($this->container['splash_auth_settings']) && !in_array($this->container['splash_auth_settings'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'splash_auth_settings', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name for your group policy. Required.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets scheduling
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesScheduling
     */
    public function getScheduling()
    {
        return $this->container['scheduling'];
    }

    /**
     * Sets scheduling
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesScheduling $scheduling scheduling
     *
     * @return $this
     */
    public function setScheduling($scheduling)
    {
        $this->container['scheduling'] = $scheduling;

        return $this;
    }

    /**
     * Gets bandwidth
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesBandwidth
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesBandwidth $bandwidth bandwidth
     *
     * @return $this
     */
    public function setBandwidth($bandwidth)
    {
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets firewall_and_traffic_shaping
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping
     */
    public function getFirewallAndTrafficShaping()
    {
        return $this->container['firewall_and_traffic_shaping'];
    }

    /**
     * Sets firewall_and_traffic_shaping
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping $firewall_and_traffic_shaping firewall_and_traffic_shaping
     *
     * @return $this
     */
    public function setFirewallAndTrafficShaping($firewall_and_traffic_shaping)
    {
        $this->container['firewall_and_traffic_shaping'] = $firewall_and_traffic_shaping;

        return $this;
    }

    /**
     * Gets content_filtering
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesContentFiltering
     */
    public function getContentFiltering()
    {
        return $this->container['content_filtering'];
    }

    /**
     * Sets content_filtering
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesContentFiltering $content_filtering content_filtering
     *
     * @return $this
     */
    public function setContentFiltering($content_filtering)
    {
        $this->container['content_filtering'] = $content_filtering;

        return $this;
    }

    /**
     * Gets splash_auth_settings
     *
     * @return string
     */
    public function getSplashAuthSettings()
    {
        return $this->container['splash_auth_settings'];
    }

    /**
     * Sets splash_auth_settings
     *
     * @param string $splash_auth_settings Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
     *
     * @return $this
     */
    public function setSplashAuthSettings($splash_auth_settings)
    {
        $allowedValues = $this->getSplashAuthSettingsAllowableValues();
        if (!is_null($splash_auth_settings) && !in_array($splash_auth_settings, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'splash_auth_settings', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['splash_auth_settings'] = $splash_auth_settings;

        return $this;
    }

    /**
     * Gets vlan_tagging
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesVlanTagging
     */
    public function getVlanTagging()
    {
        return $this->container['vlan_tagging'];
    }

    /**
     * Sets vlan_tagging
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesVlanTagging $vlan_tagging vlan_tagging
     *
     * @return $this
     */
    public function setVlanTagging($vlan_tagging)
    {
        $this->container['vlan_tagging'] = $vlan_tagging;

        return $this;
    }

    /**
     * Gets bonjour_forwarding
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesBonjourForwarding
     */
    public function getBonjourForwarding()
    {
        return $this->container['bonjour_forwarding'];
    }

    /**
     * Sets bonjour_forwarding
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdgroupPoliciesBonjourForwarding $bonjour_forwarding bonjour_forwarding
     *
     * @return $this
     */
    public function setBonjourForwarding($bonjour_forwarding)
    {
        $this->container['bonjour_forwarding'] = $bonjour_forwarding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


