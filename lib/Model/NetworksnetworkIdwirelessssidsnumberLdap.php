<?php
/**
 * NetworksnetworkIdwirelessssidsnumberLdap
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdwirelessssidsnumberLdap Class Doc Comment
 *
 * @category Class
 * @description The current setting for LDAP. Only valid if splashPage is &#39;Password-protected with LDAP&#39;.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdwirelessssidsnumberLdap implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdwirelessssidsnumber_ldap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'servers' => '\Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapServers[]',
        'credentials' => '\Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapCredentials',
        'base_distinguished_name' => 'string',
        'server_ca_certificate' => '\Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapServerCaCertificate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'servers' => null,
        'credentials' => null,
        'base_distinguished_name' => null,
        'server_ca_certificate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'servers' => 'servers',
        'credentials' => 'credentials',
        'base_distinguished_name' => 'baseDistinguishedName',
        'server_ca_certificate' => 'serverCaCertificate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'servers' => 'setServers',
        'credentials' => 'setCredentials',
        'base_distinguished_name' => 'setBaseDistinguishedName',
        'server_ca_certificate' => 'setServerCaCertificate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'servers' => 'getServers',
        'credentials' => 'getCredentials',
        'base_distinguished_name' => 'getBaseDistinguishedName',
        'server_ca_certificate' => 'getServerCaCertificate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['servers'] = isset($data['servers']) ? $data['servers'] : null;
        $this->container['credentials'] = isset($data['credentials']) ? $data['credentials'] : null;
        $this->container['base_distinguished_name'] = isset($data['base_distinguished_name']) ? $data['base_distinguished_name'] : null;
        $this->container['server_ca_certificate'] = isset($data['server_ca_certificate']) ? $data['server_ca_certificate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets servers
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapServers[]
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapServers[] $servers The LDAP servers to be used for authentication.
     *
     * @return $this
     */
    public function setServers($servers)
    {
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapCredentials
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapCredentials $credentials credentials
     *
     * @return $this
     */
    public function setCredentials($credentials)
    {
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets base_distinguished_name
     *
     * @return string
     */
    public function getBaseDistinguishedName()
    {
        return $this->container['base_distinguished_name'];
    }

    /**
     * Sets base_distinguished_name
     *
     * @param string $base_distinguished_name The base distinguished name of users on the LDAP server.
     *
     * @return $this
     */
    public function setBaseDistinguishedName($base_distinguished_name)
    {
        $this->container['base_distinguished_name'] = $base_distinguished_name;

        return $this;
    }

    /**
     * Gets server_ca_certificate
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapServerCaCertificate
     */
    public function getServerCaCertificate()
    {
        return $this->container['server_ca_certificate'];
    }

    /**
     * Sets server_ca_certificate
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberLdapServerCaCertificate $server_ca_certificate server_ca_certificate
     *
     * @return $this
     */
    public function setServerCaCertificate($server_ca_certificate)
    {
        $this->container['server_ca_certificate'] = $server_ca_certificate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


