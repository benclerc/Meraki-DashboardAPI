<?php
/**
 * DevicesserialmanagementInterfaceWan1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DevicesserialmanagementInterfaceWan1 Class Doc Comment
 *
 * @category Class
 * @description WAN 1 settings
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DevicesserialmanagementInterfaceWan1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'devicesserialmanagementInterface_wan1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'wan_enabled' => 'string',
        'using_static_ip' => 'bool',
        'static_ip' => 'string',
        'static_gateway_ip' => 'string',
        'static_subnet_mask' => 'string',
        'static_dns' => 'string[]',
        'vlan' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'wan_enabled' => null,
        'using_static_ip' => null,
        'static_ip' => null,
        'static_gateway_ip' => null,
        'static_subnet_mask' => null,
        'static_dns' => null,
        'vlan' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wan_enabled' => 'wanEnabled',
        'using_static_ip' => 'usingStaticIp',
        'static_ip' => 'staticIp',
        'static_gateway_ip' => 'staticGatewayIp',
        'static_subnet_mask' => 'staticSubnetMask',
        'static_dns' => 'staticDns',
        'vlan' => 'vlan'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wan_enabled' => 'setWanEnabled',
        'using_static_ip' => 'setUsingStaticIp',
        'static_ip' => 'setStaticIp',
        'static_gateway_ip' => 'setStaticGatewayIp',
        'static_subnet_mask' => 'setStaticSubnetMask',
        'static_dns' => 'setStaticDns',
        'vlan' => 'setVlan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wan_enabled' => 'getWanEnabled',
        'using_static_ip' => 'getUsingStaticIp',
        'static_ip' => 'getStaticIp',
        'static_gateway_ip' => 'getStaticGatewayIp',
        'static_subnet_mask' => 'getStaticSubnetMask',
        'static_dns' => 'getStaticDns',
        'vlan' => 'getVlan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WAN_ENABLED_ENABLED = 'enabled';
    const WAN_ENABLED_DISABLED = 'disabled';
    const WAN_ENABLED_NOT_CONFIGURED = 'not configured';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWanEnabledAllowableValues()
    {
        return [
            self::WAN_ENABLED_ENABLED,
            self::WAN_ENABLED_DISABLED,
            self::WAN_ENABLED_NOT_CONFIGURED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wan_enabled'] = isset($data['wan_enabled']) ? $data['wan_enabled'] : null;
        $this->container['using_static_ip'] = isset($data['using_static_ip']) ? $data['using_static_ip'] : null;
        $this->container['static_ip'] = isset($data['static_ip']) ? $data['static_ip'] : null;
        $this->container['static_gateway_ip'] = isset($data['static_gateway_ip']) ? $data['static_gateway_ip'] : null;
        $this->container['static_subnet_mask'] = isset($data['static_subnet_mask']) ? $data['static_subnet_mask'] : null;
        $this->container['static_dns'] = isset($data['static_dns']) ? $data['static_dns'] : null;
        $this->container['vlan'] = isset($data['vlan']) ? $data['vlan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWanEnabledAllowableValues();
        if (!is_null($this->container['wan_enabled']) && !in_array($this->container['wan_enabled'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'wan_enabled', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wan_enabled
     *
     * @return string
     */
    public function getWanEnabled()
    {
        return $this->container['wan_enabled'];
    }

    /**
     * Sets wan_enabled
     *
     * @param string $wan_enabled Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
     *
     * @return $this
     */
    public function setWanEnabled($wan_enabled)
    {
        $allowedValues = $this->getWanEnabledAllowableValues();
        if (!is_null($wan_enabled) && !in_array($wan_enabled, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'wan_enabled', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wan_enabled'] = $wan_enabled;

        return $this;
    }

    /**
     * Gets using_static_ip
     *
     * @return bool
     */
    public function getUsingStaticIp()
    {
        return $this->container['using_static_ip'];
    }

    /**
     * Sets using_static_ip
     *
     * @param bool $using_static_ip Configure the interface to have static IP settings or use DHCP.
     *
     * @return $this
     */
    public function setUsingStaticIp($using_static_ip)
    {
        $this->container['using_static_ip'] = $using_static_ip;

        return $this;
    }

    /**
     * Gets static_ip
     *
     * @return string
     */
    public function getStaticIp()
    {
        return $this->container['static_ip'];
    }

    /**
     * Sets static_ip
     *
     * @param string $static_ip The IP the device should use on the WAN.
     *
     * @return $this
     */
    public function setStaticIp($static_ip)
    {
        $this->container['static_ip'] = $static_ip;

        return $this;
    }

    /**
     * Gets static_gateway_ip
     *
     * @return string
     */
    public function getStaticGatewayIp()
    {
        return $this->container['static_gateway_ip'];
    }

    /**
     * Sets static_gateway_ip
     *
     * @param string $static_gateway_ip The IP of the gateway on the WAN.
     *
     * @return $this
     */
    public function setStaticGatewayIp($static_gateway_ip)
    {
        $this->container['static_gateway_ip'] = $static_gateway_ip;

        return $this;
    }

    /**
     * Gets static_subnet_mask
     *
     * @return string
     */
    public function getStaticSubnetMask()
    {
        return $this->container['static_subnet_mask'];
    }

    /**
     * Sets static_subnet_mask
     *
     * @param string $static_subnet_mask The subnet mask for the WAN.
     *
     * @return $this
     */
    public function setStaticSubnetMask($static_subnet_mask)
    {
        $this->container['static_subnet_mask'] = $static_subnet_mask;

        return $this;
    }

    /**
     * Gets static_dns
     *
     * @return string[]
     */
    public function getStaticDns()
    {
        return $this->container['static_dns'];
    }

    /**
     * Sets static_dns
     *
     * @param string[] $static_dns Up to two DNS IPs.
     *
     * @return $this
     */
    public function setStaticDns($static_dns)
    {
        $this->container['static_dns'] = $static_dns;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return int
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int $vlan The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
     *
     * @return $this
     */
    public function setVlan($vlan)
    {
        $this->container['vlan'] = $vlan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


