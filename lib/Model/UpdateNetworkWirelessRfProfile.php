<?php
/**
 * UpdateNetworkWirelessRfProfile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateNetworkWirelessRfProfile Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateNetworkWirelessRfProfile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateNetworkWirelessRfProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'client_balancing_enabled' => 'bool',
        'min_bitrate_type' => 'string',
        'band_selection_type' => 'string',
        'ap_band_settings' => '\Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdApBandSettings',
        'two_four_ghz_settings' => '\Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdTwoFourGhzSettings',
        'five_ghz_settings' => '\Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdFiveGhzSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'client_balancing_enabled' => null,
        'min_bitrate_type' => null,
        'band_selection_type' => null,
        'ap_band_settings' => null,
        'two_four_ghz_settings' => null,
        'five_ghz_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'client_balancing_enabled' => 'clientBalancingEnabled',
        'min_bitrate_type' => 'minBitrateType',
        'band_selection_type' => 'bandSelectionType',
        'ap_band_settings' => 'apBandSettings',
        'two_four_ghz_settings' => 'twoFourGhzSettings',
        'five_ghz_settings' => 'fiveGhzSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'client_balancing_enabled' => 'setClientBalancingEnabled',
        'min_bitrate_type' => 'setMinBitrateType',
        'band_selection_type' => 'setBandSelectionType',
        'ap_band_settings' => 'setApBandSettings',
        'two_four_ghz_settings' => 'setTwoFourGhzSettings',
        'five_ghz_settings' => 'setFiveGhzSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'client_balancing_enabled' => 'getClientBalancingEnabled',
        'min_bitrate_type' => 'getMinBitrateType',
        'band_selection_type' => 'getBandSelectionType',
        'ap_band_settings' => 'getApBandSettings',
        'two_four_ghz_settings' => 'getTwoFourGhzSettings',
        'five_ghz_settings' => 'getFiveGhzSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MIN_BITRATE_TYPE_BAND = 'band';
    const MIN_BITRATE_TYPE_SSID = 'ssid';
    const BAND_SELECTION_TYPE_SSID = 'ssid';
    const BAND_SELECTION_TYPE_AP = 'ap';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMinBitrateTypeAllowableValues()
    {
        return [
            self::MIN_BITRATE_TYPE_BAND,
            self::MIN_BITRATE_TYPE_SSID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBandSelectionTypeAllowableValues()
    {
        return [
            self::BAND_SELECTION_TYPE_SSID,
            self::BAND_SELECTION_TYPE_AP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['client_balancing_enabled'] = isset($data['client_balancing_enabled']) ? $data['client_balancing_enabled'] : null;
        $this->container['min_bitrate_type'] = isset($data['min_bitrate_type']) ? $data['min_bitrate_type'] : null;
        $this->container['band_selection_type'] = isset($data['band_selection_type']) ? $data['band_selection_type'] : null;
        $this->container['ap_band_settings'] = isset($data['ap_band_settings']) ? $data['ap_band_settings'] : null;
        $this->container['two_four_ghz_settings'] = isset($data['two_four_ghz_settings']) ? $data['two_four_ghz_settings'] : null;
        $this->container['five_ghz_settings'] = isset($data['five_ghz_settings']) ? $data['five_ghz_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMinBitrateTypeAllowableValues();
        if (!is_null($this->container['min_bitrate_type']) && !in_array($this->container['min_bitrate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'min_bitrate_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBandSelectionTypeAllowableValues();
        if (!is_null($this->container['band_selection_type']) && !in_array($this->container['band_selection_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'band_selection_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the new profile. Must be unique.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets client_balancing_enabled
     *
     * @return bool
     */
    public function getClientBalancingEnabled()
    {
        return $this->container['client_balancing_enabled'];
    }

    /**
     * Sets client_balancing_enabled
     *
     * @param bool $client_balancing_enabled Steers client to best available access point. Can be either true or false.
     *
     * @return $this
     */
    public function setClientBalancingEnabled($client_balancing_enabled)
    {
        $this->container['client_balancing_enabled'] = $client_balancing_enabled;

        return $this;
    }

    /**
     * Gets min_bitrate_type
     *
     * @return string
     */
    public function getMinBitrateType()
    {
        return $this->container['min_bitrate_type'];
    }

    /**
     * Sets min_bitrate_type
     *
     * @param string $min_bitrate_type Minimum bitrate can be set to either 'band' or 'ssid'.
     *
     * @return $this
     */
    public function setMinBitrateType($min_bitrate_type)
    {
        $allowedValues = $this->getMinBitrateTypeAllowableValues();
        if (!is_null($min_bitrate_type) && !in_array($min_bitrate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'min_bitrate_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['min_bitrate_type'] = $min_bitrate_type;

        return $this;
    }

    /**
     * Gets band_selection_type
     *
     * @return string
     */
    public function getBandSelectionType()
    {
        return $this->container['band_selection_type'];
    }

    /**
     * Sets band_selection_type
     *
     * @param string $band_selection_type Band selection can be set to either 'ssid' or 'ap'.
     *
     * @return $this
     */
    public function setBandSelectionType($band_selection_type)
    {
        $allowedValues = $this->getBandSelectionTypeAllowableValues();
        if (!is_null($band_selection_type) && !in_array($band_selection_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'band_selection_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['band_selection_type'] = $band_selection_type;

        return $this;
    }

    /**
     * Gets ap_band_settings
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdApBandSettings
     */
    public function getApBandSettings()
    {
        return $this->container['ap_band_settings'];
    }

    /**
     * Sets ap_band_settings
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdApBandSettings $ap_band_settings ap_band_settings
     *
     * @return $this
     */
    public function setApBandSettings($ap_band_settings)
    {
        $this->container['ap_band_settings'] = $ap_band_settings;

        return $this;
    }

    /**
     * Gets two_four_ghz_settings
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdTwoFourGhzSettings
     */
    public function getTwoFourGhzSettings()
    {
        return $this->container['two_four_ghz_settings'];
    }

    /**
     * Sets two_four_ghz_settings
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdTwoFourGhzSettings $two_four_ghz_settings two_four_ghz_settings
     *
     * @return $this
     */
    public function setTwoFourGhzSettings($two_four_ghz_settings)
    {
        $this->container['two_four_ghz_settings'] = $two_four_ghz_settings;

        return $this;
    }

    /**
     * Gets five_ghz_settings
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdFiveGhzSettings
     */
    public function getFiveGhzSettings()
    {
        return $this->container['five_ghz_settings'];
    }

    /**
     * Sets five_ghz_settings
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessrfProfilesrfProfileIdFiveGhzSettings $five_ghz_settings five_ghz_settings
     *
     * @return $this
     */
    public function setFiveGhzSettings($five_ghz_settings)
    {
        $this->container['five_ghz_settings'] = $five_ghz_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


