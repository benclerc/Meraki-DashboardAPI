<?php
/**
 * NetworksnetworkIdswitchaccessControlListsRules
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdswitchaccessControlListsRules Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdswitchaccessControlListsRules implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdswitchaccessControlLists_rules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comment' => 'string',
        'policy' => 'string',
        'ip_version' => 'string',
        'protocol' => 'string',
        'src_cidr' => 'string',
        'src_port' => 'string',
        'dst_cidr' => 'string',
        'dst_port' => 'string',
        'vlan' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comment' => null,
        'policy' => null,
        'ip_version' => null,
        'protocol' => null,
        'src_cidr' => null,
        'src_port' => null,
        'dst_cidr' => null,
        'dst_port' => null,
        'vlan' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comment' => 'comment',
        'policy' => 'policy',
        'ip_version' => 'ipVersion',
        'protocol' => 'protocol',
        'src_cidr' => 'srcCidr',
        'src_port' => 'srcPort',
        'dst_cidr' => 'dstCidr',
        'dst_port' => 'dstPort',
        'vlan' => 'vlan'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comment' => 'setComment',
        'policy' => 'setPolicy',
        'ip_version' => 'setIpVersion',
        'protocol' => 'setProtocol',
        'src_cidr' => 'setSrcCidr',
        'src_port' => 'setSrcPort',
        'dst_cidr' => 'setDstCidr',
        'dst_port' => 'setDstPort',
        'vlan' => 'setVlan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comment' => 'getComment',
        'policy' => 'getPolicy',
        'ip_version' => 'getIpVersion',
        'protocol' => 'getProtocol',
        'src_cidr' => 'getSrcCidr',
        'src_port' => 'getSrcPort',
        'dst_cidr' => 'getDstCidr',
        'dst_port' => 'getDstPort',
        'vlan' => 'getVlan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POLICY_ALLOW = 'allow';
    const POLICY_DENY = 'deny';
    const IP_VERSION_ANY = 'any';
    const IP_VERSION_IPV4 = 'ipv4';
    const IP_VERSION_IPV6 = 'ipv6';
    const PROTOCOL_TCP = 'tcp';
    const PROTOCOL_UDP = 'udp';
    const PROTOCOL_ANY = 'any';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolicyAllowableValues()
    {
        return [
            self::POLICY_ALLOW,
            self::POLICY_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIpVersionAllowableValues()
    {
        return [
            self::IP_VERSION_ANY,
            self::IP_VERSION_IPV4,
            self::IP_VERSION_IPV6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_TCP,
            self::PROTOCOL_UDP,
            self::PROTOCOL_ANY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['policy'] = isset($data['policy']) ? $data['policy'] : null;
        $this->container['ip_version'] = isset($data['ip_version']) ? $data['ip_version'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['src_cidr'] = isset($data['src_cidr']) ? $data['src_cidr'] : null;
        $this->container['src_port'] = isset($data['src_port']) ? $data['src_port'] : null;
        $this->container['dst_cidr'] = isset($data['dst_cidr']) ? $data['dst_cidr'] : null;
        $this->container['dst_port'] = isset($data['dst_port']) ? $data['dst_port'] : null;
        $this->container['vlan'] = isset($data['vlan']) ? $data['vlan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['policy'] === null) {
            $invalidProperties[] = "'policy' can't be null";
        }
        $allowedValues = $this->getPolicyAllowableValues();
        if (!is_null($this->container['policy']) && !in_array($this->container['policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'policy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIpVersionAllowableValues();
        if (!is_null($this->container['ip_version']) && !in_array($this->container['ip_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ip_version', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['protocol'] === null) {
            $invalidProperties[] = "'protocol' can't be null";
        }
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'protocol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['src_cidr'] === null) {
            $invalidProperties[] = "'src_cidr' can't be null";
        }
        if ($this->container['dst_cidr'] === null) {
            $invalidProperties[] = "'dst_cidr' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Description of the rule (optional).
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return string
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param string $policy 'allow' or 'deny' traffic specified by this rule.
     *
     * @return $this
     */
    public function setPolicy($policy)
    {
        $allowedValues = $this->getPolicyAllowableValues();
        if (!in_array($policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'policy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets ip_version
     *
     * @return string
     */
    public function getIpVersion()
    {
        return $this->container['ip_version'];
    }

    /**
     * Sets ip_version
     *
     * @param string $ip_version IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'.
     *
     * @return $this
     */
    public function setIpVersion($ip_version)
    {
        $allowedValues = $this->getIpVersionAllowableValues();
        if (!is_null($ip_version) && !in_array($ip_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ip_version', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ip_version'] = $ip_version;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol The type of protocol (must be 'tcp', 'udp', or 'any').
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'protocol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets src_cidr
     *
     * @return string
     */
    public function getSrcCidr()
    {
        return $this->container['src_cidr'];
    }

    /**
     * Sets src_cidr
     *
     * @param string $src_cidr Source IP address (in IP or CIDR notation) or 'any'.
     *
     * @return $this
     */
    public function setSrcCidr($src_cidr)
    {
        $this->container['src_cidr'] = $src_cidr;

        return $this;
    }

    /**
     * Gets src_port
     *
     * @return string
     */
    public function getSrcPort()
    {
        return $this->container['src_port'];
    }

    /**
     * Sets src_port
     *
     * @param string $src_port Source port. Must be in the range  of 1-65535 or 'any'. Default is 'any'.
     *
     * @return $this
     */
    public function setSrcPort($src_port)
    {
        $this->container['src_port'] = $src_port;

        return $this;
    }

    /**
     * Gets dst_cidr
     *
     * @return string
     */
    public function getDstCidr()
    {
        return $this->container['dst_cidr'];
    }

    /**
     * Sets dst_cidr
     *
     * @param string $dst_cidr Destination IP address (in IP or CIDR notation) or 'any'.
     *
     * @return $this
     */
    public function setDstCidr($dst_cidr)
    {
        $this->container['dst_cidr'] = $dst_cidr;

        return $this;
    }

    /**
     * Gets dst_port
     *
     * @return string
     */
    public function getDstPort()
    {
        return $this->container['dst_port'];
    }

    /**
     * Sets dst_port
     *
     * @param string $dst_port Destination port. Must be in the range of 1-65535 or 'any'. Default is 'any'.
     *
     * @return $this
     */
    public function setDstPort($dst_port)
    {
        $this->container['dst_port'] = $dst_port;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return string
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param string $vlan Incoming traffic VLAN. Must be in the range of 1-4095 or 'any'. Default is 'any'.
     *
     * @return $this
     */
    public function setVlan($vlan)
    {
        $this->container['vlan'] = $vlan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


