<?php
/**
 * NetworksnetworkIdfirmwareUpgradesProducts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdfirmwareUpgradesProducts Class Doc Comment
 *
 * @category Class
 * @description Contains information about the network to update
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdfirmwareUpgradesProducts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdfirmwareUpgrades_products';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'wireless' => '\Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless',
        'switch' => '\Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsSwitch',
        'appliance' => '\Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless',
        'camera' => '\Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless',
        'vmx_host' => '\Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless',
        'environmental' => '\Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless',
        'cellular_gateway' => '\Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'wireless' => null,
        'switch' => null,
        'appliance' => null,
        'camera' => null,
        'vmx_host' => null,
        'environmental' => null,
        'cellular_gateway' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wireless' => 'wireless',
        'switch' => 'switch',
        'appliance' => 'appliance',
        'camera' => 'camera',
        'vmx_host' => 'vmxHost',
        'environmental' => 'environmental',
        'cellular_gateway' => 'cellularGateway'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wireless' => 'setWireless',
        'switch' => 'setSwitch',
        'appliance' => 'setAppliance',
        'camera' => 'setCamera',
        'vmx_host' => 'setVmxHost',
        'environmental' => 'setEnvironmental',
        'cellular_gateway' => 'setCellularGateway'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wireless' => 'getWireless',
        'switch' => 'getSwitch',
        'appliance' => 'getAppliance',
        'camera' => 'getCamera',
        'vmx_host' => 'getVmxHost',
        'environmental' => 'getEnvironmental',
        'cellular_gateway' => 'getCellularGateway'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wireless'] = isset($data['wireless']) ? $data['wireless'] : null;
        $this->container['switch'] = isset($data['switch']) ? $data['switch'] : null;
        $this->container['appliance'] = isset($data['appliance']) ? $data['appliance'] : null;
        $this->container['camera'] = isset($data['camera']) ? $data['camera'] : null;
        $this->container['vmx_host'] = isset($data['vmx_host']) ? $data['vmx_host'] : null;
        $this->container['environmental'] = isset($data['environmental']) ? $data['environmental'] : null;
        $this->container['cellular_gateway'] = isset($data['cellular_gateway']) ? $data['cellular_gateway'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wireless
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless
     */
    public function getWireless()
    {
        return $this->container['wireless'];
    }

    /**
     * Sets wireless
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless $wireless wireless
     *
     * @return $this
     */
    public function setWireless($wireless)
    {
        $this->container['wireless'] = $wireless;

        return $this;
    }

    /**
     * Gets switch
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsSwitch
     */
    public function getSwitch()
    {
        return $this->container['switch'];
    }

    /**
     * Sets switch
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsSwitch $switch switch
     *
     * @return $this
     */
    public function setSwitch($switch)
    {
        $this->container['switch'] = $switch;

        return $this;
    }

    /**
     * Gets appliance
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless
     */
    public function getAppliance()
    {
        return $this->container['appliance'];
    }

    /**
     * Sets appliance
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless $appliance appliance
     *
     * @return $this
     */
    public function setAppliance($appliance)
    {
        $this->container['appliance'] = $appliance;

        return $this;
    }

    /**
     * Gets camera
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless
     */
    public function getCamera()
    {
        return $this->container['camera'];
    }

    /**
     * Sets camera
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless $camera camera
     *
     * @return $this
     */
    public function setCamera($camera)
    {
        $this->container['camera'] = $camera;

        return $this;
    }

    /**
     * Gets vmx_host
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless
     */
    public function getVmxHost()
    {
        return $this->container['vmx_host'];
    }

    /**
     * Sets vmx_host
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless $vmx_host vmx_host
     *
     * @return $this
     */
    public function setVmxHost($vmx_host)
    {
        $this->container['vmx_host'] = $vmx_host;

        return $this;
    }

    /**
     * Gets environmental
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless
     */
    public function getEnvironmental()
    {
        return $this->container['environmental'];
    }

    /**
     * Sets environmental
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless $environmental environmental
     *
     * @return $this
     */
    public function setEnvironmental($environmental)
    {
        $this->container['environmental'] = $environmental;

        return $this;
    }

    /**
     * Gets cellular_gateway
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless
     */
    public function getCellularGateway()
    {
        return $this->container['cellular_gateway'];
    }

    /**
     * Sets cellular_gateway
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdfirmwareUpgradesProductsWireless $cellular_gateway cellular_gateway
     *
     * @return $this
     */
    public function setCellularGateway($cellular_gateway)
    {
        $this->container['cellular_gateway'] = $cellular_gateway;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


