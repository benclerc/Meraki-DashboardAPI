<?php
/**
 * CreateNetworkSwitchQosRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateNetworkSwitchQosRule Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateNetworkSwitchQosRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'createNetworkSwitchQosRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vlan' => 'int',
        'protocol' => 'string',
        'src_port' => 'int',
        'src_port_range' => 'string',
        'dst_port' => 'int',
        'dst_port_range' => 'string',
        'dscp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vlan' => null,
        'protocol' => null,
        'src_port' => null,
        'src_port_range' => null,
        'dst_port' => null,
        'dst_port_range' => null,
        'dscp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vlan' => 'vlan',
        'protocol' => 'protocol',
        'src_port' => 'srcPort',
        'src_port_range' => 'srcPortRange',
        'dst_port' => 'dstPort',
        'dst_port_range' => 'dstPortRange',
        'dscp' => 'dscp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vlan' => 'setVlan',
        'protocol' => 'setProtocol',
        'src_port' => 'setSrcPort',
        'src_port_range' => 'setSrcPortRange',
        'dst_port' => 'setDstPort',
        'dst_port_range' => 'setDstPortRange',
        'dscp' => 'setDscp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vlan' => 'getVlan',
        'protocol' => 'getProtocol',
        'src_port' => 'getSrcPort',
        'src_port_range' => 'getSrcPortRange',
        'dst_port' => 'getDstPort',
        'dst_port_range' => 'getDstPortRange',
        'dscp' => 'getDscp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROTOCOL_ANY = 'ANY';
    const PROTOCOL_TCP = 'TCP';
    const PROTOCOL_UDP = 'UDP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_ANY,
            self::PROTOCOL_TCP,
            self::PROTOCOL_UDP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vlan'] = isset($data['vlan']) ? $data['vlan'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['src_port'] = isset($data['src_port']) ? $data['src_port'] : null;
        $this->container['src_port_range'] = isset($data['src_port_range']) ? $data['src_port_range'] : null;
        $this->container['dst_port'] = isset($data['dst_port']) ? $data['dst_port'] : null;
        $this->container['dst_port_range'] = isset($data['dst_port_range']) ? $data['dst_port_range'] : null;
        $this->container['dscp'] = isset($data['dscp']) ? $data['dscp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vlan'] === null) {
            $invalidProperties[] = "'vlan' can't be null";
        }
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'protocol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vlan
     *
     * @return int
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int $vlan The VLAN of the incoming packet. A null value will match any VLAN.
     *
     * @return $this
     */
    public function setVlan($vlan)
    {
        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol The protocol of the incoming packet. Can be one of \"ANY\", \"TCP\" or \"UDP\". Default value is \"ANY\"
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'protocol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets src_port
     *
     * @return int
     */
    public function getSrcPort()
    {
        return $this->container['src_port'];
    }

    /**
     * Sets src_port
     *
     * @param int $src_port The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
     *
     * @return $this
     */
    public function setSrcPort($src_port)
    {
        $this->container['src_port'] = $src_port;

        return $this;
    }

    /**
     * Gets src_port_range
     *
     * @return string
     */
    public function getSrcPortRange()
    {
        return $this->container['src_port_range'];
    }

    /**
     * Sets src_port_range
     *
     * @param string $src_port_range The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
     *
     * @return $this
     */
    public function setSrcPortRange($src_port_range)
    {
        $this->container['src_port_range'] = $src_port_range;

        return $this;
    }

    /**
     * Gets dst_port
     *
     * @return int
     */
    public function getDstPort()
    {
        return $this->container['dst_port'];
    }

    /**
     * Sets dst_port
     *
     * @param int $dst_port The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
     *
     * @return $this
     */
    public function setDstPort($dst_port)
    {
        $this->container['dst_port'] = $dst_port;

        return $this;
    }

    /**
     * Gets dst_port_range
     *
     * @return string
     */
    public function getDstPortRange()
    {
        return $this->container['dst_port_range'];
    }

    /**
     * Sets dst_port_range
     *
     * @param string $dst_port_range The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
     *
     * @return $this
     */
    public function setDstPortRange($dst_port_range)
    {
        $this->container['dst_port_range'] = $dst_port_range;

        return $this;
    }

    /**
     * Gets dscp
     *
     * @return int
     */
    public function getDscp()
    {
        return $this->container['dscp'];
    }

    /**
     * Sets dscp
     *
     * @param int $dscp DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
     *
     * @return $this
     */
    public function setDscp($dscp)
    {
        $this->container['dscp'] = $dscp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


