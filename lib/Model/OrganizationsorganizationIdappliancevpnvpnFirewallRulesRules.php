<?php
/**
 * OrganizationsorganizationIdappliancevpnvpnFirewallRulesRules
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrganizationsorganizationIdappliancevpnvpnFirewallRulesRules Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationsorganizationIdappliancevpnvpnFirewallRulesRules implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'organizationsorganizationIdappliancevpnvpnFirewallRules_rules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comment' => 'string',
        'policy' => 'string',
        'protocol' => 'string',
        'src_port' => 'string',
        'src_cidr' => 'string',
        'dest_port' => 'string',
        'dest_cidr' => 'string',
        'syslog_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comment' => null,
        'policy' => null,
        'protocol' => null,
        'src_port' => null,
        'src_cidr' => null,
        'dest_port' => null,
        'dest_cidr' => null,
        'syslog_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comment' => 'comment',
        'policy' => 'policy',
        'protocol' => 'protocol',
        'src_port' => 'srcPort',
        'src_cidr' => 'srcCidr',
        'dest_port' => 'destPort',
        'dest_cidr' => 'destCidr',
        'syslog_enabled' => 'syslogEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comment' => 'setComment',
        'policy' => 'setPolicy',
        'protocol' => 'setProtocol',
        'src_port' => 'setSrcPort',
        'src_cidr' => 'setSrcCidr',
        'dest_port' => 'setDestPort',
        'dest_cidr' => 'setDestCidr',
        'syslog_enabled' => 'setSyslogEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comment' => 'getComment',
        'policy' => 'getPolicy',
        'protocol' => 'getProtocol',
        'src_port' => 'getSrcPort',
        'src_cidr' => 'getSrcCidr',
        'dest_port' => 'getDestPort',
        'dest_cidr' => 'getDestCidr',
        'syslog_enabled' => 'getSyslogEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POLICY_ALLOW = 'allow';
    const POLICY_DENY = 'deny';
    const PROTOCOL_TCP = 'tcp';
    const PROTOCOL_UDP = 'udp';
    const PROTOCOL_ICMP = 'icmp';
    const PROTOCOL_ANY = 'any';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolicyAllowableValues()
    {
        return [
            self::POLICY_ALLOW,
            self::POLICY_DENY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_TCP,
            self::PROTOCOL_UDP,
            self::PROTOCOL_ICMP,
            self::PROTOCOL_ANY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['policy'] = isset($data['policy']) ? $data['policy'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['src_port'] = isset($data['src_port']) ? $data['src_port'] : null;
        $this->container['src_cidr'] = isset($data['src_cidr']) ? $data['src_cidr'] : null;
        $this->container['dest_port'] = isset($data['dest_port']) ? $data['dest_port'] : null;
        $this->container['dest_cidr'] = isset($data['dest_cidr']) ? $data['dest_cidr'] : null;
        $this->container['syslog_enabled'] = isset($data['syslog_enabled']) ? $data['syslog_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['policy'] === null) {
            $invalidProperties[] = "'policy' can't be null";
        }
        $allowedValues = $this->getPolicyAllowableValues();
        if (!is_null($this->container['policy']) && !in_array($this->container['policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'policy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['protocol'] === null) {
            $invalidProperties[] = "'protocol' can't be null";
        }
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'protocol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['src_cidr'] === null) {
            $invalidProperties[] = "'src_cidr' can't be null";
        }
        if ($this->container['dest_cidr'] === null) {
            $invalidProperties[] = "'dest_cidr' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Description of the rule (optional)
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return string
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param string $policy 'allow' or 'deny' traffic specified by this rule
     *
     * @return $this
     */
    public function setPolicy($policy)
    {
        $allowedValues = $this->getPolicyAllowableValues();
        if (!in_array($policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'policy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any')
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'protocol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets src_port
     *
     * @return string
     */
    public function getSrcPort()
    {
        return $this->container['src_port'];
    }

    /**
     * Sets src_port
     *
     * @param string $src_port Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'
     *
     * @return $this
     */
    public function setSrcPort($src_port)
    {
        $this->container['src_port'] = $src_port;

        return $this;
    }

    /**
     * Gets src_cidr
     *
     * @return string
     */
    public function getSrcCidr()
    {
        return $this->container['src_cidr'];
    }

    /**
     * Sets src_cidr
     *
     * @param string $src_cidr Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (FQDN not supported)
     *
     * @return $this
     */
    public function setSrcCidr($src_cidr)
    {
        $this->container['src_cidr'] = $src_cidr;

        return $this;
    }

    /**
     * Gets dest_port
     *
     * @return string
     */
    public function getDestPort()
    {
        return $this->container['dest_port'];
    }

    /**
     * Sets dest_port
     *
     * @param string $dest_port Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
     *
     * @return $this
     */
    public function setDestPort($dest_port)
    {
        $this->container['dest_port'] = $dest_port;

        return $this;
    }

    /**
     * Gets dest_cidr
     *
     * @return string
     */
    public function getDestCidr()
    {
        return $this->container['dest_cidr'];
    }

    /**
     * Sets dest_cidr
     *
     * @param string $dest_cidr Comma-separated list of destination IP address(es) (in IP or CIDR notation) or 'any' (FQDN not supported)
     *
     * @return $this
     */
    public function setDestCidr($dest_cidr)
    {
        $this->container['dest_cidr'] = $dest_cidr;

        return $this;
    }

    /**
     * Gets syslog_enabled
     *
     * @return bool
     */
    public function getSyslogEnabled()
    {
        return $this->container['syslog_enabled'];
    }

    /**
     * Sets syslog_enabled
     *
     * @param bool $syslog_enabled Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)
     *
     * @return $this
     */
    public function setSyslogEnabled($syslog_enabled)
    {
        $this->container['syslog_enabled'] = $syslog_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


