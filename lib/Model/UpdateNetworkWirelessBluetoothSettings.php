<?php
/**
 * UpdateNetworkWirelessBluetoothSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateNetworkWirelessBluetoothSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateNetworkWirelessBluetoothSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateNetworkWirelessBluetoothSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'scanning_enabled' => 'bool',
        'advertising_enabled' => 'bool',
        'uuid' => 'string',
        'major_minor_assignment_mode' => 'string',
        'major' => 'int',
        'minor' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'scanning_enabled' => null,
        'advertising_enabled' => null,
        'uuid' => null,
        'major_minor_assignment_mode' => null,
        'major' => null,
        'minor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scanning_enabled' => 'scanningEnabled',
        'advertising_enabled' => 'advertisingEnabled',
        'uuid' => 'uuid',
        'major_minor_assignment_mode' => 'majorMinorAssignmentMode',
        'major' => 'major',
        'minor' => 'minor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scanning_enabled' => 'setScanningEnabled',
        'advertising_enabled' => 'setAdvertisingEnabled',
        'uuid' => 'setUuid',
        'major_minor_assignment_mode' => 'setMajorMinorAssignmentMode',
        'major' => 'setMajor',
        'minor' => 'setMinor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scanning_enabled' => 'getScanningEnabled',
        'advertising_enabled' => 'getAdvertisingEnabled',
        'uuid' => 'getUuid',
        'major_minor_assignment_mode' => 'getMajorMinorAssignmentMode',
        'major' => 'getMajor',
        'minor' => 'getMinor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MAJOR_MINOR_ASSIGNMENT_MODE_UNIQUE = 'Unique';
    const MAJOR_MINOR_ASSIGNMENT_MODE_NON_UNIQUE = 'Non-unique';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMajorMinorAssignmentModeAllowableValues()
    {
        return [
            self::MAJOR_MINOR_ASSIGNMENT_MODE_UNIQUE,
            self::MAJOR_MINOR_ASSIGNMENT_MODE_NON_UNIQUE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scanning_enabled'] = isset($data['scanning_enabled']) ? $data['scanning_enabled'] : null;
        $this->container['advertising_enabled'] = isset($data['advertising_enabled']) ? $data['advertising_enabled'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['major_minor_assignment_mode'] = isset($data['major_minor_assignment_mode']) ? $data['major_minor_assignment_mode'] : null;
        $this->container['major'] = isset($data['major']) ? $data['major'] : null;
        $this->container['minor'] = isset($data['minor']) ? $data['minor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMajorMinorAssignmentModeAllowableValues();
        if (!is_null($this->container['major_minor_assignment_mode']) && !in_array($this->container['major_minor_assignment_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'major_minor_assignment_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scanning_enabled
     *
     * @return bool
     */
    public function getScanningEnabled()
    {
        return $this->container['scanning_enabled'];
    }

    /**
     * Sets scanning_enabled
     *
     * @param bool $scanning_enabled Whether APs will scan for Bluetooth enabled clients. (true, false)
     *
     * @return $this
     */
    public function setScanningEnabled($scanning_enabled)
    {
        $this->container['scanning_enabled'] = $scanning_enabled;

        return $this;
    }

    /**
     * Gets advertising_enabled
     *
     * @return bool
     */
    public function getAdvertisingEnabled()
    {
        return $this->container['advertising_enabled'];
    }

    /**
     * Sets advertising_enabled
     *
     * @param bool $advertising_enabled Whether APs will advertise beacons. (true, false)
     *
     * @return $this
     */
    public function setAdvertisingEnabled($advertising_enabled)
    {
        $this->container['advertising_enabled'] = $advertising_enabled;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid The UUID to be used in the beacon identifier.
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets major_minor_assignment_mode
     *
     * @return string
     */
    public function getMajorMinorAssignmentMode()
    {
        return $this->container['major_minor_assignment_mode'];
    }

    /**
     * Sets major_minor_assignment_mode
     *
     * @param string $major_minor_assignment_mode The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
     *
     * @return $this
     */
    public function setMajorMinorAssignmentMode($major_minor_assignment_mode)
    {
        $allowedValues = $this->getMajorMinorAssignmentModeAllowableValues();
        if (!is_null($major_minor_assignment_mode) && !in_array($major_minor_assignment_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'major_minor_assignment_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['major_minor_assignment_mode'] = $major_minor_assignment_mode;

        return $this;
    }

    /**
     * Gets major
     *
     * @return int
     */
    public function getMajor()
    {
        return $this->container['major'];
    }

    /**
     * Sets major
     *
     * @param int $major The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
     *
     * @return $this
     */
    public function setMajor($major)
    {
        $this->container['major'] = $major;

        return $this;
    }

    /**
     * Gets minor
     *
     * @return int
     */
    public function getMinor()
    {
        return $this->container['minor'];
    }

    /**
     * Sets minor
     *
     * @param int $minor The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
     *
     * @return $this
     */
    public function setMinor($minor)
    {
        $this->container['minor'] = $minor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


