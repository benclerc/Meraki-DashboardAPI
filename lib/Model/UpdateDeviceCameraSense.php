<?php
/**
 * UpdateDeviceCameraSense
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateDeviceCameraSense Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateDeviceCameraSense implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateDeviceCameraSense';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sense_enabled' => 'bool',
        'mqtt_broker_id' => 'string',
        'audio_detection' => '\Swagger\Client\Model\DevicesserialcamerasenseAudioDetection',
        'detection_model_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sense_enabled' => null,
        'mqtt_broker_id' => null,
        'audio_detection' => null,
        'detection_model_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sense_enabled' => 'senseEnabled',
        'mqtt_broker_id' => 'mqttBrokerId',
        'audio_detection' => 'audioDetection',
        'detection_model_id' => 'detectionModelId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sense_enabled' => 'setSenseEnabled',
        'mqtt_broker_id' => 'setMqttBrokerId',
        'audio_detection' => 'setAudioDetection',
        'detection_model_id' => 'setDetectionModelId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sense_enabled' => 'getSenseEnabled',
        'mqtt_broker_id' => 'getMqttBrokerId',
        'audio_detection' => 'getAudioDetection',
        'detection_model_id' => 'getDetectionModelId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sense_enabled'] = isset($data['sense_enabled']) ? $data['sense_enabled'] : null;
        $this->container['mqtt_broker_id'] = isset($data['mqtt_broker_id']) ? $data['mqtt_broker_id'] : null;
        $this->container['audio_detection'] = isset($data['audio_detection']) ? $data['audio_detection'] : null;
        $this->container['detection_model_id'] = isset($data['detection_model_id']) ? $data['detection_model_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sense_enabled
     *
     * @return bool
     */
    public function getSenseEnabled()
    {
        return $this->container['sense_enabled'];
    }

    /**
     * Sets sense_enabled
     *
     * @param bool $sense_enabled Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
     *
     * @return $this
     */
    public function setSenseEnabled($sense_enabled)
    {
        $this->container['sense_enabled'] = $sense_enabled;

        return $this;
    }

    /**
     * Gets mqtt_broker_id
     *
     * @return string
     */
    public function getMqttBrokerId()
    {
        return $this->container['mqtt_broker_id'];
    }

    /**
     * Sets mqtt_broker_id
     *
     * @param string $mqtt_broker_id The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
     *
     * @return $this
     */
    public function setMqttBrokerId($mqtt_broker_id)
    {
        $this->container['mqtt_broker_id'] = $mqtt_broker_id;

        return $this;
    }

    /**
     * Gets audio_detection
     *
     * @return \Swagger\Client\Model\DevicesserialcamerasenseAudioDetection
     */
    public function getAudioDetection()
    {
        return $this->container['audio_detection'];
    }

    /**
     * Sets audio_detection
     *
     * @param \Swagger\Client\Model\DevicesserialcamerasenseAudioDetection $audio_detection audio_detection
     *
     * @return $this
     */
    public function setAudioDetection($audio_detection)
    {
        $this->container['audio_detection'] = $audio_detection;

        return $this;
    }

    /**
     * Gets detection_model_id
     *
     * @return string
     */
    public function getDetectionModelId()
    {
        return $this->container['detection_model_id'];
    }

    /**
     * Sets detection_model_id
     *
     * @param string $detection_model_id The ID of the object detection model
     *
     * @return $this
     */
    public function setDetectionModelId($detection_model_id)
    {
        $this->container['detection_model_id'] = $detection_model_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


