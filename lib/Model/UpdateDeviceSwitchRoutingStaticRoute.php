<?php
/**
 * UpdateDeviceSwitchRoutingStaticRoute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateDeviceSwitchRoutingStaticRoute Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateDeviceSwitchRoutingStaticRoute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateDeviceSwitchRoutingStaticRoute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'subnet' => 'string',
        'next_hop_ip' => 'string',
        'advertise_via_ospf_enabled' => 'bool',
        'prefer_over_ospf_routes_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'subnet' => null,
        'next_hop_ip' => null,
        'advertise_via_ospf_enabled' => null,
        'prefer_over_ospf_routes_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'subnet' => 'subnet',
        'next_hop_ip' => 'nextHopIp',
        'advertise_via_ospf_enabled' => 'advertiseViaOspfEnabled',
        'prefer_over_ospf_routes_enabled' => 'preferOverOspfRoutesEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'subnet' => 'setSubnet',
        'next_hop_ip' => 'setNextHopIp',
        'advertise_via_ospf_enabled' => 'setAdvertiseViaOspfEnabled',
        'prefer_over_ospf_routes_enabled' => 'setPreferOverOspfRoutesEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'subnet' => 'getSubnet',
        'next_hop_ip' => 'getNextHopIp',
        'advertise_via_ospf_enabled' => 'getAdvertiseViaOspfEnabled',
        'prefer_over_ospf_routes_enabled' => 'getPreferOverOspfRoutesEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['subnet'] = isset($data['subnet']) ? $data['subnet'] : null;
        $this->container['next_hop_ip'] = isset($data['next_hop_ip']) ? $data['next_hop_ip'] : null;
        $this->container['advertise_via_ospf_enabled'] = isset($data['advertise_via_ospf_enabled']) ? $data['advertise_via_ospf_enabled'] : null;
        $this->container['prefer_over_ospf_routes_enabled'] = isset($data['prefer_over_ospf_routes_enabled']) ? $data['prefer_over_ospf_routes_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name or description for layer 3 static route
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string $subnet The subnet which is routed via this static route and should be specified in CIDR notation (ex. 1.2.3.0/24)
     *
     * @return $this
     */
    public function setSubnet($subnet)
    {
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets next_hop_ip
     *
     * @return string
     */
    public function getNextHopIp()
    {
        return $this->container['next_hop_ip'];
    }

    /**
     * Sets next_hop_ip
     *
     * @param string $next_hop_ip IP address of the next hop device to which the device sends its traffic for the subnet
     *
     * @return $this
     */
    public function setNextHopIp($next_hop_ip)
    {
        $this->container['next_hop_ip'] = $next_hop_ip;

        return $this;
    }

    /**
     * Gets advertise_via_ospf_enabled
     *
     * @return bool
     */
    public function getAdvertiseViaOspfEnabled()
    {
        return $this->container['advertise_via_ospf_enabled'];
    }

    /**
     * Sets advertise_via_ospf_enabled
     *
     * @param bool $advertise_via_ospf_enabled Option to advertise static route via OSPF
     *
     * @return $this
     */
    public function setAdvertiseViaOspfEnabled($advertise_via_ospf_enabled)
    {
        $this->container['advertise_via_ospf_enabled'] = $advertise_via_ospf_enabled;

        return $this;
    }

    /**
     * Gets prefer_over_ospf_routes_enabled
     *
     * @return bool
     */
    public function getPreferOverOspfRoutesEnabled()
    {
        return $this->container['prefer_over_ospf_routes_enabled'];
    }

    /**
     * Sets prefer_over_ospf_routes_enabled
     *
     * @param bool $prefer_over_ospf_routes_enabled Option to prefer static route over OSPF routes
     *
     * @return $this
     */
    public function setPreferOverOspfRoutesEnabled($prefer_over_ospf_routes_enabled)
    {
        $this->container['prefer_over_ospf_routes_enabled'] = $prefer_over_ospf_routes_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


