<?php
/**
 * CreateDeviceSwitchRoutingInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateDeviceSwitchRoutingInterface Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateDeviceSwitchRoutingInterface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'createDeviceSwitchRoutingInterface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'subnet' => 'string',
        'interface_ip' => 'string',
        'multicast_routing' => 'string',
        'vlan_id' => 'int',
        'default_gateway' => 'string',
        'ospf_settings' => '\Swagger\Client\Model\DevicesserialswitchroutinginterfacesOspfSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'subnet' => null,
        'interface_ip' => null,
        'multicast_routing' => null,
        'vlan_id' => null,
        'default_gateway' => null,
        'ospf_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'subnet' => 'subnet',
        'interface_ip' => 'interfaceIp',
        'multicast_routing' => 'multicastRouting',
        'vlan_id' => 'vlanId',
        'default_gateway' => 'defaultGateway',
        'ospf_settings' => 'ospfSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'subnet' => 'setSubnet',
        'interface_ip' => 'setInterfaceIp',
        'multicast_routing' => 'setMulticastRouting',
        'vlan_id' => 'setVlanId',
        'default_gateway' => 'setDefaultGateway',
        'ospf_settings' => 'setOspfSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'subnet' => 'getSubnet',
        'interface_ip' => 'getInterfaceIp',
        'multicast_routing' => 'getMulticastRouting',
        'vlan_id' => 'getVlanId',
        'default_gateway' => 'getDefaultGateway',
        'ospf_settings' => 'getOspfSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MULTICAST_ROUTING_DISABLED = 'disabled';
    const MULTICAST_ROUTING_ENABLED = 'enabled';
    const MULTICAST_ROUTING_IGMP_SNOOPING_QUERIER = 'IGMP snooping querier';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastRoutingAllowableValues()
    {
        return [
            self::MULTICAST_ROUTING_DISABLED,
            self::MULTICAST_ROUTING_ENABLED,
            self::MULTICAST_ROUTING_IGMP_SNOOPING_QUERIER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['subnet'] = isset($data['subnet']) ? $data['subnet'] : null;
        $this->container['interface_ip'] = isset($data['interface_ip']) ? $data['interface_ip'] : null;
        $this->container['multicast_routing'] = isset($data['multicast_routing']) ? $data['multicast_routing'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['default_gateway'] = isset($data['default_gateway']) ? $data['default_gateway'] : null;
        $this->container['ospf_settings'] = isset($data['ospf_settings']) ? $data['ospf_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['interface_ip'] === null) {
            $invalidProperties[] = "'interface_ip' can't be null";
        }
        $allowedValues = $this->getMulticastRoutingAllowableValues();
        if (!is_null($this->container['multicast_routing']) && !in_array($this->container['multicast_routing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'multicast_routing', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['vlan_id'] === null) {
            $invalidProperties[] = "'vlan_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A friendly name or description for the interface or VLAN.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string $subnet The network that this routed interface is on, in CIDR notation (ex. 10.1.1.0/24).
     *
     * @return $this
     */
    public function setSubnet($subnet)
    {
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets interface_ip
     *
     * @return string
     */
    public function getInterfaceIp()
    {
        return $this->container['interface_ip'];
    }

    /**
     * Sets interface_ip
     *
     * @param string $interface_ip The IP address this switch will use for layer 3 routing on this VLAN or subnet. This cannot be the same as the switch's management IP.
     *
     * @return $this
     */
    public function setInterfaceIp($interface_ip)
    {
        $this->container['interface_ip'] = $interface_ip;

        return $this;
    }

    /**
     * Gets multicast_routing
     *
     * @return string
     */
    public function getMulticastRouting()
    {
        return $this->container['multicast_routing'];
    }

    /**
     * Sets multicast_routing
     *
     * @param string $multicast_routing Enable multicast support if, multicast routing between VLANs is required. Options are, 'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.
     *
     * @return $this
     */
    public function setMulticastRouting($multicast_routing)
    {
        $allowedValues = $this->getMulticastRoutingAllowableValues();
        if (!is_null($multicast_routing) && !in_array($multicast_routing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'multicast_routing', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_routing'] = $multicast_routing;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int $vlan_id The VLAN this routed interface is on. VLAN must be between 1 and 4094.
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets default_gateway
     *
     * @return string
     */
    public function getDefaultGateway()
    {
        return $this->container['default_gateway'];
    }

    /**
     * Sets default_gateway
     *
     * @param string $default_gateway The next hop for any traffic that isn't going to a directly connected subnet or over a static route. This IP address must exist in a subnet with a routed interface.
     *
     * @return $this
     */
    public function setDefaultGateway($default_gateway)
    {
        $this->container['default_gateway'] = $default_gateway;

        return $this;
    }

    /**
     * Gets ospf_settings
     *
     * @return \Swagger\Client\Model\DevicesserialswitchroutinginterfacesOspfSettings
     */
    public function getOspfSettings()
    {
        return $this->container['ospf_settings'];
    }

    /**
     * Sets ospf_settings
     *
     * @param \Swagger\Client\Model\DevicesserialswitchroutinginterfacesOspfSettings $ospf_settings ospf_settings
     *
     * @return $this
     */
    public function setOspfSettings($ospf_settings)
    {
        $this->container['ospf_settings'] = $ospf_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


