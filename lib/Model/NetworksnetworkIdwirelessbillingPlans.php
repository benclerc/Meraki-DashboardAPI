<?php
/**
 * NetworksnetworkIdwirelessbillingPlans
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdwirelessbillingPlans Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdwirelessbillingPlans implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdwirelessbilling_plans';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'price' => 'float',
        'bandwidth_limits' => '\Swagger\Client\Model\NetworksnetworkIdwirelessbillingBandwidthLimits',
        'time_limit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'price' => 'float',
        'bandwidth_limits' => null,
        'time_limit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'price' => 'price',
        'bandwidth_limits' => 'bandwidthLimits',
        'time_limit' => 'timeLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'price' => 'setPrice',
        'bandwidth_limits' => 'setBandwidthLimits',
        'time_limit' => 'setTimeLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'price' => 'getPrice',
        'bandwidth_limits' => 'getBandwidthLimits',
        'time_limit' => 'getTimeLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIME_LIMIT__1_HOUR = '1 hour';
    const TIME_LIMIT__1_DAY = '1 day';
    const TIME_LIMIT__1_WEEK = '1 week';
    const TIME_LIMIT__30_DAYS = '30 days';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeLimitAllowableValues()
    {
        return [
            self::TIME_LIMIT__1_HOUR,
            self::TIME_LIMIT__1_DAY,
            self::TIME_LIMIT__1_WEEK,
            self::TIME_LIMIT__30_DAYS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['bandwidth_limits'] = isset($data['bandwidth_limits']) ? $data['bandwidth_limits'] : null;
        $this->container['time_limit'] = isset($data['time_limit']) ? $data['time_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['bandwidth_limits'] === null) {
            $invalidProperties[] = "'bandwidth_limits' can't be null";
        }
        if ($this->container['time_limit'] === null) {
            $invalidProperties[] = "'time_limit' can't be null";
        }
        $allowedValues = $this->getTimeLimitAllowableValues();
        if (!is_null($this->container['time_limit']) && !in_array($this->container['time_limit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'time_limit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of the pricing plan to update.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price The price of the billing plan.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets bandwidth_limits
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessbillingBandwidthLimits
     */
    public function getBandwidthLimits()
    {
        return $this->container['bandwidth_limits'];
    }

    /**
     * Sets bandwidth_limits
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessbillingBandwidthLimits $bandwidth_limits bandwidth_limits
     *
     * @return $this
     */
    public function setBandwidthLimits($bandwidth_limits)
    {
        $this->container['bandwidth_limits'] = $bandwidth_limits;

        return $this;
    }

    /**
     * Gets time_limit
     *
     * @return string
     */
    public function getTimeLimit()
    {
        return $this->container['time_limit'];
    }

    /**
     * Sets time_limit
     *
     * @param string $time_limit The time limit of the pricing plan in minutes. Can be '1 hour', '1 day', '1 week', or '30 days'.
     *
     * @return $this
     */
    public function setTimeLimit($time_limit)
    {
        $allowedValues = $this->getTimeLimitAllowableValues();
        if (!in_array($time_limit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'time_limit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_limit'] = $time_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


