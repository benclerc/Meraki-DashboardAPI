<?php
/**
 * ProvisionNetworkClients
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProvisionNetworkClients Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProvisionNetworkClients implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'provisionNetworkClients';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clients' => '\Swagger\Client\Model\NetworksnetworkIdclientsprovisionClients[]',
        'device_policy' => 'string',
        'group_policy_id' => 'string',
        'policies_by_security_appliance' => '\Swagger\Client\Model\NetworksnetworkIdclientsprovisionPoliciesBySecurityAppliance',
        'policies_by_ssid' => '\Swagger\Client\Model\NetworksnetworkIdclientsprovisionPoliciesBySsid'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clients' => null,
        'device_policy' => null,
        'group_policy_id' => null,
        'policies_by_security_appliance' => null,
        'policies_by_ssid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clients' => 'clients',
        'device_policy' => 'devicePolicy',
        'group_policy_id' => 'groupPolicyId',
        'policies_by_security_appliance' => 'policiesBySecurityAppliance',
        'policies_by_ssid' => 'policiesBySsid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clients' => 'setClients',
        'device_policy' => 'setDevicePolicy',
        'group_policy_id' => 'setGroupPolicyId',
        'policies_by_security_appliance' => 'setPoliciesBySecurityAppliance',
        'policies_by_ssid' => 'setPoliciesBySsid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clients' => 'getClients',
        'device_policy' => 'getDevicePolicy',
        'group_policy_id' => 'getGroupPolicyId',
        'policies_by_security_appliance' => 'getPoliciesBySecurityAppliance',
        'policies_by_ssid' => 'getPoliciesBySsid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEVICE_POLICY_GROUP_POLICY = 'Group policy';
    const DEVICE_POLICY_ALLOWED = 'Allowed';
    const DEVICE_POLICY_BLOCKED = 'Blocked';
    const DEVICE_POLICY_PER_CONNECTION = 'Per connection';
    const DEVICE_POLICY_NORMAL = 'Normal';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDevicePolicyAllowableValues()
    {
        return [
            self::DEVICE_POLICY_GROUP_POLICY,
            self::DEVICE_POLICY_ALLOWED,
            self::DEVICE_POLICY_BLOCKED,
            self::DEVICE_POLICY_PER_CONNECTION,
            self::DEVICE_POLICY_NORMAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clients'] = isset($data['clients']) ? $data['clients'] : null;
        $this->container['device_policy'] = isset($data['device_policy']) ? $data['device_policy'] : null;
        $this->container['group_policy_id'] = isset($data['group_policy_id']) ? $data['group_policy_id'] : null;
        $this->container['policies_by_security_appliance'] = isset($data['policies_by_security_appliance']) ? $data['policies_by_security_appliance'] : null;
        $this->container['policies_by_ssid'] = isset($data['policies_by_ssid']) ? $data['policies_by_ssid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['clients'] === null) {
            $invalidProperties[] = "'clients' can't be null";
        }
        if ($this->container['device_policy'] === null) {
            $invalidProperties[] = "'device_policy' can't be null";
        }
        $allowedValues = $this->getDevicePolicyAllowableValues();
        if (!is_null($this->container['device_policy']) && !in_array($this->container['device_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'device_policy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clients
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdclientsprovisionClients[]
     */
    public function getClients()
    {
        return $this->container['clients'];
    }

    /**
     * Sets clients
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdclientsprovisionClients[] $clients The array of clients to provision
     *
     * @return $this
     */
    public function setClients($clients)
    {
        $this->container['clients'] = $clients;

        return $this;
    }

    /**
     * Gets device_policy
     *
     * @return string
     */
    public function getDevicePolicy()
    {
        return $this->container['device_policy'];
    }

    /**
     * Sets device_policy
     *
     * @param string $device_policy The policy to apply to the specified client. Can be 'Group policy', 'Allowed', 'Blocked', 'Per connection' or 'Normal'. Required.
     *
     * @return $this
     */
    public function setDevicePolicy($device_policy)
    {
        $allowedValues = $this->getDevicePolicyAllowableValues();
        if (!in_array($device_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'device_policy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_policy'] = $device_policy;

        return $this;
    }

    /**
     * Gets group_policy_id
     *
     * @return string
     */
    public function getGroupPolicyId()
    {
        return $this->container['group_policy_id'];
    }

    /**
     * Sets group_policy_id
     *
     * @param string $group_policy_id The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \"Group policy\". Otherwise this is ignored.
     *
     * @return $this
     */
    public function setGroupPolicyId($group_policy_id)
    {
        $this->container['group_policy_id'] = $group_policy_id;

        return $this;
    }

    /**
     * Gets policies_by_security_appliance
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdclientsprovisionPoliciesBySecurityAppliance
     */
    public function getPoliciesBySecurityAppliance()
    {
        return $this->container['policies_by_security_appliance'];
    }

    /**
     * Sets policies_by_security_appliance
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdclientsprovisionPoliciesBySecurityAppliance $policies_by_security_appliance policies_by_security_appliance
     *
     * @return $this
     */
    public function setPoliciesBySecurityAppliance($policies_by_security_appliance)
    {
        $this->container['policies_by_security_appliance'] = $policies_by_security_appliance;

        return $this;
    }

    /**
     * Gets policies_by_ssid
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdclientsprovisionPoliciesBySsid
     */
    public function getPoliciesBySsid()
    {
        return $this->container['policies_by_ssid'];
    }

    /**
     * Sets policies_by_ssid
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdclientsprovisionPoliciesBySsid $policies_by_ssid policies_by_ssid
     *
     * @return $this
     */
    public function setPoliciesBySsid($policies_by_ssid)
    {
        $this->container['policies_by_ssid'] = $policies_by_ssid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


