<?php
/**
 * NetworksnetworkIdwirelessrfProfilesrfProfileIdFiveGhzSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdwirelessrfProfilesrfProfileIdFiveGhzSettings Class Doc Comment
 *
 * @category Class
 * @description Settings related to 5Ghz band
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdwirelessrfProfilesrfProfileIdFiveGhzSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdwirelessrfProfilesrfProfileId_fiveGhzSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_power' => 'int',
        'min_power' => 'int',
        'min_bitrate' => 'int',
        'valid_auto_channels' => 'int[]',
        'channel_width' => 'string',
        'rxsop' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_power' => null,
        'min_power' => null,
        'min_bitrate' => null,
        'valid_auto_channels' => null,
        'channel_width' => null,
        'rxsop' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_power' => 'maxPower',
        'min_power' => 'minPower',
        'min_bitrate' => 'minBitrate',
        'valid_auto_channels' => 'validAutoChannels',
        'channel_width' => 'channelWidth',
        'rxsop' => 'rxsop'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_power' => 'setMaxPower',
        'min_power' => 'setMinPower',
        'min_bitrate' => 'setMinBitrate',
        'valid_auto_channels' => 'setValidAutoChannels',
        'channel_width' => 'setChannelWidth',
        'rxsop' => 'setRxsop'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_power' => 'getMaxPower',
        'min_power' => 'getMinPower',
        'min_bitrate' => 'getMinBitrate',
        'valid_auto_channels' => 'getValidAutoChannels',
        'channel_width' => 'getChannelWidth',
        'rxsop' => 'getRxsop'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_power'] = isset($data['max_power']) ? $data['max_power'] : null;
        $this->container['min_power'] = isset($data['min_power']) ? $data['min_power'] : null;
        $this->container['min_bitrate'] = isset($data['min_bitrate']) ? $data['min_bitrate'] : null;
        $this->container['valid_auto_channels'] = isset($data['valid_auto_channels']) ? $data['valid_auto_channels'] : null;
        $this->container['channel_width'] = isset($data['channel_width']) ? $data['channel_width'] : null;
        $this->container['rxsop'] = isset($data['rxsop']) ? $data['rxsop'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_power
     *
     * @return int
     */
    public function getMaxPower()
    {
        return $this->container['max_power'];
    }

    /**
     * Sets max_power
     *
     * @param int $max_power Sets max power (dBm) of 5Ghz band. Can be integer between 8 and 30.
     *
     * @return $this
     */
    public function setMaxPower($max_power)
    {
        $this->container['max_power'] = $max_power;

        return $this;
    }

    /**
     * Gets min_power
     *
     * @return int
     */
    public function getMinPower()
    {
        return $this->container['min_power'];
    }

    /**
     * Sets min_power
     *
     * @param int $min_power Sets min power (dBm) of 5Ghz band. Can be integer between 8 and 30.
     *
     * @return $this
     */
    public function setMinPower($min_power)
    {
        $this->container['min_power'] = $min_power;

        return $this;
    }

    /**
     * Gets min_bitrate
     *
     * @return int
     */
    public function getMinBitrate()
    {
        return $this->container['min_bitrate'];
    }

    /**
     * Sets min_bitrate
     *
     * @param int $min_bitrate Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'.
     *
     * @return $this
     */
    public function setMinBitrate($min_bitrate)
    {
        $this->container['min_bitrate'] = $min_bitrate;

        return $this;
    }

    /**
     * Gets valid_auto_channels
     *
     * @return int[]
     */
    public function getValidAutoChannels()
    {
        return $this->container['valid_auto_channels'];
    }

    /**
     * Sets valid_auto_channels
     *
     * @param int[] $valid_auto_channels Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.
     *
     * @return $this
     */
    public function setValidAutoChannels($valid_auto_channels)
    {
        $this->container['valid_auto_channels'] = $valid_auto_channels;

        return $this;
    }

    /**
     * Gets channel_width
     *
     * @return string
     */
    public function getChannelWidth()
    {
        return $this->container['channel_width'];
    }

    /**
     * Sets channel_width
     *
     * @param string $channel_width Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'.
     *
     * @return $this
     */
    public function setChannelWidth($channel_width)
    {
        $this->container['channel_width'] = $channel_width;

        return $this;
    }

    /**
     * Gets rxsop
     *
     * @return int
     */
    public function getRxsop()
    {
        return $this->container['rxsop'];
    }

    /**
     * Sets rxsop
     *
     * @param int $rxsop The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
     *
     * @return $this
     */
    public function setRxsop($rxsop)
    {
        $this->container['rxsop'] = $rxsop;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


