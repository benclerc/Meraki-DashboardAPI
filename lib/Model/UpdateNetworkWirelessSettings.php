<?php
/**
 * UpdateNetworkWirelessSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateNetworkWirelessSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateNetworkWirelessSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateNetworkWirelessSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'meshing_enabled' => 'bool',
        'ipv6_bridge_enabled' => 'bool',
        'location_analytics_enabled' => 'bool',
        'upgrade_strategy' => 'string',
        'led_lights_on' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'meshing_enabled' => null,
        'ipv6_bridge_enabled' => null,
        'location_analytics_enabled' => null,
        'upgrade_strategy' => null,
        'led_lights_on' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meshing_enabled' => 'meshingEnabled',
        'ipv6_bridge_enabled' => 'ipv6BridgeEnabled',
        'location_analytics_enabled' => 'locationAnalyticsEnabled',
        'upgrade_strategy' => 'upgradeStrategy',
        'led_lights_on' => 'ledLightsOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meshing_enabled' => 'setMeshingEnabled',
        'ipv6_bridge_enabled' => 'setIpv6BridgeEnabled',
        'location_analytics_enabled' => 'setLocationAnalyticsEnabled',
        'upgrade_strategy' => 'setUpgradeStrategy',
        'led_lights_on' => 'setLedLightsOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meshing_enabled' => 'getMeshingEnabled',
        'ipv6_bridge_enabled' => 'getIpv6BridgeEnabled',
        'location_analytics_enabled' => 'getLocationAnalyticsEnabled',
        'upgrade_strategy' => 'getUpgradeStrategy',
        'led_lights_on' => 'getLedLightsOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UPGRADE_STRATEGY_MINIMIZE_UPGRADE_TIME = 'minimizeUpgradeTime';
    const UPGRADE_STRATEGY_MINIMIZE_CLIENT_DOWNTIME = 'minimizeClientDowntime';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpgradeStrategyAllowableValues()
    {
        return [
            self::UPGRADE_STRATEGY_MINIMIZE_UPGRADE_TIME,
            self::UPGRADE_STRATEGY_MINIMIZE_CLIENT_DOWNTIME,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meshing_enabled'] = isset($data['meshing_enabled']) ? $data['meshing_enabled'] : null;
        $this->container['ipv6_bridge_enabled'] = isset($data['ipv6_bridge_enabled']) ? $data['ipv6_bridge_enabled'] : null;
        $this->container['location_analytics_enabled'] = isset($data['location_analytics_enabled']) ? $data['location_analytics_enabled'] : null;
        $this->container['upgrade_strategy'] = isset($data['upgrade_strategy']) ? $data['upgrade_strategy'] : null;
        $this->container['led_lights_on'] = isset($data['led_lights_on']) ? $data['led_lights_on'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUpgradeStrategyAllowableValues();
        if (!is_null($this->container['upgrade_strategy']) && !in_array($this->container['upgrade_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'upgrade_strategy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meshing_enabled
     *
     * @return bool
     */
    public function getMeshingEnabled()
    {
        return $this->container['meshing_enabled'];
    }

    /**
     * Sets meshing_enabled
     *
     * @param bool $meshing_enabled Toggle for enabling or disabling meshing in a network
     *
     * @return $this
     */
    public function setMeshingEnabled($meshing_enabled)
    {
        $this->container['meshing_enabled'] = $meshing_enabled;

        return $this;
    }

    /**
     * Gets ipv6_bridge_enabled
     *
     * @return bool
     */
    public function getIpv6BridgeEnabled()
    {
        return $this->container['ipv6_bridge_enabled'];
    }

    /**
     * Sets ipv6_bridge_enabled
     *
     * @param bool $ipv6_bridge_enabled Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
     *
     * @return $this
     */
    public function setIpv6BridgeEnabled($ipv6_bridge_enabled)
    {
        $this->container['ipv6_bridge_enabled'] = $ipv6_bridge_enabled;

        return $this;
    }

    /**
     * Gets location_analytics_enabled
     *
     * @return bool
     */
    public function getLocationAnalyticsEnabled()
    {
        return $this->container['location_analytics_enabled'];
    }

    /**
     * Sets location_analytics_enabled
     *
     * @param bool $location_analytics_enabled Toggle for enabling or disabling location analytics for your network
     *
     * @return $this
     */
    public function setLocationAnalyticsEnabled($location_analytics_enabled)
    {
        $this->container['location_analytics_enabled'] = $location_analytics_enabled;

        return $this;
    }

    /**
     * Gets upgrade_strategy
     *
     * @return string
     */
    public function getUpgradeStrategy()
    {
        return $this->container['upgrade_strategy'];
    }

    /**
     * Sets upgrade_strategy
     *
     * @param string $upgrade_strategy The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
     *
     * @return $this
     */
    public function setUpgradeStrategy($upgrade_strategy)
    {
        $allowedValues = $this->getUpgradeStrategyAllowableValues();
        if (!is_null($upgrade_strategy) && !in_array($upgrade_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'upgrade_strategy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['upgrade_strategy'] = $upgrade_strategy;

        return $this;
    }

    /**
     * Gets led_lights_on
     *
     * @return bool
     */
    public function getLedLightsOn()
    {
        return $this->container['led_lights_on'];
    }

    /**
     * Sets led_lights_on
     *
     * @param bool $led_lights_on Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
     *
     * @return $this
     */
    public function setLedLightsOn($led_lights_on)
    {
        $this->container['led_lights_on'] = $led_lights_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


