<?php
/**
 * NetworksnetworkIdwirelessrfProfilesTwoFourGhzSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NetworksnetworkIdwirelessrfProfilesTwoFourGhzSettings Class Doc Comment
 *
 * @category Class
 * @description Settings related to 2.4Ghz band
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworksnetworkIdwirelessrfProfilesTwoFourGhzSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'networksnetworkIdwirelessrfProfiles_twoFourGhzSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_power' => 'int',
        'min_power' => 'int',
        'min_bitrate' => 'float',
        'valid_auto_channels' => 'int[]',
        'ax_enabled' => 'bool',
        'rxsop' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_power' => null,
        'min_power' => null,
        'min_bitrate' => 'float',
        'valid_auto_channels' => null,
        'ax_enabled' => null,
        'rxsop' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_power' => 'maxPower',
        'min_power' => 'minPower',
        'min_bitrate' => 'minBitrate',
        'valid_auto_channels' => 'validAutoChannels',
        'ax_enabled' => 'axEnabled',
        'rxsop' => 'rxsop'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_power' => 'setMaxPower',
        'min_power' => 'setMinPower',
        'min_bitrate' => 'setMinBitrate',
        'valid_auto_channels' => 'setValidAutoChannels',
        'ax_enabled' => 'setAxEnabled',
        'rxsop' => 'setRxsop'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_power' => 'getMaxPower',
        'min_power' => 'getMinPower',
        'min_bitrate' => 'getMinBitrate',
        'valid_auto_channels' => 'getValidAutoChannels',
        'ax_enabled' => 'getAxEnabled',
        'rxsop' => 'getRxsop'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_power'] = isset($data['max_power']) ? $data['max_power'] : null;
        $this->container['min_power'] = isset($data['min_power']) ? $data['min_power'] : null;
        $this->container['min_bitrate'] = isset($data['min_bitrate']) ? $data['min_bitrate'] : null;
        $this->container['valid_auto_channels'] = isset($data['valid_auto_channels']) ? $data['valid_auto_channels'] : null;
        $this->container['ax_enabled'] = isset($data['ax_enabled']) ? $data['ax_enabled'] : null;
        $this->container['rxsop'] = isset($data['rxsop']) ? $data['rxsop'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_power
     *
     * @return int
     */
    public function getMaxPower()
    {
        return $this->container['max_power'];
    }

    /**
     * Sets max_power
     *
     * @param int $max_power Sets max power (dBm) of 2.4Ghz band. Can be integer between 5 and 30. Defaults to 30.
     *
     * @return $this
     */
    public function setMaxPower($max_power)
    {
        $this->container['max_power'] = $max_power;

        return $this;
    }

    /**
     * Gets min_power
     *
     * @return int
     */
    public function getMinPower()
    {
        return $this->container['min_power'];
    }

    /**
     * Sets min_power
     *
     * @param int $min_power Sets min power (dBm) of 2.4Ghz band. Can be integer between 5 and 30. Defaults to 5.
     *
     * @return $this
     */
    public function setMinPower($min_power)
    {
        $this->container['min_power'] = $min_power;

        return $this;
    }

    /**
     * Gets min_bitrate
     *
     * @return float
     */
    public function getMinBitrate()
    {
        return $this->container['min_bitrate'];
    }

    /**
     * Sets min_bitrate
     *
     * @param float $min_bitrate Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11.
     *
     * @return $this
     */
    public function setMinBitrate($min_bitrate)
    {
        $this->container['min_bitrate'] = $min_bitrate;

        return $this;
    }

    /**
     * Gets valid_auto_channels
     *
     * @return int[]
     */
    public function getValidAutoChannels()
    {
        return $this->container['valid_auto_channels'];
    }

    /**
     * Sets valid_auto_channels
     *
     * @param int[] $valid_auto_channels Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11].
     *
     * @return $this
     */
    public function setValidAutoChannels($valid_auto_channels)
    {
        $this->container['valid_auto_channels'] = $valid_auto_channels;

        return $this;
    }

    /**
     * Gets ax_enabled
     *
     * @return bool
     */
    public function getAxEnabled()
    {
        return $this->container['ax_enabled'];
    }

    /**
     * Sets ax_enabled
     *
     * @param bool $ax_enabled Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
     *
     * @return $this
     */
    public function setAxEnabled($ax_enabled)
    {
        $this->container['ax_enabled'] = $ax_enabled;

        return $this;
    }

    /**
     * Gets rxsop
     *
     * @return int
     */
    public function getRxsop()
    {
        return $this->container['rxsop'];
    }

    /**
     * Sets rxsop
     *
     * @param int $rxsop The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
     *
     * @return $this
     */
    public function setRxsop($rxsop)
    {
        $this->container['rxsop'] = $rxsop;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


