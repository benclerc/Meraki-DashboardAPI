<?php
/**
 * UpdateNetworkWirelessSsidHotspot20
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateNetworkWirelessSsidHotspot20 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateNetworkWirelessSsidHotspot20 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'updateNetworkWirelessSsidHotspot20';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'operator' => '\Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20Operator',
        'venue' => '\Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20Venue',
        'network_access_type' => 'string',
        'domains' => 'string[]',
        'roam_consort_ois' => 'string[]',
        'mcc_mncs' => '\Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20MccMncs[]',
        'nai_realms' => '\Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20NaiRealms[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'operator' => null,
        'venue' => null,
        'network_access_type' => null,
        'domains' => null,
        'roam_consort_ois' => null,
        'mcc_mncs' => null,
        'nai_realms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'operator' => 'operator',
        'venue' => 'venue',
        'network_access_type' => 'networkAccessType',
        'domains' => 'domains',
        'roam_consort_ois' => 'roamConsortOis',
        'mcc_mncs' => 'mccMncs',
        'nai_realms' => 'naiRealms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'operator' => 'setOperator',
        'venue' => 'setVenue',
        'network_access_type' => 'setNetworkAccessType',
        'domains' => 'setDomains',
        'roam_consort_ois' => 'setRoamConsortOis',
        'mcc_mncs' => 'setMccMncs',
        'nai_realms' => 'setNaiRealms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'operator' => 'getOperator',
        'venue' => 'getVenue',
        'network_access_type' => 'getNetworkAccessType',
        'domains' => 'getDomains',
        'roam_consort_ois' => 'getRoamConsortOis',
        'mcc_mncs' => 'getMccMncs',
        'nai_realms' => 'getNaiRealms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NETWORK_ACCESS_TYPE_PRIVATE_NETWORK = 'Private network';
    const NETWORK_ACCESS_TYPE_PRIVATE_NETWORK_WITH_GUEST_ACCESS = 'Private network with guest access';
    const NETWORK_ACCESS_TYPE_CHARGEABLE_PUBLIC_NETWORK = 'Chargeable public network';
    const NETWORK_ACCESS_TYPE_FREE_PUBLIC_NETWORK = 'Free public network';
    const NETWORK_ACCESS_TYPE_PERSONAL_DEVICE_NETWORK = 'Personal device network';
    const NETWORK_ACCESS_TYPE_EMERGENCY_SERVICES_ONLY_NETWORK = 'Emergency services only network';
    const NETWORK_ACCESS_TYPE_TEST_OR_EXPERIMENTAL = 'Test or experimental';
    const NETWORK_ACCESS_TYPE_WILDCARD = 'Wildcard';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkAccessTypeAllowableValues()
    {
        return [
            self::NETWORK_ACCESS_TYPE_PRIVATE_NETWORK,
            self::NETWORK_ACCESS_TYPE_PRIVATE_NETWORK_WITH_GUEST_ACCESS,
            self::NETWORK_ACCESS_TYPE_CHARGEABLE_PUBLIC_NETWORK,
            self::NETWORK_ACCESS_TYPE_FREE_PUBLIC_NETWORK,
            self::NETWORK_ACCESS_TYPE_PERSONAL_DEVICE_NETWORK,
            self::NETWORK_ACCESS_TYPE_EMERGENCY_SERVICES_ONLY_NETWORK,
            self::NETWORK_ACCESS_TYPE_TEST_OR_EXPERIMENTAL,
            self::NETWORK_ACCESS_TYPE_WILDCARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['venue'] = isset($data['venue']) ? $data['venue'] : null;
        $this->container['network_access_type'] = isset($data['network_access_type']) ? $data['network_access_type'] : null;
        $this->container['domains'] = isset($data['domains']) ? $data['domains'] : null;
        $this->container['roam_consort_ois'] = isset($data['roam_consort_ois']) ? $data['roam_consort_ois'] : null;
        $this->container['mcc_mncs'] = isset($data['mcc_mncs']) ? $data['mcc_mncs'] : null;
        $this->container['nai_realms'] = isset($data['nai_realms']) ? $data['nai_realms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNetworkAccessTypeAllowableValues();
        if (!is_null($this->container['network_access_type']) && !in_array($this->container['network_access_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'network_access_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether or not Hotspot 2.0 for this SSID is enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20Operator
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20Operator $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets venue
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20Venue
     */
    public function getVenue()
    {
        return $this->container['venue'];
    }

    /**
     * Sets venue
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20Venue $venue venue
     *
     * @return $this
     */
    public function setVenue($venue)
    {
        $this->container['venue'] = $venue;

        return $this;
    }

    /**
     * Gets network_access_type
     *
     * @return string
     */
    public function getNetworkAccessType()
    {
        return $this->container['network_access_type'];
    }

    /**
     * Sets network_access_type
     *
     * @param string $network_access_type The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
     *
     * @return $this
     */
    public function setNetworkAccessType($network_access_type)
    {
        $allowedValues = $this->getNetworkAccessTypeAllowableValues();
        if (!is_null($network_access_type) && !in_array($network_access_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'network_access_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_access_type'] = $network_access_type;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[] $domains An array of domain names
     *
     * @return $this
     */
    public function setDomains($domains)
    {
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets roam_consort_ois
     *
     * @return string[]
     */
    public function getRoamConsortOis()
    {
        return $this->container['roam_consort_ois'];
    }

    /**
     * Sets roam_consort_ois
     *
     * @param string[] $roam_consort_ois An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
     *
     * @return $this
     */
    public function setRoamConsortOis($roam_consort_ois)
    {
        $this->container['roam_consort_ois'] = $roam_consort_ois;

        return $this;
    }

    /**
     * Gets mcc_mncs
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20MccMncs[]
     */
    public function getMccMncs()
    {
        return $this->container['mcc_mncs'];
    }

    /**
     * Sets mcc_mncs
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20MccMncs[] $mcc_mncs An array of MCC/MNC pairs
     *
     * @return $this
     */
    public function setMccMncs($mcc_mncs)
    {
        $this->container['mcc_mncs'] = $mcc_mncs;

        return $this;
    }

    /**
     * Gets nai_realms
     *
     * @return \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20NaiRealms[]
     */
    public function getNaiRealms()
    {
        return $this->container['nai_realms'];
    }

    /**
     * Sets nai_realms
     *
     * @param \Swagger\Client\Model\NetworksnetworkIdwirelessssidsnumberhotspot20NaiRealms[] $nai_realms An array of NAI realms
     *
     * @return $this
     */
    public function setNaiRealms($nai_realms)
    {
        $this->container['nai_realms'] = $nai_realms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


