<?php
/**
 * ConfigureApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 27 April, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.0.0-streaming
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigureApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigureApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for addNetworkSwitchStack
     *
     * Add a switch to a stack.
     *
     */
    public function testAddNetworkSwitchStack()
    {
    }

    /**
     * Test case for assignOrganizationLicensesSeats
     *
     * Assign SM seats to a network.
     *
     */
    public function testAssignOrganizationLicensesSeats()
    {
    }

    /**
     * Test case for bindNetwork
     *
     * Bind a network to a template..
     *
     */
    public function testBindNetwork()
    {
    }

    /**
     * Test case for checkinNetworkSmDevices
     *
     * Force check-in a set of devices.
     *
     */
    public function testCheckinNetworkSmDevices()
    {
    }

    /**
     * Test case for claimIntoOrganization
     *
     * Claim a list of devices, licenses, and/or orders into an organization.
     *
     */
    public function testClaimIntoOrganization()
    {
    }

    /**
     * Test case for claimNetworkDevices
     *
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed).
     *
     */
    public function testClaimNetworkDevices()
    {
    }

    /**
     * Test case for cloneOrganization
     *
     * Create a new organization by cloning the addressed organization.
     *
     */
    public function testCloneOrganization()
    {
    }

    /**
     * Test case for cloneOrganizationSwitchDevices
     *
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches.
     *
     */
    public function testCloneOrganizationSwitchDevices()
    {
    }

    /**
     * Test case for combineOrganizationNetworks
     *
     * Combine multiple networks into a single network.
     *
     */
    public function testCombineOrganizationNetworks()
    {
    }

    /**
     * Test case for createDeviceSwitchRoutingInterface
     *
     * Create a layer 3 interface for a switch.
     *
     */
    public function testCreateDeviceSwitchRoutingInterface()
    {
    }

    /**
     * Test case for createDeviceSwitchRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch.
     *
     */
    public function testCreateDeviceSwitchRoutingStaticRoute()
    {
    }

    /**
     * Test case for createNetworkApplianceStaticRoute
     *
     * Add a static route for an MX or teleworker network.
     *
     */
    public function testCreateNetworkApplianceStaticRoute()
    {
    }

    /**
     * Test case for createNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Add a custom performance class for an MX network.
     *
     */
    public function testCreateNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
    }

    /**
     * Test case for createNetworkApplianceVlan
     *
     * Add a VLAN.
     *
     */
    public function testCreateNetworkApplianceVlan()
    {
    }

    /**
     * Test case for createNetworkCameraQualityRetentionProfile
     *
     * Creates new quality retention profile for this network..
     *
     */
    public function testCreateNetworkCameraQualityRetentionProfile()
    {
    }

    /**
     * Test case for createNetworkFirmwareUpgradesRollback
     *
     * Rollback a Firmware Upgrade For A Network.
     *
     */
    public function testCreateNetworkFirmwareUpgradesRollback()
    {
    }

    /**
     * Test case for createNetworkFloorPlan
     *
     * Upload a floor plan.
     *
     */
    public function testCreateNetworkFloorPlan()
    {
    }

    /**
     * Test case for createNetworkGroupPolicy
     *
     * Create a group policy.
     *
     */
    public function testCreateNetworkGroupPolicy()
    {
    }

    /**
     * Test case for createNetworkMerakiAuthUser
     *
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap).
     *
     */
    public function testCreateNetworkMerakiAuthUser()
    {
    }

    /**
     * Test case for createNetworkMqttBroker
     *
     * Add an MQTT broker.
     *
     */
    public function testCreateNetworkMqttBroker()
    {
    }

    /**
     * Test case for createNetworkPiiRequest
     *
     * Submit a new delete or restrict processing PII request.
     *
     */
    public function testCreateNetworkPiiRequest()
    {
    }

    /**
     * Test case for createNetworkSmBypassActivationLockAttempt
     *
     * Bypass activation lock attempt.
     *
     */
    public function testCreateNetworkSmBypassActivationLockAttempt()
    {
    }

    /**
     * Test case for createNetworkSmTargetGroup
     *
     * Add a target group.
     *
     */
    public function testCreateNetworkSmTargetGroup()
    {
    }

    /**
     * Test case for createNetworkSwitchAccessPolicy
     *
     * Create an access policy for a switch network.
     *
     */
    public function testCreateNetworkSwitchAccessPolicy()
    {
    }

    /**
     * Test case for createNetworkSwitchLinkAggregation
     *
     * Create a link aggregation group.
     *
     */
    public function testCreateNetworkSwitchLinkAggregation()
    {
    }

    /**
     * Test case for createNetworkSwitchPortSchedule
     *
     * Add a switch port schedule.
     *
     */
    public function testCreateNetworkSwitchPortSchedule()
    {
    }

    /**
     * Test case for createNetworkSwitchQosRule
     *
     * Add a quality of service rule.
     *
     */
    public function testCreateNetworkSwitchQosRule()
    {
    }

    /**
     * Test case for createNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Create a multicast rendezvous point.
     *
     */
    public function testCreateNetworkSwitchRoutingMulticastRendezvousPoint()
    {
    }

    /**
     * Test case for createNetworkSwitchStack
     *
     * Create a stack.
     *
     */
    public function testCreateNetworkSwitchStack()
    {
    }

    /**
     * Test case for createNetworkSwitchStackRoutingInterface
     *
     * Create a layer 3 interface for a switch stack.
     *
     */
    public function testCreateNetworkSwitchStackRoutingInterface()
    {
    }

    /**
     * Test case for createNetworkSwitchStackRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch stack.
     *
     */
    public function testCreateNetworkSwitchStackRoutingStaticRoute()
    {
    }

    /**
     * Test case for createNetworkWebhooksHttpServer
     *
     * Add an HTTP server to a network.
     *
     */
    public function testCreateNetworkWebhooksHttpServer()
    {
    }

    /**
     * Test case for createNetworkWebhooksWebhookTest
     *
     * Send a test webhook for a network.
     *
     */
    public function testCreateNetworkWebhooksWebhookTest()
    {
    }

    /**
     * Test case for createNetworkWirelessRfProfile
     *
     * Creates new RF profile for this network.
     *
     */
    public function testCreateNetworkWirelessRfProfile()
    {
    }

    /**
     * Test case for createNetworkWirelessSsidIdentityPsk
     *
     * Create an Identity PSK.
     *
     */
    public function testCreateNetworkWirelessSsidIdentityPsk()
    {
    }

    /**
     * Test case for createOrganization
     *
     * Create a new organization.
     *
     */
    public function testCreateOrganization()
    {
    }

    /**
     * Test case for createOrganizationActionBatch
     *
     * Create an action batch.
     *
     */
    public function testCreateOrganizationActionBatch()
    {
    }

    /**
     * Test case for createOrganizationAdmin
     *
     * Create a new dashboard administrator.
     *
     */
    public function testCreateOrganizationAdmin()
    {
    }

    /**
     * Test case for createOrganizationBrandingPolicy
     *
     * Add a new branding policy to an organization.
     *
     */
    public function testCreateOrganizationBrandingPolicy()
    {
    }

    /**
     * Test case for createOrganizationConfigTemplate
     *
     * Create a new configuration template.
     *
     */
    public function testCreateOrganizationConfigTemplate()
    {
    }

    /**
     * Test case for createOrganizationInsightMonitoredMediaServer
     *
     * Add a media server to be monitored for this organization.
     *
     */
    public function testCreateOrganizationInsightMonitoredMediaServer()
    {
    }

    /**
     * Test case for createOrganizationNetwork
     *
     * Create a network.
     *
     */
    public function testCreateOrganizationNetwork()
    {
    }

    /**
     * Test case for createOrganizationSamlIdp
     *
     * Create a SAML IdP for your organization..
     *
     */
    public function testCreateOrganizationSamlIdp()
    {
    }

    /**
     * Test case for createOrganizationSamlRole
     *
     * Create a SAML role.
     *
     */
    public function testCreateOrganizationSamlRole()
    {
    }

    /**
     * Test case for deleteDeviceSwitchRoutingInterface
     *
     * Delete a layer 3 interface from the switch.
     *
     */
    public function testDeleteDeviceSwitchRoutingInterface()
    {
    }

    /**
     * Test case for deleteDeviceSwitchRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch.
     *
     */
    public function testDeleteDeviceSwitchRoutingStaticRoute()
    {
    }

    /**
     * Test case for deleteNetwork
     *
     * Delete a network.
     *
     */
    public function testDeleteNetwork()
    {
    }

    /**
     * Test case for deleteNetworkApplianceStaticRoute
     *
     * Delete a static route from an MX or teleworker network.
     *
     */
    public function testDeleteNetworkApplianceStaticRoute()
    {
    }

    /**
     * Test case for deleteNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Delete a custom performance class from an MX network.
     *
     */
    public function testDeleteNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
    }

    /**
     * Test case for deleteNetworkApplianceVlan
     *
     * Delete a VLAN from a network.
     *
     */
    public function testDeleteNetworkApplianceVlan()
    {
    }

    /**
     * Test case for deleteNetworkCameraQualityRetentionProfile
     *
     * Delete an existing quality retention profile for this network..
     *
     */
    public function testDeleteNetworkCameraQualityRetentionProfile()
    {
    }

    /**
     * Test case for deleteNetworkFloorPlan
     *
     * Destroy a floor plan.
     *
     */
    public function testDeleteNetworkFloorPlan()
    {
    }

    /**
     * Test case for deleteNetworkGroupPolicy
     *
     * Delete a group policy.
     *
     */
    public function testDeleteNetworkGroupPolicy()
    {
    }

    /**
     * Test case for deleteNetworkMerakiAuthUser
     *
     * Deauthorize a user.
     *
     */
    public function testDeleteNetworkMerakiAuthUser()
    {
    }

    /**
     * Test case for deleteNetworkMqttBroker
     *
     * Delete an MQTT broker.
     *
     */
    public function testDeleteNetworkMqttBroker()
    {
    }

    /**
     * Test case for deleteNetworkPiiRequest
     *
     * Delete a restrict processing PII request.
     *
     */
    public function testDeleteNetworkPiiRequest()
    {
    }

    /**
     * Test case for deleteNetworkSmTargetGroup
     *
     * Delete a target group from a network.
     *
     */
    public function testDeleteNetworkSmTargetGroup()
    {
    }

    /**
     * Test case for deleteNetworkSmUserAccessDevice
     *
     * Delete a User Access Device.
     *
     */
    public function testDeleteNetworkSmUserAccessDevice()
    {
    }

    /**
     * Test case for deleteNetworkSwitchAccessPolicy
     *
     * Delete an access policy for a switch network.
     *
     */
    public function testDeleteNetworkSwitchAccessPolicy()
    {
    }

    /**
     * Test case for deleteNetworkSwitchLinkAggregation
     *
     * Split a link aggregation group into separate ports.
     *
     */
    public function testDeleteNetworkSwitchLinkAggregation()
    {
    }

    /**
     * Test case for deleteNetworkSwitchPortSchedule
     *
     * Delete a switch port schedule.
     *
     */
    public function testDeleteNetworkSwitchPortSchedule()
    {
    }

    /**
     * Test case for deleteNetworkSwitchQosRule
     *
     * Delete a quality of service rule.
     *
     */
    public function testDeleteNetworkSwitchQosRule()
    {
    }

    /**
     * Test case for deleteNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Delete a multicast rendezvous point.
     *
     */
    public function testDeleteNetworkSwitchRoutingMulticastRendezvousPoint()
    {
    }

    /**
     * Test case for deleteNetworkSwitchStack
     *
     * Delete a stack.
     *
     */
    public function testDeleteNetworkSwitchStack()
    {
    }

    /**
     * Test case for deleteNetworkSwitchStackRoutingInterface
     *
     * Delete a layer 3 interface from a switch stack.
     *
     */
    public function testDeleteNetworkSwitchStackRoutingInterface()
    {
    }

    /**
     * Test case for deleteNetworkSwitchStackRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch stack.
     *
     */
    public function testDeleteNetworkSwitchStackRoutingStaticRoute()
    {
    }

    /**
     * Test case for deleteNetworkWebhooksHttpServer
     *
     * Delete an HTTP server from a network.
     *
     */
    public function testDeleteNetworkWebhooksHttpServer()
    {
    }

    /**
     * Test case for deleteNetworkWirelessRfProfile
     *
     * Delete a RF Profile.
     *
     */
    public function testDeleteNetworkWirelessRfProfile()
    {
    }

    /**
     * Test case for deleteNetworkWirelessSsidIdentityPsk
     *
     * Delete an Identity PSK.
     *
     */
    public function testDeleteNetworkWirelessSsidIdentityPsk()
    {
    }

    /**
     * Test case for deleteOrganization
     *
     * Delete an organization.
     *
     */
    public function testDeleteOrganization()
    {
    }

    /**
     * Test case for deleteOrganizationActionBatch
     *
     * Delete an action batch.
     *
     */
    public function testDeleteOrganizationActionBatch()
    {
    }

    /**
     * Test case for deleteOrganizationAdmin
     *
     * Revoke all access for a dashboard administrator within this organization.
     *
     */
    public function testDeleteOrganizationAdmin()
    {
    }

    /**
     * Test case for deleteOrganizationBrandingPolicy
     *
     * Delete a branding policy.
     *
     */
    public function testDeleteOrganizationBrandingPolicy()
    {
    }

    /**
     * Test case for deleteOrganizationConfigTemplate
     *
     * Remove a configuration template.
     *
     */
    public function testDeleteOrganizationConfigTemplate()
    {
    }

    /**
     * Test case for deleteOrganizationInsightMonitoredMediaServer
     *
     * Delete a monitored media server from this organization.
     *
     */
    public function testDeleteOrganizationInsightMonitoredMediaServer()
    {
    }

    /**
     * Test case for deleteOrganizationSamlIdp
     *
     * Remove a SAML IdP in your organization..
     *
     */
    public function testDeleteOrganizationSamlIdp()
    {
    }

    /**
     * Test case for deleteOrganizationSamlRole
     *
     * Remove a SAML role.
     *
     */
    public function testDeleteOrganizationSamlRole()
    {
    }

    /**
     * Test case for getDevice
     *
     * Return a single device.
     *
     */
    public function testGetDevice()
    {
    }

    /**
     * Test case for getDeviceCameraQualityAndRetention
     *
     * Returns quality and retention settings for the given camera.
     *
     */
    public function testGetDeviceCameraQualityAndRetention()
    {
    }

    /**
     * Test case for getDeviceCameraSense
     *
     * Returns sense settings for a given camera.
     *
     */
    public function testGetDeviceCameraSense()
    {
    }

    /**
     * Test case for getDeviceCameraSenseObjectDetectionModels
     *
     * Returns the MV Sense object detection model list for the given camera.
     *
     */
    public function testGetDeviceCameraSenseObjectDetectionModels()
    {
    }

    /**
     * Test case for getDeviceCameraVideoLink
     *
     * Returns video link to the specified camera.
     *
     */
    public function testGetDeviceCameraVideoLink()
    {
    }

    /**
     * Test case for getDeviceCameraVideoSettings
     *
     * Returns video settings for the given camera.
     *
     */
    public function testGetDeviceCameraVideoSettings()
    {
    }

    /**
     * Test case for getDeviceCellularGatewayLan
     *
     * Show the LAN Settings of a MG.
     *
     */
    public function testGetDeviceCellularGatewayLan()
    {
    }

    /**
     * Test case for getDeviceCellularGatewayPortForwardingRules
     *
     * Returns the port forwarding rules for a single MG..
     *
     */
    public function testGetDeviceCellularGatewayPortForwardingRules()
    {
    }

    /**
     * Test case for getDeviceManagementInterface
     *
     * Return the management interface settings for a device.
     *
     */
    public function testGetDeviceManagementInterface()
    {
    }

    /**
     * Test case for getDeviceSwitchPort
     *
     * Return a switch port.
     *
     */
    public function testGetDeviceSwitchPort()
    {
    }

    /**
     * Test case for getDeviceSwitchPorts
     *
     * List the switch ports for a switch.
     *
     */
    public function testGetDeviceSwitchPorts()
    {
    }

    /**
     * Test case for getDeviceSwitchRoutingInterface
     *
     * Return a layer 3 interface for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterface()
    {
    }

    /**
     * Test case for getDeviceSwitchRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterfaceDhcp()
    {
    }

    /**
     * Test case for getDeviceSwitchRoutingInterfaces
     *
     * List layer 3 interfaces for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterfaces()
    {
    }

    /**
     * Test case for getDeviceSwitchRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingStaticRoute()
    {
    }

    /**
     * Test case for getDeviceSwitchRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingStaticRoutes()
    {
    }

    /**
     * Test case for getDeviceSwitchWarmSpare
     *
     * Return warm spare configuration for a switch.
     *
     */
    public function testGetDeviceSwitchWarmSpare()
    {
    }

    /**
     * Test case for getDeviceWirelessBluetoothSettings
     *
     * Return the bluetooth settings for a wireless device.
     *
     */
    public function testGetDeviceWirelessBluetoothSettings()
    {
    }

    /**
     * Test case for getDeviceWirelessRadioSettings
     *
     * Return the radio settings of a device.
     *
     */
    public function testGetDeviceWirelessRadioSettings()
    {
    }

    /**
     * Test case for getNetwork
     *
     * Return a network.
     *
     */
    public function testGetNetwork()
    {
    }

    /**
     * Test case for getNetworkAlertsSettings
     *
     * Return the alert configuration for this network.
     *
     */
    public function testGetNetworkAlertsSettings()
    {
    }

    /**
     * Test case for getNetworkApplianceConnectivityMonitoringDestinations
     *
     * Return the connectivity testing destinations for an MX network.
     *
     */
    public function testGetNetworkApplianceConnectivityMonitoringDestinations()
    {
    }

    /**
     * Test case for getNetworkApplianceContentFiltering
     *
     * Return the content filtering settings for an MX network.
     *
     */
    public function testGetNetworkApplianceContentFiltering()
    {
    }

    /**
     * Test case for getNetworkApplianceContentFilteringCategories
     *
     * List all available content filtering categories for an MX network.
     *
     */
    public function testGetNetworkApplianceContentFilteringCategories()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallCellularFirewallRules
     *
     * Return the cellular firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallCellularFirewallRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledService
     *
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledService()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledServices
     *
     * List the appliance services and their accessibility rules.
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledServices()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallInboundFirewallRules
     *
     * Return the inbound firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallInboundFirewallRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL3FirewallRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRules
     *
     * List the MX L7 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories
     *
     * Return the L7 firewall application categories and their associated applications for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRulesApplicationCategories()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToManyNatRules
     *
     * Return the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToManyNatRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToOneNatRules
     *
     * Return the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToOneNatRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallPortForwardingRules
     *
     * Return the port forwarding rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallPortForwardingRules()
    {
    }

    /**
     * Test case for getNetworkAppliancePort
     *
     * Return per-port VLAN settings for a single MX port..
     *
     */
    public function testGetNetworkAppliancePort()
    {
    }

    /**
     * Test case for getNetworkAppliancePorts
     *
     * List per-port VLAN settings for all ports of a MX..
     *
     */
    public function testGetNetworkAppliancePorts()
    {
    }

    /**
     * Test case for getNetworkApplianceSecurityIntrusion
     *
     * Returns all supported intrusion settings for an MX network.
     *
     */
    public function testGetNetworkApplianceSecurityIntrusion()
    {
    }

    /**
     * Test case for getNetworkApplianceSecurityMalware
     *
     * Returns all supported malware settings for an MX network.
     *
     */
    public function testGetNetworkApplianceSecurityMalware()
    {
    }

    /**
     * Test case for getNetworkApplianceSettings
     *
     * Return the appliance settings for a network.
     *
     */
    public function testGetNetworkApplianceSettings()
    {
    }

    /**
     * Test case for getNetworkApplianceSingleLan
     *
     * Return single LAN configuration.
     *
     */
    public function testGetNetworkApplianceSingleLan()
    {
    }

    /**
     * Test case for getNetworkApplianceStaticRoute
     *
     * Return a static route for an MX or teleworker network.
     *
     */
    public function testGetNetworkApplianceStaticRoute()
    {
    }

    /**
     * Test case for getNetworkApplianceStaticRoutes
     *
     * List the static routes for an MX or teleworker network.
     *
     */
    public function testGetNetworkApplianceStaticRoutes()
    {
    }

    /**
     * Test case for getNetworkApplianceTrafficShaping
     *
     * Display the traffic shaping settings for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShaping()
    {
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Return a custom performance class for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingCustomPerformanceClasses
     *
     * List all custom performance classes for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingCustomPerformanceClasses()
    {
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingRules
     *
     * Display the traffic shaping settings rules for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingRules()
    {
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingUplinkBandwidth
     *
     * Returns the uplink bandwidth settings for your MX network..
     *
     */
    public function testGetNetworkApplianceTrafficShapingUplinkBandwidth()
    {
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingUplinkSelection
     *
     * Show uplink selection settings for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingUplinkSelection()
    {
    }

    /**
     * Test case for getNetworkApplianceVlan
     *
     * Return a VLAN.
     *
     */
    public function testGetNetworkApplianceVlan()
    {
    }

    /**
     * Test case for getNetworkApplianceVlans
     *
     * List the VLANs for an MX network.
     *
     */
    public function testGetNetworkApplianceVlans()
    {
    }

    /**
     * Test case for getNetworkApplianceVlansSettings
     *
     * Returns the enabled status of VLANs for the network.
     *
     */
    public function testGetNetworkApplianceVlansSettings()
    {
    }

    /**
     * Test case for getNetworkApplianceVpnBgp
     *
     * Return a Hub BGP Configuration.
     *
     */
    public function testGetNetworkApplianceVpnBgp()
    {
    }

    /**
     * Test case for getNetworkApplianceVpnSiteToSiteVpn
     *
     * Return the site-to-site VPN settings of a network.
     *
     */
    public function testGetNetworkApplianceVpnSiteToSiteVpn()
    {
    }

    /**
     * Test case for getNetworkApplianceWarmSpare
     *
     * Return MX warm spare settings.
     *
     */
    public function testGetNetworkApplianceWarmSpare()
    {
    }

    /**
     * Test case for getNetworkCameraQualityRetentionProfile
     *
     * Retrieve a single quality retention profile.
     *
     */
    public function testGetNetworkCameraQualityRetentionProfile()
    {
    }

    /**
     * Test case for getNetworkCameraQualityRetentionProfiles
     *
     * List the quality retention profiles for this network.
     *
     */
    public function testGetNetworkCameraQualityRetentionProfiles()
    {
    }

    /**
     * Test case for getNetworkCameraSchedules
     *
     * Returns a list of all camera recording schedules..
     *
     */
    public function testGetNetworkCameraSchedules()
    {
    }

    /**
     * Test case for getNetworkCellularGatewayConnectivityMonitoringDestinations
     *
     * Return the connectivity testing destinations for an MG network.
     *
     */
    public function testGetNetworkCellularGatewayConnectivityMonitoringDestinations()
    {
    }

    /**
     * Test case for getNetworkCellularGatewayDhcp
     *
     * List common DHCP settings of MGs.
     *
     */
    public function testGetNetworkCellularGatewayDhcp()
    {
    }

    /**
     * Test case for getNetworkCellularGatewaySubnetPool
     *
     * Return the subnet pool and mask configured for MGs in the network..
     *
     */
    public function testGetNetworkCellularGatewaySubnetPool()
    {
    }

    /**
     * Test case for getNetworkCellularGatewayUplink
     *
     * Returns the uplink settings for your MG network..
     *
     */
    public function testGetNetworkCellularGatewayUplink()
    {
    }

    /**
     * Test case for getNetworkClientPolicy
     *
     * Return the policy assigned to a client on the network.
     *
     */
    public function testGetNetworkClientPolicy()
    {
    }

    /**
     * Test case for getNetworkClientSplashAuthorizationStatus
     *
     * Return the splash authorization for a client, for each SSID they've associated with through splash.
     *
     */
    public function testGetNetworkClientSplashAuthorizationStatus()
    {
    }

    /**
     * Test case for getNetworkDevices
     *
     * List the devices in a network.
     *
     */
    public function testGetNetworkDevices()
    {
    }

    /**
     * Test case for getNetworkFirmwareUpgrades
     *
     * Get firmware upgrade information for a network.
     *
     */
    public function testGetNetworkFirmwareUpgrades()
    {
    }

    /**
     * Test case for getNetworkFloorPlan
     *
     * Find a floor plan by ID.
     *
     */
    public function testGetNetworkFloorPlan()
    {
    }

    /**
     * Test case for getNetworkFloorPlans
     *
     * List the floor plans that belong to your network.
     *
     */
    public function testGetNetworkFloorPlans()
    {
    }

    /**
     * Test case for getNetworkGroupPolicies
     *
     * List the group policies in a network.
     *
     */
    public function testGetNetworkGroupPolicies()
    {
    }

    /**
     * Test case for getNetworkGroupPolicy
     *
     * Display a group policy.
     *
     */
    public function testGetNetworkGroupPolicy()
    {
    }

    /**
     * Test case for getNetworkMerakiAuthUser
     *
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user.
     *
     */
    public function testGetNetworkMerakiAuthUser()
    {
    }

    /**
     * Test case for getNetworkMerakiAuthUsers
     *
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network).
     *
     */
    public function testGetNetworkMerakiAuthUsers()
    {
    }

    /**
     * Test case for getNetworkMqttBroker
     *
     * Return an MQTT broker.
     *
     */
    public function testGetNetworkMqttBroker()
    {
    }

    /**
     * Test case for getNetworkMqttBrokers
     *
     * List the MQTT brokers for this network.
     *
     */
    public function testGetNetworkMqttBrokers()
    {
    }

    /**
     * Test case for getNetworkNetflow
     *
     * Return the NetFlow traffic reporting settings for a network.
     *
     */
    public function testGetNetworkNetflow()
    {
    }

    /**
     * Test case for getNetworkPiiPiiKeys
     *
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier.
     *
     */
    public function testGetNetworkPiiPiiKeys()
    {
    }

    /**
     * Test case for getNetworkPiiRequest
     *
     * Return a PII request.
     *
     */
    public function testGetNetworkPiiRequest()
    {
    }

    /**
     * Test case for getNetworkPiiRequests
     *
     * List the PII requests for this network or organization.
     *
     */
    public function testGetNetworkPiiRequests()
    {
    }

    /**
     * Test case for getNetworkPiiSmDevicesForKey
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier.
     *
     */
    public function testGetNetworkPiiSmDevicesForKey()
    {
    }

    /**
     * Test case for getNetworkPiiSmOwnersForKey
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier.
     *
     */
    public function testGetNetworkPiiSmOwnersForKey()
    {
    }

    /**
     * Test case for getNetworkSettings
     *
     * Return the settings for a network.
     *
     */
    public function testGetNetworkSettings()
    {
    }

    /**
     * Test case for getNetworkSmBypassActivationLockAttempt
     *
     * Bypass activation lock attempt status.
     *
     */
    public function testGetNetworkSmBypassActivationLockAttempt()
    {
    }

    /**
     * Test case for getNetworkSmDeviceCerts
     *
     * List the certs on a device.
     *
     */
    public function testGetNetworkSmDeviceCerts()
    {
    }

    /**
     * Test case for getNetworkSmDeviceDeviceProfiles
     *
     * Get the profiles associated with a device.
     *
     */
    public function testGetNetworkSmDeviceDeviceProfiles()
    {
    }

    /**
     * Test case for getNetworkSmDeviceNetworkAdapters
     *
     * List the network adapters of a device.
     *
     */
    public function testGetNetworkSmDeviceNetworkAdapters()
    {
    }

    /**
     * Test case for getNetworkSmDeviceRestrictions
     *
     * List the restrictions on a device.
     *
     */
    public function testGetNetworkSmDeviceRestrictions()
    {
    }

    /**
     * Test case for getNetworkSmDeviceSecurityCenters
     *
     * List the security centers on a device.
     *
     */
    public function testGetNetworkSmDeviceSecurityCenters()
    {
    }

    /**
     * Test case for getNetworkSmDeviceSoftwares
     *
     * Get a list of softwares associated with a device.
     *
     */
    public function testGetNetworkSmDeviceSoftwares()
    {
    }

    /**
     * Test case for getNetworkSmDeviceWlanLists
     *
     * List the saved SSID names on a device.
     *
     */
    public function testGetNetworkSmDeviceWlanLists()
    {
    }

    /**
     * Test case for getNetworkSmDevices
     *
     * List the devices enrolled in an SM network with various specified fields and filters.
     *
     */
    public function testGetNetworkSmDevices()
    {
    }

    /**
     * Test case for getNetworkSmProfiles
     *
     * List all profiles in a network.
     *
     */
    public function testGetNetworkSmProfiles()
    {
    }

    /**
     * Test case for getNetworkSmTargetGroup
     *
     * Return a target group.
     *
     */
    public function testGetNetworkSmTargetGroup()
    {
    }

    /**
     * Test case for getNetworkSmTargetGroups
     *
     * List the target groups in this network.
     *
     */
    public function testGetNetworkSmTargetGroups()
    {
    }

    /**
     * Test case for getNetworkSmUserAccessDevices
     *
     * List User Access Devices and its Trusted Access Connections.
     *
     */
    public function testGetNetworkSmUserAccessDevices()
    {
    }

    /**
     * Test case for getNetworkSmUserDeviceProfiles
     *
     * Get the profiles associated with a user.
     *
     */
    public function testGetNetworkSmUserDeviceProfiles()
    {
    }

    /**
     * Test case for getNetworkSmUserSoftwares
     *
     * Get a list of softwares associated with a user.
     *
     */
    public function testGetNetworkSmUserSoftwares()
    {
    }

    /**
     * Test case for getNetworkSmUsers
     *
     * List the owners in an SM network with various specified fields and filters.
     *
     */
    public function testGetNetworkSmUsers()
    {
    }

    /**
     * Test case for getNetworkSnmp
     *
     * Return the SNMP settings for a network.
     *
     */
    public function testGetNetworkSnmp()
    {
    }

    /**
     * Test case for getNetworkSwitchAccessControlLists
     *
     * Return the access control lists for a MS network.
     *
     */
    public function testGetNetworkSwitchAccessControlLists()
    {
    }

    /**
     * Test case for getNetworkSwitchAccessPolicies
     *
     * List the access policies for a switch network.
     *
     */
    public function testGetNetworkSwitchAccessPolicies()
    {
    }

    /**
     * Test case for getNetworkSwitchAccessPolicy
     *
     * Return a specific access policy for a switch network.
     *
     */
    public function testGetNetworkSwitchAccessPolicy()
    {
    }

    /**
     * Test case for getNetworkSwitchAlternateManagementInterface
     *
     * Return the switch alternate management interface for the network.
     *
     */
    public function testGetNetworkSwitchAlternateManagementInterface()
    {
    }

    /**
     * Test case for getNetworkSwitchDhcpServerPolicy
     *
     * Return the DHCP server policy.
     *
     */
    public function testGetNetworkSwitchDhcpServerPolicy()
    {
    }

    /**
     * Test case for getNetworkSwitchDscpToCosMappings
     *
     * Return the DSCP to CoS mappings.
     *
     */
    public function testGetNetworkSwitchDscpToCosMappings()
    {
    }

    /**
     * Test case for getNetworkSwitchLinkAggregations
     *
     * List link aggregation groups.
     *
     */
    public function testGetNetworkSwitchLinkAggregations()
    {
    }

    /**
     * Test case for getNetworkSwitchMtu
     *
     * Return the MTU configuration.
     *
     */
    public function testGetNetworkSwitchMtu()
    {
    }

    /**
     * Test case for getNetworkSwitchPortSchedules
     *
     * List switch port schedules.
     *
     */
    public function testGetNetworkSwitchPortSchedules()
    {
    }

    /**
     * Test case for getNetworkSwitchQosRule
     *
     * Return a quality of service rule.
     *
     */
    public function testGetNetworkSwitchQosRule()
    {
    }

    /**
     * Test case for getNetworkSwitchQosRules
     *
     * List quality of service rules.
     *
     */
    public function testGetNetworkSwitchQosRules()
    {
    }

    /**
     * Test case for getNetworkSwitchQosRulesOrder
     *
     * Return the quality of service rule IDs by order in which they will be processed by the switch.
     *
     */
    public function testGetNetworkSwitchQosRulesOrder()
    {
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticast
     *
     * Return multicast settings for a network.
     *
     */
    public function testGetNetworkSwitchRoutingMulticast()
    {
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Return a multicast rendezvous point.
     *
     */
    public function testGetNetworkSwitchRoutingMulticastRendezvousPoint()
    {
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticastRendezvousPoints
     *
     * List multicast rendezvous points.
     *
     */
    public function testGetNetworkSwitchRoutingMulticastRendezvousPoints()
    {
    }

    /**
     * Test case for getNetworkSwitchRoutingOspf
     *
     * Return layer 3 OSPF routing configuration.
     *
     */
    public function testGetNetworkSwitchRoutingOspf()
    {
    }

    /**
     * Test case for getNetworkSwitchSettings
     *
     * Returns the switch network settings.
     *
     */
    public function testGetNetworkSwitchSettings()
    {
    }

    /**
     * Test case for getNetworkSwitchStack
     *
     * Show a switch stack.
     *
     */
    public function testGetNetworkSwitchStack()
    {
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterface
     *
     * Return a layer 3 interface from a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterface()
    {
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterfaceDhcp()
    {
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterfaces
     *
     * List layer 3 interfaces for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterfaces()
    {
    }

    /**
     * Test case for getNetworkSwitchStackRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingStaticRoute()
    {
    }

    /**
     * Test case for getNetworkSwitchStackRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingStaticRoutes()
    {
    }

    /**
     * Test case for getNetworkSwitchStacks
     *
     * List the switch stacks in a network.
     *
     */
    public function testGetNetworkSwitchStacks()
    {
    }

    /**
     * Test case for getNetworkSwitchStormControl
     *
     * Return the storm control configuration for a switch network.
     *
     */
    public function testGetNetworkSwitchStormControl()
    {
    }

    /**
     * Test case for getNetworkSwitchStp
     *
     * Returns STP settings.
     *
     */
    public function testGetNetworkSwitchStp()
    {
    }

    /**
     * Test case for getNetworkSyslogServers
     *
     * List the syslog servers for a network.
     *
     */
    public function testGetNetworkSyslogServers()
    {
    }

    /**
     * Test case for getNetworkTrafficAnalysis
     *
     * Return the traffic analysis settings for a network.
     *
     */
    public function testGetNetworkTrafficAnalysis()
    {
    }

    /**
     * Test case for getNetworkTrafficShapingApplicationCategories
     *
     * Returns the application categories for traffic shaping rules..
     *
     */
    public function testGetNetworkTrafficShapingApplicationCategories()
    {
    }

    /**
     * Test case for getNetworkTrafficShapingDscpTaggingOptions
     *
     * Returns the available DSCP tagging options for your traffic shaping rules..
     *
     */
    public function testGetNetworkTrafficShapingDscpTaggingOptions()
    {
    }

    /**
     * Test case for getNetworkWebhooksHttpServer
     *
     * Return an HTTP server for a network.
     *
     */
    public function testGetNetworkWebhooksHttpServer()
    {
    }

    /**
     * Test case for getNetworkWebhooksHttpServers
     *
     * List the HTTP servers for a network.
     *
     */
    public function testGetNetworkWebhooksHttpServers()
    {
    }

    /**
     * Test case for getNetworkWebhooksWebhookTest
     *
     * Return the status of a webhook test for a network.
     *
     */
    public function testGetNetworkWebhooksWebhookTest()
    {
    }

    /**
     * Test case for getNetworkWirelessAlternateManagementInterface
     *
     * Return alternate management interface and devices with IP assigned.
     *
     */
    public function testGetNetworkWirelessAlternateManagementInterface()
    {
    }

    /**
     * Test case for getNetworkWirelessBilling
     *
     * Return the billing settings of this network.
     *
     */
    public function testGetNetworkWirelessBilling()
    {
    }

    /**
     * Test case for getNetworkWirelessBluetoothSettings
     *
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network..
     *
     */
    public function testGetNetworkWirelessBluetoothSettings()
    {
    }

    /**
     * Test case for getNetworkWirelessRfProfile
     *
     * Return a RF profile.
     *
     */
    public function testGetNetworkWirelessRfProfile()
    {
    }

    /**
     * Test case for getNetworkWirelessRfProfiles
     *
     * List the non-basic RF profiles for this network.
     *
     */
    public function testGetNetworkWirelessRfProfiles()
    {
    }

    /**
     * Test case for getNetworkWirelessSettings
     *
     * Return the wireless settings for a network.
     *
     */
    public function testGetNetworkWirelessSettings()
    {
    }

    /**
     * Test case for getNetworkWirelessSsid
     *
     * Return a single MR SSID.
     *
     */
    public function testGetNetworkWirelessSsid()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidBonjourForwarding
     *
     * List the Bonjour forwarding setting and rules for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidBonjourForwarding()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidDeviceTypeGroupPolicies
     *
     * List the device type group policies for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidDeviceTypeGroupPolicies()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL3FirewallRules()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Return the L7 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL7FirewallRules()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidIdentityPsk
     *
     * Return an Identity PSK.
     *
     */
    public function testGetNetworkWirelessSsidIdentityPsk()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidIdentityPsks
     *
     * List all Identity PSKs in a wireless network.
     *
     */
    public function testGetNetworkWirelessSsidIdentityPsks()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidSplashSettings
     *
     * Display the splash page settings for the given SSID.
     *
     */
    public function testGetNetworkWirelessSsidSplashSettings()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidTrafficShapingRules
     *
     * Display the traffic shaping settings for a SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidTrafficShapingRules()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidVpn
     *
     * List the VPN settings for the SSID..
     *
     */
    public function testGetNetworkWirelessSsidVpn()
    {
    }

    /**
     * Test case for getNetworkWirelessSsids
     *
     * List the MR SSIDs in a network.
     *
     */
    public function testGetNetworkWirelessSsids()
    {
    }

    /**
     * Test case for getOrganization
     *
     * Return an organization.
     *
     */
    public function testGetOrganization()
    {
    }

    /**
     * Test case for getOrganizationActionBatch
     *
     * Return an action batch.
     *
     */
    public function testGetOrganizationActionBatch()
    {
    }

    /**
     * Test case for getOrganizationActionBatches
     *
     * Return the list of action batches in the organization.
     *
     */
    public function testGetOrganizationActionBatches()
    {
    }

    /**
     * Test case for getOrganizationAdmins
     *
     * List the dashboard administrators in this organization.
     *
     */
    public function testGetOrganizationAdmins()
    {
    }

    /**
     * Test case for getOrganizationApplianceSecurityIntrusion
     *
     * Returns all supported intrusion settings for an organization.
     *
     */
    public function testGetOrganizationApplianceSecurityIntrusion()
    {
    }

    /**
     * Test case for getOrganizationApplianceVpnThirdPartyVPNPeers
     *
     * Return the third party VPN peers for an organization.
     *
     */
    public function testGetOrganizationApplianceVpnThirdPartyVPNPeers()
    {
    }

    /**
     * Test case for getOrganizationApplianceVpnVpnFirewallRules
     *
     * Return the firewall rules for an organization's site-to-site VPN.
     *
     */
    public function testGetOrganizationApplianceVpnVpnFirewallRules()
    {
    }

    /**
     * Test case for getOrganizationBrandingPolicies
     *
     * List the branding policies of an organization.
     *
     */
    public function testGetOrganizationBrandingPolicies()
    {
    }

    /**
     * Test case for getOrganizationBrandingPoliciesPriorities
     *
     * Return the branding policy IDs of an organization in priority order.
     *
     */
    public function testGetOrganizationBrandingPoliciesPriorities()
    {
    }

    /**
     * Test case for getOrganizationBrandingPolicy
     *
     * Return a branding policy.
     *
     */
    public function testGetOrganizationBrandingPolicy()
    {
    }

    /**
     * Test case for getOrganizationConfigTemplate
     *
     * Return a single configuration template.
     *
     */
    public function testGetOrganizationConfigTemplate()
    {
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfilePort
     *
     * Return a switch profile port.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfilePort()
    {
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfilePorts
     *
     * Return all the ports of a switch profile.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfilePorts()
    {
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfiles
     *
     * List the switch profiles for your switch template configuration.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfiles()
    {
    }

    /**
     * Test case for getOrganizationConfigTemplates
     *
     * List the configuration templates for this organization.
     *
     */
    public function testGetOrganizationConfigTemplates()
    {
    }

    /**
     * Test case for getOrganizationDevices
     *
     * List the devices in an organization.
     *
     */
    public function testGetOrganizationDevices()
    {
    }

    /**
     * Test case for getOrganizationInsightApplications
     *
     * List all Insight tracked applications.
     *
     */
    public function testGetOrganizationInsightApplications()
    {
    }

    /**
     * Test case for getOrganizationInsightMonitoredMediaServer
     *
     * Return a monitored media server for this organization.
     *
     */
    public function testGetOrganizationInsightMonitoredMediaServer()
    {
    }

    /**
     * Test case for getOrganizationInsightMonitoredMediaServers
     *
     * List the monitored media servers for this organization.
     *
     */
    public function testGetOrganizationInsightMonitoredMediaServers()
    {
    }

    /**
     * Test case for getOrganizationInventoryDevice
     *
     * Return a single device from the inventory of an organization.
     *
     */
    public function testGetOrganizationInventoryDevice()
    {
    }

    /**
     * Test case for getOrganizationInventoryDevices
     *
     * Return the device inventory for an organization.
     *
     */
    public function testGetOrganizationInventoryDevices()
    {
    }

    /**
     * Test case for getOrganizationLicense
     *
     * Display a license.
     *
     */
    public function testGetOrganizationLicense()
    {
    }

    /**
     * Test case for getOrganizationLicenses
     *
     * List the licenses for an organization.
     *
     */
    public function testGetOrganizationLicenses()
    {
    }

    /**
     * Test case for getOrganizationLoginSecurity
     *
     * Returns the login security settings for an organization..
     *
     */
    public function testGetOrganizationLoginSecurity()
    {
    }

    /**
     * Test case for getOrganizationNetworks
     *
     * List the networks that the user has privileges on in an organization.
     *
     */
    public function testGetOrganizationNetworks()
    {
    }

    /**
     * Test case for getOrganizationSaml
     *
     * Returns the SAML SSO enabled settings for an organization..
     *
     */
    public function testGetOrganizationSaml()
    {
    }

    /**
     * Test case for getOrganizationSamlIdp
     *
     * Get a SAML IdP from your organization..
     *
     */
    public function testGetOrganizationSamlIdp()
    {
    }

    /**
     * Test case for getOrganizationSamlIdps
     *
     * List the SAML IdPs in your organization..
     *
     */
    public function testGetOrganizationSamlIdps()
    {
    }

    /**
     * Test case for getOrganizationSamlRole
     *
     * Return a SAML role.
     *
     */
    public function testGetOrganizationSamlRole()
    {
    }

    /**
     * Test case for getOrganizationSamlRoles
     *
     * List the SAML roles for this organization.
     *
     */
    public function testGetOrganizationSamlRoles()
    {
    }

    /**
     * Test case for getOrganizationSmApnsCert
     *
     * Get the organization's APNS certificate.
     *
     */
    public function testGetOrganizationSmApnsCert()
    {
    }

    /**
     * Test case for getOrganizationSmVppAccount
     *
     * Get a hash containing the unparsed token of the VPP account with the given ID.
     *
     */
    public function testGetOrganizationSmVppAccount()
    {
    }

    /**
     * Test case for getOrganizationSmVppAccounts
     *
     * List the VPP accounts in the organization.
     *
     */
    public function testGetOrganizationSmVppAccounts()
    {
    }

    /**
     * Test case for getOrganizationSnmp
     *
     * Return the SNMP settings for an organization.
     *
     */
    public function testGetOrganizationSnmp()
    {
    }

    /**
     * Test case for getOrganizations
     *
     * List the organizations that the user has privileges on.
     *
     */
    public function testGetOrganizations()
    {
    }

    /**
     * Test case for lockNetworkSmDevices
     *
     * Lock a set of devices.
     *
     */
    public function testLockNetworkSmDevices()
    {
    }

    /**
     * Test case for modifyNetworkSmDevicesTags
     *
     * Add, delete, or update the tags of a set of devices.
     *
     */
    public function testModifyNetworkSmDevicesTags()
    {
    }

    /**
     * Test case for moveNetworkSmDevices
     *
     * Move a set of devices to a new network.
     *
     */
    public function testMoveNetworkSmDevices()
    {
    }

    /**
     * Test case for moveOrganizationLicenses
     *
     * Move licenses to another organization.
     *
     */
    public function testMoveOrganizationLicenses()
    {
    }

    /**
     * Test case for moveOrganizationLicensesSeats
     *
     * Move SM seats to another organization.
     *
     */
    public function testMoveOrganizationLicensesSeats()
    {
    }

    /**
     * Test case for provisionNetworkClients
     *
     * Provisions a client with a name and policy.
     *
     */
    public function testProvisionNetworkClients()
    {
    }

    /**
     * Test case for refreshNetworkSmDeviceDetails
     *
     * Refresh the details of a device.
     *
     */
    public function testRefreshNetworkSmDeviceDetails()
    {
    }

    /**
     * Test case for removeNetworkDevices
     *
     * Remove a single device.
     *
     */
    public function testRemoveNetworkDevices()
    {
    }

    /**
     * Test case for removeNetworkSwitchStack
     *
     * Remove a switch from a stack.
     *
     */
    public function testRemoveNetworkSwitchStack()
    {
    }

    /**
     * Test case for renewOrganizationLicensesSeats
     *
     * Renew SM seats of a license.
     *
     */
    public function testRenewOrganizationLicensesSeats()
    {
    }

    /**
     * Test case for splitNetwork
     *
     * Split a combined network into individual networks for each type of device.
     *
     */
    public function testSplitNetwork()
    {
    }

    /**
     * Test case for swapNetworkApplianceWarmSpare
     *
     * Swap MX primary and warm spare appliances.
     *
     */
    public function testSwapNetworkApplianceWarmSpare()
    {
    }

    /**
     * Test case for unbindNetwork
     *
     * Unbind a network from a template..
     *
     */
    public function testUnbindNetwork()
    {
    }

    /**
     * Test case for unenrollNetworkSmDevice
     *
     * Unenroll a device.
     *
     */
    public function testUnenrollNetworkSmDevice()
    {
    }

    /**
     * Test case for updateDevice
     *
     * Update the attributes of a device.
     *
     */
    public function testUpdateDevice()
    {
    }

    /**
     * Test case for updateDeviceCameraQualityAndRetention
     *
     * Update quality and retention settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraQualityAndRetention()
    {
    }

    /**
     * Test case for updateDeviceCameraSense
     *
     * Update sense settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraSense()
    {
    }

    /**
     * Test case for updateDeviceCameraVideoSettings
     *
     * Update video settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraVideoSettings()
    {
    }

    /**
     * Test case for updateDeviceCellularGatewayLan
     *
     * Update the LAN Settings for a single MG..
     *
     */
    public function testUpdateDeviceCellularGatewayLan()
    {
    }

    /**
     * Test case for updateDeviceCellularGatewayPortForwardingRules
     *
     * Updates the port forwarding rules for a single MG..
     *
     */
    public function testUpdateDeviceCellularGatewayPortForwardingRules()
    {
    }

    /**
     * Test case for updateDeviceManagementInterface
     *
     * Update the management interface settings for a device.
     *
     */
    public function testUpdateDeviceManagementInterface()
    {
    }

    /**
     * Test case for updateDeviceSwitchPort
     *
     * Update a switch port.
     *
     */
    public function testUpdateDeviceSwitchPort()
    {
    }

    /**
     * Test case for updateDeviceSwitchRoutingInterface
     *
     * Update a layer 3 interface for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingInterface()
    {
    }

    /**
     * Test case for updateDeviceSwitchRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingInterfaceDhcp()
    {
    }

    /**
     * Test case for updateDeviceSwitchRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingStaticRoute()
    {
    }

    /**
     * Test case for updateDeviceSwitchWarmSpare
     *
     * Update warm spare configuration for a switch.
     *
     */
    public function testUpdateDeviceSwitchWarmSpare()
    {
    }

    /**
     * Test case for updateDeviceWirelessBluetoothSettings
     *
     * Update the bluetooth settings for a wireless device.
     *
     */
    public function testUpdateDeviceWirelessBluetoothSettings()
    {
    }

    /**
     * Test case for updateDeviceWirelessRadioSettings
     *
     * Update the radio settings of a device.
     *
     */
    public function testUpdateDeviceWirelessRadioSettings()
    {
    }

    /**
     * Test case for updateNetwork
     *
     * Update a network.
     *
     */
    public function testUpdateNetwork()
    {
    }

    /**
     * Test case for updateNetworkAlertsSettings
     *
     * Update the alert configuration for this network.
     *
     */
    public function testUpdateNetworkAlertsSettings()
    {
    }

    /**
     * Test case for updateNetworkApplianceConnectivityMonitoringDestinations
     *
     * Update the connectivity testing destinations for an MX network.
     *
     */
    public function testUpdateNetworkApplianceConnectivityMonitoringDestinations()
    {
    }

    /**
     * Test case for updateNetworkApplianceContentFiltering
     *
     * Update the content filtering settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceContentFiltering()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallCellularFirewallRules
     *
     * Update the cellular firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallCellularFirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallFirewalledService
     *
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testUpdateNetworkApplianceFirewallFirewalledService()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallInboundFirewallRules
     *
     * Update the inbound firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallInboundFirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL3FirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallL7FirewallRules
     *
     * Update the MX L7 firewall rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL7FirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToManyNatRules
     *
     * Set the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToManyNatRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToOneNatRules
     *
     * Set the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToOneNatRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallPortForwardingRules
     *
     * Update the port forwarding rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallPortForwardingRules()
    {
    }

    /**
     * Test case for updateNetworkAppliancePort
     *
     * Update the per-port VLAN settings for a single MX port..
     *
     */
    public function testUpdateNetworkAppliancePort()
    {
    }

    /**
     * Test case for updateNetworkApplianceSecurityIntrusion
     *
     * Set the supported intrusion settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceSecurityIntrusion()
    {
    }

    /**
     * Test case for updateNetworkApplianceSecurityMalware
     *
     * Set the supported malware settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceSecurityMalware()
    {
    }

    /**
     * Test case for updateNetworkApplianceSingleLan
     *
     * Update single LAN configuration.
     *
     */
    public function testUpdateNetworkApplianceSingleLan()
    {
    }

    /**
     * Test case for updateNetworkApplianceStaticRoute
     *
     * Update a static route for an MX or teleworker network.
     *
     */
    public function testUpdateNetworkApplianceStaticRoute()
    {
    }

    /**
     * Test case for updateNetworkApplianceTrafficShaping
     *
     * Update the traffic shaping settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShaping()
    {
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Update a custom performance class for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingRules
     *
     * Update the traffic shaping settings rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingUplinkBandwidth
     *
     * Updates the uplink bandwidth settings for your MX network..
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingUplinkBandwidth()
    {
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingUplinkSelection
     *
     * Update uplink selection settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingUplinkSelection()
    {
    }

    /**
     * Test case for updateNetworkApplianceVlan
     *
     * Update a VLAN.
     *
     */
    public function testUpdateNetworkApplianceVlan()
    {
    }

    /**
     * Test case for updateNetworkApplianceVlansSettings
     *
     * Enable/Disable VLANs for the given network.
     *
     */
    public function testUpdateNetworkApplianceVlansSettings()
    {
    }

    /**
     * Test case for updateNetworkApplianceVpnBgp
     *
     * Update a Hub BGP Configuration.
     *
     */
    public function testUpdateNetworkApplianceVpnBgp()
    {
    }

    /**
     * Test case for updateNetworkApplianceVpnSiteToSiteVpn
     *
     * Update the site-to-site VPN settings of a network.
     *
     */
    public function testUpdateNetworkApplianceVpnSiteToSiteVpn()
    {
    }

    /**
     * Test case for updateNetworkApplianceWarmSpare
     *
     * Update MX warm spare settings.
     *
     */
    public function testUpdateNetworkApplianceWarmSpare()
    {
    }

    /**
     * Test case for updateNetworkCameraQualityRetentionProfile
     *
     * Update an existing quality retention profile for this network..
     *
     */
    public function testUpdateNetworkCameraQualityRetentionProfile()
    {
    }

    /**
     * Test case for updateNetworkCellularGatewayConnectivityMonitoringDestinations
     *
     * Update the connectivity testing destinations for an MG network.
     *
     */
    public function testUpdateNetworkCellularGatewayConnectivityMonitoringDestinations()
    {
    }

    /**
     * Test case for updateNetworkCellularGatewayDhcp
     *
     * Update common DHCP settings of MGs.
     *
     */
    public function testUpdateNetworkCellularGatewayDhcp()
    {
    }

    /**
     * Test case for updateNetworkCellularGatewaySubnetPool
     *
     * Update the subnet pool and mask configuration for MGs in the network..
     *
     */
    public function testUpdateNetworkCellularGatewaySubnetPool()
    {
    }

    /**
     * Test case for updateNetworkCellularGatewayUplink
     *
     * Updates the uplink settings for your MG network..
     *
     */
    public function testUpdateNetworkCellularGatewayUplink()
    {
    }

    /**
     * Test case for updateNetworkClientPolicy
     *
     * Update the policy assigned to a client on the network.
     *
     */
    public function testUpdateNetworkClientPolicy()
    {
    }

    /**
     * Test case for updateNetworkClientSplashAuthorizationStatus
     *
     * Update a client's splash authorization.
     *
     */
    public function testUpdateNetworkClientSplashAuthorizationStatus()
    {
    }

    /**
     * Test case for updateNetworkFirmwareUpgrades
     *
     * Update firmware upgrade information for a network.
     *
     */
    public function testUpdateNetworkFirmwareUpgrades()
    {
    }

    /**
     * Test case for updateNetworkFloorPlan
     *
     * Update a floor plan's geolocation and other meta data.
     *
     */
    public function testUpdateNetworkFloorPlan()
    {
    }

    /**
     * Test case for updateNetworkGroupPolicy
     *
     * Update a group policy.
     *
     */
    public function testUpdateNetworkGroupPolicy()
    {
    }

    /**
     * Test case for updateNetworkMerakiAuthUser
     *
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated).
     *
     */
    public function testUpdateNetworkMerakiAuthUser()
    {
    }

    /**
     * Test case for updateNetworkMqttBroker
     *
     * Update an MQTT broker.
     *
     */
    public function testUpdateNetworkMqttBroker()
    {
    }

    /**
     * Test case for updateNetworkNetflow
     *
     * Update the NetFlow traffic reporting settings for a network.
     *
     */
    public function testUpdateNetworkNetflow()
    {
    }

    /**
     * Test case for updateNetworkSettings
     *
     * Update the settings for a network.
     *
     */
    public function testUpdateNetworkSettings()
    {
    }

    /**
     * Test case for updateNetworkSmDevicesFields
     *
     * Modify the fields of a device.
     *
     */
    public function testUpdateNetworkSmDevicesFields()
    {
    }

    /**
     * Test case for updateNetworkSmTargetGroup
     *
     * Update a target group.
     *
     */
    public function testUpdateNetworkSmTargetGroup()
    {
    }

    /**
     * Test case for updateNetworkSnmp
     *
     * Update the SNMP settings for a network.
     *
     */
    public function testUpdateNetworkSnmp()
    {
    }

    /**
     * Test case for updateNetworkSwitchAccessControlLists
     *
     * Update the access control lists for a MS network.
     *
     */
    public function testUpdateNetworkSwitchAccessControlLists()
    {
    }

    /**
     * Test case for updateNetworkSwitchAccessPolicy
     *
     * Update an access policy for a switch network.
     *
     */
    public function testUpdateNetworkSwitchAccessPolicy()
    {
    }

    /**
     * Test case for updateNetworkSwitchAlternateManagementInterface
     *
     * Update the switch alternate management interface for the network.
     *
     */
    public function testUpdateNetworkSwitchAlternateManagementInterface()
    {
    }

    /**
     * Test case for updateNetworkSwitchDhcpServerPolicy
     *
     * Update the DHCP server policy.
     *
     */
    public function testUpdateNetworkSwitchDhcpServerPolicy()
    {
    }

    /**
     * Test case for updateNetworkSwitchDscpToCosMappings
     *
     * Update the DSCP to CoS mappings.
     *
     */
    public function testUpdateNetworkSwitchDscpToCosMappings()
    {
    }

    /**
     * Test case for updateNetworkSwitchLinkAggregation
     *
     * Update a link aggregation group.
     *
     */
    public function testUpdateNetworkSwitchLinkAggregation()
    {
    }

    /**
     * Test case for updateNetworkSwitchMtu
     *
     * Update the MTU configuration.
     *
     */
    public function testUpdateNetworkSwitchMtu()
    {
    }

    /**
     * Test case for updateNetworkSwitchPortSchedule
     *
     * Update a switch port schedule.
     *
     */
    public function testUpdateNetworkSwitchPortSchedule()
    {
    }

    /**
     * Test case for updateNetworkSwitchQosRule
     *
     * Update a quality of service rule.
     *
     */
    public function testUpdateNetworkSwitchQosRule()
    {
    }

    /**
     * Test case for updateNetworkSwitchQosRulesOrder
     *
     * Update the order in which the rules should be processed by the switch.
     *
     */
    public function testUpdateNetworkSwitchQosRulesOrder()
    {
    }

    /**
     * Test case for updateNetworkSwitchRoutingMulticast
     *
     * Update multicast settings for a network.
     *
     */
    public function testUpdateNetworkSwitchRoutingMulticast()
    {
    }

    /**
     * Test case for updateNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Update a multicast rendezvous point.
     *
     */
    public function testUpdateNetworkSwitchRoutingMulticastRendezvousPoint()
    {
    }

    /**
     * Test case for updateNetworkSwitchRoutingOspf
     *
     * Update layer 3 OSPF routing configuration.
     *
     */
    public function testUpdateNetworkSwitchRoutingOspf()
    {
    }

    /**
     * Test case for updateNetworkSwitchSettings
     *
     * Update switch network settings.
     *
     */
    public function testUpdateNetworkSwitchSettings()
    {
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingInterface
     *
     * Update a layer 3 interface for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingInterface()
    {
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingInterfaceDhcp()
    {
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingStaticRoute()
    {
    }

    /**
     * Test case for updateNetworkSwitchStormControl
     *
     * Update the storm control configuration for a switch network.
     *
     */
    public function testUpdateNetworkSwitchStormControl()
    {
    }

    /**
     * Test case for updateNetworkSwitchStp
     *
     * Updates STP settings.
     *
     */
    public function testUpdateNetworkSwitchStp()
    {
    }

    /**
     * Test case for updateNetworkSyslogServers
     *
     * Update the syslog servers for a network.
     *
     */
    public function testUpdateNetworkSyslogServers()
    {
    }

    /**
     * Test case for updateNetworkTrafficAnalysis
     *
     * Update the traffic analysis settings for a network.
     *
     */
    public function testUpdateNetworkTrafficAnalysis()
    {
    }

    /**
     * Test case for updateNetworkWebhooksHttpServer
     *
     * Update an HTTP server.
     *
     */
    public function testUpdateNetworkWebhooksHttpServer()
    {
    }

    /**
     * Test case for updateNetworkWirelessAlternateManagementInterface
     *
     * Update alternate management interface and device static IP.
     *
     */
    public function testUpdateNetworkWirelessAlternateManagementInterface()
    {
    }

    /**
     * Test case for updateNetworkWirelessBilling
     *
     * Update the billing settings.
     *
     */
    public function testUpdateNetworkWirelessBilling()
    {
    }

    /**
     * Test case for updateNetworkWirelessBluetoothSettings
     *
     * Update the Bluetooth settings for a network.
     *
     */
    public function testUpdateNetworkWirelessBluetoothSettings()
    {
    }

    /**
     * Test case for updateNetworkWirelessRfProfile
     *
     * Updates specified RF profile for this network.
     *
     */
    public function testUpdateNetworkWirelessRfProfile()
    {
    }

    /**
     * Test case for updateNetworkWirelessSettings
     *
     * Update the wireless settings for a network.
     *
     */
    public function testUpdateNetworkWirelessSettings()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsid
     *
     * Update the attributes of an MR SSID.
     *
     */
    public function testUpdateNetworkWirelessSsid()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidBonjourForwarding
     *
     * Update the bonjour forwarding setting and rules for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidBonjourForwarding()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidDeviceTypeGroupPolicies
     *
     * Update the device type group policies for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidDeviceTypeGroupPolicies()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL3FirewallRules()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Update the L7 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL7FirewallRules()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidIdentityPsk
     *
     * Update an Identity PSK.
     *
     */
    public function testUpdateNetworkWirelessSsidIdentityPsk()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidSplashSettings
     *
     * Modify the splash page settings for the given SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidSplashSettings()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidTrafficShapingRules
     *
     * Update the traffic shaping settings for an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidTrafficShapingRules()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidVpn
     *
     * Update the VPN settings for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidVpn()
    {
    }

    /**
     * Test case for updateOrganization
     *
     * Update an organization.
     *
     */
    public function testUpdateOrganization()
    {
    }

    /**
     * Test case for updateOrganizationActionBatch
     *
     * Update an action batch.
     *
     */
    public function testUpdateOrganizationActionBatch()
    {
    }

    /**
     * Test case for updateOrganizationAdmin
     *
     * Update an administrator.
     *
     */
    public function testUpdateOrganizationAdmin()
    {
    }

    /**
     * Test case for updateOrganizationApplianceSecurityIntrusion
     *
     * Sets supported intrusion settings for an organization.
     *
     */
    public function testUpdateOrganizationApplianceSecurityIntrusion()
    {
    }

    /**
     * Test case for updateOrganizationApplianceVpnThirdPartyVPNPeers
     *
     * Update the third party VPN peers for an organization.
     *
     */
    public function testUpdateOrganizationApplianceVpnThirdPartyVPNPeers()
    {
    }

    /**
     * Test case for updateOrganizationApplianceVpnVpnFirewallRules
     *
     * Update the firewall rules of an organization's site-to-site VPN.
     *
     */
    public function testUpdateOrganizationApplianceVpnVpnFirewallRules()
    {
    }

    /**
     * Test case for updateOrganizationBrandingPoliciesPriorities
     *
     * Update the priority ordering of an organization's branding policies..
     *
     */
    public function testUpdateOrganizationBrandingPoliciesPriorities()
    {
    }

    /**
     * Test case for updateOrganizationBrandingPolicy
     *
     * Update a branding policy.
     *
     */
    public function testUpdateOrganizationBrandingPolicy()
    {
    }

    /**
     * Test case for updateOrganizationConfigTemplate
     *
     * Update a configuration template.
     *
     */
    public function testUpdateOrganizationConfigTemplate()
    {
    }

    /**
     * Test case for updateOrganizationConfigTemplateSwitchProfilePort
     *
     * Update a switch profile port.
     *
     */
    public function testUpdateOrganizationConfigTemplateSwitchProfilePort()
    {
    }

    /**
     * Test case for updateOrganizationInsightMonitoredMediaServer
     *
     * Update a monitored media server for this organization.
     *
     */
    public function testUpdateOrganizationInsightMonitoredMediaServer()
    {
    }

    /**
     * Test case for updateOrganizationLicense
     *
     * Update a license.
     *
     */
    public function testUpdateOrganizationLicense()
    {
    }

    /**
     * Test case for updateOrganizationLoginSecurity
     *
     * Update the login security settings for an organization.
     *
     */
    public function testUpdateOrganizationLoginSecurity()
    {
    }

    /**
     * Test case for updateOrganizationSaml
     *
     * Updates the SAML SSO enabled settings for an organization..
     *
     */
    public function testUpdateOrganizationSaml()
    {
    }

    /**
     * Test case for updateOrganizationSamlIdp
     *
     * Update a SAML IdP in your organization.
     *
     */
    public function testUpdateOrganizationSamlIdp()
    {
    }

    /**
     * Test case for updateOrganizationSamlRole
     *
     * Update a SAML role.
     *
     */
    public function testUpdateOrganizationSamlRole()
    {
    }

    /**
     * Test case for updateOrganizationSnmp
     *
     * Update the SNMP settings for an organization.
     *
     */
    public function testUpdateOrganizationSnmp()
    {
    }

    /**
     * Test case for wipeNetworkSmDevices
     *
     * Wipe a device.
     *
     */
    public function testWipeNetworkSmDevices()
    {
    }
}
