<?php
/**
 * FirewallApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meraki Dashboard API
 *
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 July, 2021 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * FirewallApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FirewallApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallCellularFirewallRules
     *
     * Return the cellular firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallCellularFirewallRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledService
     *
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledService()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledServices
     *
     * List the appliance services and their accessibility rules.
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledServices()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallInboundFirewallRules
     *
     * Return the inbound firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallInboundFirewallRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL3FirewallRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRules
     *
     * List the MX L7 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories
     *
     * Return the L7 firewall application categories and their associated applications for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRulesApplicationCategories()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToManyNatRules
     *
     * Return the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToManyNatRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToOneNatRules
     *
     * Return the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToOneNatRules()
    {
    }

    /**
     * Test case for getNetworkApplianceFirewallPortForwardingRules
     *
     * Return the port forwarding rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallPortForwardingRules()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL3FirewallRules()
    {
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Return the L7 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL7FirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallCellularFirewallRules
     *
     * Update the cellular firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallCellularFirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallFirewalledService
     *
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testUpdateNetworkApplianceFirewallFirewalledService()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallInboundFirewallRules
     *
     * Update the inbound firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallInboundFirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL3FirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallL7FirewallRules
     *
     * Update the MX L7 firewall rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL7FirewallRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToManyNatRules
     *
     * Set the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToManyNatRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToOneNatRules
     *
     * Set the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToOneNatRules()
    {
    }

    /**
     * Test case for updateNetworkApplianceFirewallPortForwardingRules
     *
     * Update the port forwarding rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallPortForwardingRules()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL3FirewallRules()
    {
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Update the L7 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL7FirewallRules()
    {
    }
}
